/*All rights reserved Robótica Fácil*/
/*All rights reserved Robótica Fácil*/

(function(factory) {
    if (typeof define === 'function' && define.amd) {
        define(['underscore', 'blockly-bq', 'blockly.blocks'], factory);
    } else {
        factory(_, window.Blockly, window.Blocks);
    }
}(function(_, Blockly, Blocks) {
    var load = function(options) {
        //Facilino={};
        Facilino.Arduino={};
        Facilino.Blocks={};
		Facilino.NumStates=0;
		Facilino.NumLEDMatrixStreams=0;
		Facilino.NumMelodies=0;
		Facilino.NumRGBLEDStripStreams=0;
		Facilino.NumImages=0;
		Blockly.Arduino.play_melody='';	
		Blockly.Arduino.play_led_matrix_stream='';
		Blockly.Arduino.play_RGBstream='';
		
		Facilino.getStates = function() {
			states = [];
			for (var x=0;x<Facilino.NumStates;x++)
				states.push(x);
			return states;
		}
		
		Facilino.getHelpUrl = function (block) {
			return '<script>$(function(){var file = "doc/"+roboblocksLanguage+"/'+block+'.html"; $.ajax({url:file,type:"HEAD",error: function(){file="doc/en-GB/'+block+'.html"; $.ajax({url:file,type:"HEAD",error: function(){ if(Blockly.Doc[\''+block+'\']!==undefined) $("#doc").html(Blockly.Doc[\''+block+'\']); else $("#doc").load("doc/"+roboblocksLanguage+"/not_found.html") },success: function(){$("#doc").load(file);}});},success: function(){$("#doc").load(file);}}); });</script>';
		}
		
		Facilino.locales = {
            defaultLanguage: {},
            processor: ''
        };
		
		Facilino.locales.setLang = function(lang) {
			this.defaultLanguage = lang;
		}
        Facilino.locales.getKey = function(key) {
			if (this.defaultLanguage[key]===undefined)
				console.log(key);
            return this.defaultLanguage[key] || this.EngLanguage[key];
        };
		
		Facilino.locales.setKey = function(key,value) {
            this.defaultLanguage[key]=value;
        };
        
        Facilino.locales.initialize = function() {
			this.defaultLanguage = options.langKeys ||window.langKeys || {};
			this.EngLanguage = window.langKeysEng;
			//console.log(this.defaultLanguage);
			this.processor = options.proc || window.FacilinoProcessor;
			return this;
        };

        Facilino.locales.initialize();
        Facilino.variables = {};
        Facilino.isVariable = function(varValue) {
            for (var i in Blockly.Variables.allUsedVariables) {
                if (Blockly.Variables.allUsedVariables[i] === varValue) {
                    return true;
                }
            }
            if (Facilino.variables[varValue] !== undefined) {
                return true;
            }
            if (varValue.search('digitalRead\\(') >= 0 || varValue.search('analogRead\\(') >= 0) {
                return true;
            }
            return false;
        };

        Facilino.findPinMode = function(dropdown_pin) {
            var code = '';
            dropdown_pin = dropdown_pin.split(';\n');
            for (var j in dropdown_pin) {
                if (dropdown_pin[j].search('pinMode') >= 0) {
                    code += dropdown_pin[j] + ';\n';
                } else {
                    dropdown_pin = dropdown_pin[j];
                }
            }
            return {
                'code': code,
                'pin': dropdown_pin
            };
        };
		
			Facilino.hexToRgb = function(hex) {
				// Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
				var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
				hex = hex.replace(shorthandRegex, function(m, r, g, b) {
					return r + r + g + g + b + b;
				});

				var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
				return result ? {
					r: parseInt(result[1], 16),
					g: parseInt(result[2], 16),
					b: parseInt(result[3], 16)
				} : null;
			};
			
			Facilino.pad = function(str,padString,length) {
				while (str.length < length)
					str = padString + str;
				return str;
			}
		
		var profiles;
		$.ajax({
				url: 'profiles.json',
				dataType: "text",
				async: false,
				}).done(function(text) {
				profiles = $.parseJSON(text);
				if (Facilino.locales.processor==='ArduinoNano')
					profiles['default'] = profiles.arduinoNano;
				else if (Facilino.locales.processor==='ArduinoUno')
					profiles['default'] = profiles.arduinoUno;
				else if (Facilino.locales.processor==='NodeMCU')
					profiles['default'] = profiles.nodeMCU;
				else if (Facilino.locales.processor==='ESP32')
					profiles['default'] = profiles.esp32_R32;
				else 
					profiles['default'] = profiles.arduinoNano;
				});
			
        // RGB block colors
        Facilino.LANG_COLOUR_DISTANCE = '#D04141';
		Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND = '#D04141'; //BD3939, AB3131, 992929, 872121
        Facilino.LANG_COLOUR_SOUND = '#CC7B44'; 
		Facilino.LANG_COLOUR_SOUND_BUZZER = '#CC7B44';
		Facilino.LANG_COLOUR_SOUND_VOICE = '#B46B3A';
		Facilino.LANG_COLOUR_SOUND_MIC = '#9D5C30';
		Facilino.LANG_COLOUR_SOUND_MUSIC = '#854C26';//6E3D1C
        Facilino.LANG_COLOUR_MOVEMENT = '#CECE42';
		Facilino.LANG_COLOUR_MOVEMENT_MOTORS = '#CECE42';
		Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE = '#B8B838';
		Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC = '#A3A32F';
		Facilino.LANG_COLOUR_MOVEMENT_WALK = '#8D8D25'; // 78781C
        Facilino.LANG_COLOUR_SCREEN = '#ACCE42';
		Facilino.LANG_COLOUR_SCREEN_LCD = '#ACCE42'; //7F9B2A, 718B23
		Facilino.LANG_COLOUR_SCREEN_LEDMATRIX = '#9DBD3A';
		Facilino.LANG_COLOUR_SCREEN_LEDSTRIP = '#8EAC32';
		Facilino.LANG_COLOUR_SCREEN_OLED = '#7F9B2A';
        Facilino.LANG_COLOUR_CONTROL = '#44CC44';
		Facilino.LANG_COLOUR_CONTROL_INTERRUPTS = '#3EB83E';
		Facilino.LANG_COLOUR_CONTROL_STATEMACHINE = '#39A539';
		//RoboBlocks.LANG_COLOUR_CONTROL_TIME = '#339233';
        Facilino.LANG_COLOUR_LOGIC = '#42CE91';
        Facilino.LANG_COLOUR_MATH = '#42CBCE';
        Facilino.LANG_COLOUR_TEXT = '#42A3CE';
        Facilino.LANG_COLOUR_COMMUNICATION = '#4263CE';
		Facilino.LANG_COLOUR_COMMUNICATION_USB = '#4263CE'; // #2E489B, #283F8A
		Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH = '#3B5ABD';
		Facilino.LANG_COLOUR_COMMUNICATION_WIFI = '#3551AC';
		Facilino.LANG_COLOUR_COMMUNICATION_IOT = '#2E489B';
        Facilino.LANG_COLOUR_ADVANCED = '#9142CE'; //853BBE, 7A34AF, 6E2DA0, 632791
		Facilino.LANG_COLOUR_ADVANCED_ANALOG = '#9142CE';
		Facilino.LANG_COLOUR_ADVANCED_DIGITAL = '#853BBE';
		Facilino.LANG_COLOUR_ADVANCED_OTHER = '#7A34AF';
		Facilino.LANG_COLOUR_VARIABLES = '#B244CC';
        Facilino.LANG_COLOUR_PROCEDURES = '#CE42B3';
		//RoboBlocks.LANG_COLOUR_COLOUR ='#9FD388';
		Facilino.LANG_COLOUR_LIGHT= '#FF8A00';
		Facilino.LANG_COLOUR_LIGHT_INFRARED= '#FF8A00'; //D27201, BB6602, A55B03
		Facilino.LANG_COLOUR_LIGHT_COLOR= '#E87E00'; //D27201 , BB6602, A55B03
		Facilino.LANG_COLOUR_AMBIENT = '#99CCFF';  //78BBFE, 58ABFD, 389AFC, 188AFB
		Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE = '#99CCFF';
		Facilino.LANG_COLOUR_AMBIENT_HUMIDITY = '#78BBFE';
		Facilino.LANG_COLOUR_AMBIENT_RAIN = '#58ABFD';
		Facilino.LANG_COLOUR_AMBIENT_GAS = '#389AFC';
		Facilino.LANG_COLOUR_AMBIENT_OTHER = '#188AFB';
		Facilino.LANG_COLOUR_HTML = '#BDBDBD';
		Facilino.LANG_COLOUR_ESPUI = '#B1B1B1'; //A6A6A6, 9A9A9A, 8F8F8F
		Facilino.LANG_COLOUR_BLOCKS = '#FF00FF';
		Facilino.LANG_COLOUR_SYSTEM = '#ADAD85';  //#adad85, #a3a375, #999966, #8a8a5c,#7a7a52, #6b6b47, #5c5c3d, #4d4d33
		Facilino.LANG_COLOUR_SYSTEM_CONTROL = '#ADAD85';
		Facilino.LANG_COLOUR_SYSTEM_FILTER = '#A3A375';
		Facilino.LANG_COLOUR_DEPRECATED = '#000000';

//DYOR

    this["JST"] = this["JST"] || {};
	
	this["JST"]["inout_digital_write"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'digitalWrite(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (dropdown_stat)) == null ? '' : __t) +
                    ');\n';

            }
            return __p
        };
	
	this["JST"]["inout_digital_write_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',OUTPUT);\n';

            }
            return __p
        };
		
	this["JST"]["inout_digital_read_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',INPUT);\n';

            }
            return __p
        };

   this["JST"]["dyor_definitions_task"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void task' + ((__t = (task_number)) == null ? '' : __t)+'()' +
                    '{\n' +
                    ((__t = (branch)) == null ? '' : __t) +
                    ' }\n';
            }
        return __p
    };
	
	this["JST"]["communications_wifi_definitions_recv"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'String _wifi_recv()\n{\n  uint8_t buffer[128] = {0};\n  uint32_t len = _wifi.recv(buffer, sizeof(buffer),10000);\n  String str = "";\n  if (len > 0)\n    str = (char*)buffer;\n    return str;\n}\n';
            }
            return __p	
	};
	
	this["JST"]["communications_wifi_definitions_recv2"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'String _wifi_recv2()\n{\n  String str="";\n  while(_client.available())\n    str+=_client.readStringUntil(\'\\r\');\n  return str;\n}\n';
            }
            return __p	
	};
	
	this["JST"]["communications_wifi_definitions_server_recv"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'uint32_t _wifi_server_recv(uint8_t *coming_mux_id, unsigned long timeout)\n{\n  uint8_t buffer[128] = {0};\n  uint32_t len = _wifi.recv(coming_mux_id,buffer, sizeof(buffer),timeout);\n  String str = "";\n  return len;\n}\n';
            }
            return __p	
	};

    this["JST"]["dyor_definitions_expression"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void expression(int cs, int din, int clk, int col1, int col2, int col3, int col4, int col5, int col6, int col7, int col8) {\nwriteRow(cs,din,clk,1, col1);\nwriteRow(cs,din,clk,2, col2);\nwriteRow(cs,din,clk,3, col3);\nwriteRow(cs,din,clk,4, col4);\nwriteRow(cs,din,clk,5, col5);\nwriteRow(cs,din,clk,6, col6);\nwriteRow(cs,din,clk,7, col7);\nwriteRow(cs,din,clk,8, col8);\n}\n';
            }
        return __p
    };


    this["JST"]["dyor_definitions_writeRow"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void writeRow(int cs, int din, int clk, int row, int data) {\ndigitalWrite(cs,LOW);\nputByte(din,clk,row);\nputByte(din,clk,data);\ndigitalWrite(cs,LOW);\ndigitalWrite(cs,HIGH);\n}\n';
            }
        return __p
    };

    this["JST"]["dyor_definitions_maxAll"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void maxAll (int cs, int din, int clk, int reg, int col) {\ndigitalWrite(cs,LOW);\nputByte(din,clk,reg);\nputByte(din,clk,col);\ndigitalWrite(cs,LOW);\ndigitalWrite(cs,HIGH);\n}\n';
            }
        return __p
    };
    
    this["JST"]["dyor_definitions_putByte"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void putByte (int din, int clk, int data) {\nbyte i = 8;\nbyte mask;\nwhile(i > 0) {mask = 0x01 << (i - 1);\n    digitalWrite(clk,LOW);\n    if (data & mask)\n{\n      digitalWrite(din,HIGH);\n    }else{\n      digitalWrite(din,LOW);\n    }\n    digitalWrite(clk,HIGH);\n    --i;\n}\n}\n';
            }
        return __p
    };

    this["JST"]["dyor_definitions_LEDMatrix_init"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void LEDMatrix_init(int cs, int din, int clk) {\nmaxAll(cs,din,clk,11,7);\nmaxAll(cs,din,clk,9,0);\nmaxAll(cs,din,clk,12,1);\nmaxAll(cs,din,clk,15,0);\nint i=0;\nfor (i = 1; i <= 8; i++) {\nmaxAll(cs,din,clk,i, 0);\n}\nmaxAll(cs,din,clk,10,15);\n}\n';
            }
        return __p
    };

    this["JST"]["dyor_setups_LEDMatrix"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'maxAll('+((__t = (cs_pin)) == null ? '' : __t)+','+((__t = (din_pin)) == null ? '' : __t)+','+((__t = (clk_pin)) == null ? '' : __t)+',11,7);\n'+'  maxAll('+((__t = (cs_pin)) == null ? '' : __t)+','+((__t = (din_pin)) == null ? '' : __t)+','+((__t = (clk_pin)) == null ? '' : __t)+',9,0);\n'+'  maxAll('+((__t = (cs_pin)) == null ? '' : __t)+','+((__t = (din_pin)) == null ? '' : __t)+','+((__t = (clk_pin)) == null ? '' : __t)+',12,1);\n'+'  maxAll('+((__t = (cs_pin)) == null ? '' : __t)+','+((__t = (din_pin)) == null ? '' : __t)+','+((__t = (clk_pin)) == null ? '' : __t)+',15,0);\n'+'  int i=0;\n'+'  for (i = 1; i <= 8; i++)\n'+'    maxAll('+((__t = (cs_pin)) == null ? '' : __t)+','+((__t = (din_pin)) == null ? '' : __t)+','+((__t = (clk_pin)) == null ? '' : __t)+',i,0);\n'+'  maxAll('+((__t = (cs_pin)) == null ? '' : __t)+','+((__t = (din_pin)) == null ? '' : __t)+','+((__t = (clk_pin)) == null ? '' : __t)+',10,15);\n';
            }
        return __p
    };

    this["JST"]["dyor_setups_cs"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode(' +
                    ((__t = (cs_pin)) == null ? '' : __t) +
                    ',OUTPUT);';
            }
            return __p
        };

    this["JST"]["dyor_setups_din"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode(' +
                    ((__t = (din_pin)) == null ? '' : __t) +
                    ',OUTPUT);';
            }
            return __p
        };

    this["JST"]["dyor_setups_clk"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode(' +
                    ((__t = (clk_pin)) == null ? '' : __t) +
                    ',OUTPUT);\n';
            }
            return __p
        };

    this["JST"]["dyor_definitions_move_base"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void move_base_'+((__t = (left)) == null ? '' : __t)+'_'+((__t = (right)) == null ? '' : __t)+'(int speed, int advance, int turn)\n{\n_servo'+((__t = (left)) == null ? '' : __t)+'.write(90+(int)(65.0*(float)(speed*(advance-turn))/10000.0));\n_servo'+((__t = (right)) == null ? '' : __t)+'.write(90-(int)(65.0*(float)(speed*(advance+turn))/10000.0));\n};\n';
            }
        return __p
        };
	this["JST"]["dyor_definitions_move_base_attach"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void move_base_attach_'+((__t = (left)) == null ? '' : __t)+'_'+((__t = (right)) == null ? '' : __t)+'(int speed, int advance, int turn, int time)\n{\n  if (!_servo'+((__t = (left)) == null ? '' : __t)+'.attached())\n    _servo'+((__t = (left)) == null ? '' : __t)+'.attach('+((__t = (left)) == null ? '' : __t)+');\n  if (!_servo'+((__t = (right)) == null ? '' : __t)+'.attached())\n    _servo'+((__t = (right)) == null ? '' : __t)+'.attach('+((__t = (right)) == null ? '' : __t)+');\n  _servo'+((__t = (left)) == null ? '' : __t)+'.write(90+(int)(65.0*(float)(speed*(advance-turn))/10000.0));\n  _servo'+((__t = (right)) == null ? '' : __t)+'.write(90-(int)(65.0*(float)(speed*(advance+turn))/10000.0));\n  delay(time);\n  _servo'+((__t = (left)) == null ? '' : __t)+'.detach();\n  _servo'+((__t = (right)) == null ? '' : __t)+'.detach();\n};\n';
            }
        return __p
        };
		
	this["JST"]["dyor_definitions_move_base2"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				if ((Blockly.Arduino.definitions_['declare_var_left_dir']!==undefined)||(Blockly.Arduino.definitions_['declare_var_right_dir']!==undefined))
				__p += 'void move_base2(int in2, int in1, int in4, int in3, int speed, int advance, int turn)\n{\n  float _left=(255.0*(float)(speed*(advance-turn))/10000.0);\n  float _right=(255.0*(float)(speed*(advance+turn))/10000.0);\n  if (_left>30.0){\n    analogWrite(in1,(int)_left);\n    digitalWrite(in2,0);\n    _left_dir=1.0;\n  }\n  else if (_left<-30.0){\n    digitalWrite(in1,0);\n    analogWrite(in2,(int)(-_left));\n    _left_dir=-1.0;\n  }else{\n    digitalWrite(in1,1);\n    digitalWrite(in2,1);\n  }\n  if (_right<-30.0){\n    analogWrite(in3,(int)(-_right));\n    digitalWrite(in4,0);\n    _right_dir=-1.0;\n  }\n  else if (_right>30.0){\n    digitalWrite(in3,0);\n    analogWrite(in4,(int)_right);\n    _right_dir=1.0;\n  }else{\n    digitalWrite(in3,1);\n    digitalWrite(in4,1);\n  }\n if ((_left<30.0)&&(_left>-30.0)&&(_right<30.0)&&(_right>-30.0)){\n    _left_dir=0.0;\n    _right_dir=0.0;\n  }\n};\n';
				else 
                __p += 'void move_base2(int in2, int in1, int in4, int in3, int speed, int advance, int turn)\n{\n  float _left=(255.0*(float)(speed*(advance-turn))/10000.0);\n  float _right=(255.0*(float)(speed*(advance+turn))/10000.0);\n  if (_left>30.0){\n    analogWrite(in1,(int)_left);\n    digitalWrite(in2,0);\n  }\n  else if (_left<-30.0){\n    digitalWrite(in1,0);\n    analogWrite(in2,(int)(-_left));\n  }else{\n    digitalWrite(in1,1);\n    digitalWrite(in2,1);\n  }\n  if (_right<-30.0){\n    analogWrite(in3,(int)(-_right));\n    digitalWrite(in4,0);\n  }\n  else if (_right>30.0){\n    digitalWrite(in3,0);\n    analogWrite(in4,(int)_right);\n  }else{\n    digitalWrite(in3,1);\n    digitalWrite(in4,1);\n  }\n};\n';
            }
        return __p
        };

    this["JST"]["dyor_move_base"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'move_base_'+((__t = (left)) == null ? '' : __t)+'_'+((__t = (right)) == null ? '' : __t)+'(' +
            ((__t = (speed)) == null ? '' : __t) +
            ',' +
            ((__t = (advance)) == null ? '' : __t) +
            ',' +
            ((__t = (turn)) == null ? '' : __t) +
            ');\n';
            }
            return __p
        };
		
	this["JST"]["dyor_move_base_attach"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'move_base_attach_'+((__t = (left)) == null ? '' : __t)+'_'+((__t = (right)) == null ? '' : __t)+'(' +
            ((__t = (speed)) == null ? '' : __t) +
            ',' +
            ((__t = (advance)) == null ? '' : __t) +
            ',' +
            ((__t = (turn)) == null ? '' : __t) +
			',' +
            ((__t = (time)) == null ? '' : __t) +
            ');\n';
            }
            return __p
        };


    this["JST"]["dyor_servo_cont"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '_servo' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    '.write((('+((__t = (value_degree)) == null ? '' : __t)+'-90)*'+((__t = (value_speed)) == null ? '' : __t)+'/100)+90);\n';

            }
            return __p
        };
		
		this["JST"]["dyor_servo_cont1"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '_servo' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    '.write((('+'((('+((__t = (value_speed)) == null ? '' : __t)+'*90)/100+90));\n';

            }
            return __p
        };


        this["JST"]["dyor_servo_move"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '_servo' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    '.write(' +
                    ((__t = (value_degree)) == null ? '' : __t) +
                    ');\n';

            }
            return __p
        };

	this["JST"]["dyor_move_grip_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _left_close=45;\nint _left_open=135;\nint _right_close=135;\nint _right_open=45;\n';
            }
            return __p
        };

    this["JST"]["dyor_move_arms_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _left_up=45;\nint _left_down=135;\nint _right_up=135;\nint _right_down=45;\n';
            }
            return __p
        };

    this["JST"]["dyor_line_following_definitions_follow"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int follow(int light, int gain)\n{\n  return (int)(((float)(gain)/100.0)*((float)((_white-_black)/2+_black)-(float)(light)));\n}\n';

            }
            return __p
        };

    this["JST"]["dyor_line_following"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'follow(' +
                    ((__t = (light)) == null ? '' : __t) +
                    ',' +
                    ((__t = (gain)) == null ? '' : __t) +
                    ')';
            }
            return __p
        };

    this["JST"]["dyor_line_following_binary"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'if(' +
                    ((__t = (light)) == null ? '' : __t) +
                    '<(0.4*(_black-_white)+_white))\n{\n'+
            ((__t = (white)) == null ? '' : __t) +
            '}\nelse if('+
            ((__t = (light)) == null ? '' : __t) +
            '<(0.6*(_black-_white)+_white))\n{\n'+
            ((__t = (gray)) == null ? '' : __t) +
            '}\nelse\n{'+
            ((__t = (black)) == null ? '' : __t) +
                    '\n}';
            }
            return __p
        };

    this["JST"]["dyor_line_following_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _white=800;\nint _black=30;\n';

            }
            return __p
        };

    this["JST"]["dyor_calibrate_white"] = function(obj) {
      obj || (obj = {});
      var __t, __p = '',
         __e = _.escape;
      with(obj) {
        __p += '_white=' +
                    ((__t = (white)) == null ? '' : __t) +
                    ';\n';
      }
      return __p
    };

    this["JST"]["dyor_calibrate_black"] = function(obj) {
      obj || (obj = {});
      var __t, __p = '',
         __e = _.escape;
      with(obj) {
        __p += '_black=' +
                    ((__t = (black)) == null ? '' : __t) +
                    ';\n';
      }
      return __p
    };
	
	this["JST"]["one_wire_temp_readTempCIdx"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tempSensor'+((__t = (pin)) == null ? '' : __t)+'.getTempCByIndex('+((__t = (idx)) == null ? '' : __t)+')';
            }
            return __p	
	}
	
	this["JST"]["one_wire_temp_readTempFIdx"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tempSensor'+((__t = (pin)) == null ? '' : __t)+'.getTempFByIndex('+((__t = (idx)) == null ? '' : __t)+')';
            }
            return __p	
	}
	
	this["JST"]["one_wire_definitions_readTempC"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'float readTempC()\n{\n tempSensor'+((__t = (pin)) == null ? '' : __t)+'.requestTemperatures();\n return tempSensor'+((__t = (pin)) == null ? '' : __t)+'.getTempCByIndex(0);\n}\n';
            }
            return __p	
	}
	
	this["JST"]["one_wire_definitions_readTempF"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'float readTempF()\n{\n tempSensor'+((__t = (pin)) == null ? '' : __t)+'.requestTemperatures();\n return tempSensor'+((__t = (pin)) == null ? '' : __t)+'.getTempFByIndex(0);\n}\n';
            }
            return __p	
	}
	
	this["JST"]["one_wire_temp2_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tempSensor.begin();\n';
            }
            return __p
        };
	
	this["JST"]["dallas_temp_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tempSensor'+((__t = (pin)) == null ? '' : __t)+'.begin();\n';
            }
            return __p
        };
	
	this["JST"]["dht_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'sensor'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'.begin();\n';
            }
            return __p
        };
		
	this["JST"]["one_wire_definitions_alarmHandler"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void newAlarmHandler'+((__t = (pin)) == null ? '' : __t)+'(const uint8_t* deviceAddress)\n{\n '+((__t = (code)) == null ? '' : __t)+' \n}\n';
            }
            return __p	
	}
	
	this["JST"]["one_wire_definitions_checkTempSensorDeviceAddress"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'bool checkTempSensorDeviceAddress'+((__t = (pin)) == null ? '' : __t)+'(const uint8_t* deviceAddress, uint8_t idx) {\n  DeviceAddress dev;\n  tempSensor'+((__t = (pin)) == null ? '' : __t)+'.getAddress(dev,idx);\n for (int i=0;i<7;i++)\n  {\n    if (dev[i]!=deviceAddress[i])\n      return false;\n  }\n  return true;\n}\n';
            }
            return __p	
	}
	
	
	
	this["JST"]["one_wire_temp_alarm_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tempSensor'+((__t = (pin)) == null ? '' : __t)+'.setAlarmHandler(&newAlarmHandler'+((__t = (pin)) == null ? '' : __t)+');\n';
            }
            return __p
        };
		
	this["JST"]["one_wire_temp_readTempC"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'readTempC()';
            }
            return __p
        };
		
	this["JST"]["one_wire_temp_readTempF"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'readTempF()';
            }
            return __p
        };
		
	this["JST"]["dallas_temp_definitions_include"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <DallasTemperature.h>';
            }
            return __p
        };
	
	this["JST"]["one_wire_temp_definitions_include"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <OneWire.h>';
            }
            return __p
        };
		
	this["JST"]["one_wire_temp_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'OneWire oneWire'+((__t = (pin)) == null ? '' : __t)+'('+((__t = (pin)) == null ? '' : __t)+');\n';
            }
            return __p
        };
		
	this["JST"]["dallas_temp_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'DallasTemperature tempSensor'+((__t = (pin)) == null ? '' : __t)+'(&oneWire'+((__t = (pin)) == null ? '' : __t)+');\n';
            }
            return __p
        };
		
	this["JST"]["one_wire_temp2_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'OneWire oneWire('+((__t = (pin)) == null ? '' : __t)+');\n';
            }
            return __p
        };
		
	this["JST"]["dallas_temp2_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'DallasTemperature tempSensor(&oneWire);\n';
            }
            return __p
        };
		
	this["JST"]["dht_definitions_include"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <DHT.h>';			
            }
            return __p
        };
		
		this["JST"]["dht_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'DHT sensor'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'('+((__t = (pin)) == null ? '' : __t)+','+((__t = (type)) == null ? '' : __t)+');\n';			
            }
            return __p
        };
		
		this["JST"]["dht_humid_definitions_consts"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'float _dht_'+((__t = (option)) == null ? '' : __t)+'_'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'=0.0;\n';			
            }
            return __p
        };
		
		this["JST"]["dht_humid_alarm"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'if (sensor'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'.readHumidity()>=_dht_H_'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'){\n'+((__t = (high)) == null ? '' : __t)+'\n}\n'+'if (sensor'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'.readHumidity()<=_dht_L_'+((__t = (type)) == null ? '' : __t)+'_'+((__t = (pin)) == null ? '' : __t)+'){\n'+((__t = (low)) == null ? '' : __t)+'\n}\n';			
            }
            return __p
        };
		
		this["JST"]["raindrop_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _raindrop_rain_'+((__t = (pin)) == null ? '' : __t)+'=400;\n';
				__p += 'int _raindrop_wet_'+((__t = (pin)) == null ? '' : __t)+'=800;\n';			
            }
            return __p
        };
		
		this["JST"]["raindrop_alarm"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _rain=analogRead('+((__t = (pin)) == null ? '' : __t)+');\nif (_rain<=_raindrop_rain_'+((__t = (pin)) == null ? '' : __t)+'){\n'+((__t = (rain)) == null ? '' : __t)+'\n}\n'+'else if ((_rain>_raindrop_rain_'+((__t = (pin)) == null ? '' : __t)+')&&(_rain<=_raindrop_wet_'+((__t = (pin)) == null ? '' : __t)+')){\n'+((__t = (wet)) == null ? '' : __t)+'\n}\nelse{\n'+((__t = (dry)) == null ? '' : __t)+'\n}\n';
            }
            return __p
        };
		
		this["JST"]["wire_definitions_include"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <Wire.h>';			
            }
            return __p
        };
		
		this["JST"]["bmp_definitions_include"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <Adafruit_BMP085.h>';			
            }
            return __p
        };
		
		this["JST"]["servo_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'Servo _servo'+((__t = (pin)) == null ? '' : __t)+';\n';
            }
            return __p
        };
		
		this["JST"]["ESP_servo_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'ESPServo _servo'+((__t = (pin)) == null ? '' : __t)+';\n';
            }
            return __p
        };

        this["JST"]["dyor_servo_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '_servo' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    '.attach(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ');';
            }
            return __p
        };

    this["JST"]["dyor_us"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'distance(' +
                    ((__t = (trigger_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (echo_pin)) == null ? '' : __t) +
                    ')';

            }
            return __p
        };

    this["JST"]["dyor_us_collision"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'if (distance(' +
                    ((__t = (trigger_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (echo_pin)) == null ? '' : __t) +
                    ')<(' +
            ((__t = (distance)) == null ? '' : __t) +
            ')){\n' +
            ((__t = (collision)) == null ? '' : __t) +
            '\n}\nelse\n{\n' +
            ((__t = (not_collision)) == null ? '' : __t) +
            '}';
            }
            return __p
        };

	this["JST"]["dyor_us_definitions_include"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <wiring_private.h>\n#include <pins_arduino.h>\n';
            }
            return __p
        };


	this["JST"]["dyor_us_definitions_pulseIn"] = function (obj) {
	obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'unsigned long _pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)\n{\n  uint8_t bit = digitalPinToBitMask(pin);\n  uint8_t port = digitalPinToPort(pin);\n  uint8_t stateMask = (state ? bit : 0);\n  unsigned long width = 0;\n  unsigned long numloops = 0;\n  unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;\n  while ((*portInputRegister(port) & bit) == stateMask)\n    if (numloops++ == maxloops)\n      return 0;\n  while ((*portInputRegister(port) & bit) != stateMask)\n    if (numloops++ == maxloops)\n      return 0;\n  while ((*portInputRegister(port) & bit) == stateMask) {\n    if (numloops++ == maxloops)\n      return 0;\n    width++;\n  }\n  return clockCyclesToMicroseconds(width * 21 + 16);\n}\n';

            }
            return __p	
	};

        this["JST"]["dyor_us_definitions_distance"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'long distance(int trigger_pin, int echo_pin)\n{\n  long microseconds = US_init(trigger_pin, echo_pin);\n  long distance;\n  distance = microseconds/29/2;\n  if (distance == 0){\n    distance = 999;\n  }\n  return distance;\n}\n';

            }
            return __p
        };

        this["JST"]["dyor_us_definitions_us_init"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				if ((Facilino.locales.processor==='ArduinoNano') || (Facilino.locales.processor==='ArduinoUno'))
					__p += 'long US_init(int trigger_pin, int echo_pin)\n{\n  digitalWrite(trigger_pin, LOW);\n  delayMicroseconds(2);\n  digitalWrite(trigger_pin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigger_pin, LOW);\n  long microseconds = _pulseIn(echo_pin ,HIGH,100000);\n  return microseconds;\n}\n';
				else if ((Facilino.locales.processor==='ESP32') || (Facilino.locales.processor==='NodeMCU'))
					__p += 'long US_init(int trigger_pin, int echo_pin)\n{\n  digitalWrite(trigger_pin, LOW);\n  delayMicroseconds(2);\n  digitalWrite(trigger_pin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigger_pin, LOW);\n  long microseconds = pulseIn(echo_pin ,HIGH);\n  return microseconds;\n}\n';
            }
            return __p
        };

        this["JST"]["dyor_us_setups_echo"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode( ' +
                    ((__t = (echo_pin)) == null ? '' : __t) +
                    ' , INPUT );';

            }
            return __p
        };

        this["JST"]["dyor_us_setups_trigger"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode( ' +
                    ((__t = (trigger_pin)) == null ? '' : __t) +
                    ' , OUTPUT );';

            }
            return __p
        };

    this["JST"]["dyor_read_analog"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'analogRead(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ')';

            }
            return __p
        };

    this["JST"]["dyor_read_digital"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'digitalRead(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ')';

            }
            return __p
        };

    this["JST"]["dyor_music_play_voice"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'say('+((__t = (voice)) == null ? '' : __t)+');\n';
            }
            return __p
        };


    this["JST"]["dyor_music_define_variables_word_AFTERNOON"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spAFTERNOON[] PROGMEM = {0xC7,0xCE,0xCE,0x3A,0xCB,0x58,0x1F,0x3B,0x07,0x9D,0x28,0x71,0xB4,0xAC,0x9C,0x74,0x5A,0x42,0x55,0x33,0xB2,0x93,0x0A,0x09,0xD4,0xC5,0x9A,0xD6,0x44,0x45,0xE3,0x38,0x60,0x9A,0x32,0x05,0xF4,0x18,0x01,0x09,0xD8,0xA9,0xC2,0x00,0x5E,0xCA,0x24,0xD5,0x5B,0x9D,0x4A,0x95,0xEA,0x34,0xEE,0x63,0x92,0x5C,0x4D,0xD0,0xA4,0xEE,0x58,0x0C,0xB9,0x4D,0xCD,0x42,0xA2,0x3A,0x24,0x37,0x25,0x8A,0xA8,0x8E,0xA0,0x53,0xE4,0x28,0x23,0x26,0x13,0x72,0x91,0xA2,0x76,0xBB,0x72,0x38,0x45,0x0A,0x46,0x63,0xCA,0x69,0x27,0x39,0x58,0xB1,0x8D,0x60,0x1C,0x34,0x1B,0x34,0xC3,0x55,0x8E,0x73,0x45,0x2D,0x4F,0x4A,0x3A,0x26,0x10,0xA1,0xCA,0x2D,0xE9,0x98,0x24,0x0A,0x1E,0x6D,0x97,0x29,0xD2,0xCC,0x71,0xA2,0xDC,0x86,0xC8,0x12,0xA7,0x8E,0x08,0x85,0x22,0x8D,0x9C,0x43,0xA7,0x12,0xB2,0x2E,0x50,0x09,0xEF,0x51,0xC5,0xBA,0x28,0x58,0xAD,0xDB,0xE1,0xFF,0x03};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ALERT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spALERT[]  PROGMEM = {0xA5, 0xCF, 0xC6, 0xAB, 0x55, 0x5B, 0xAF, 0x39, 0xDA, 0xC9, 0x54, 0xDD, 0xBC, 0xC6, 0xC2, 0x3C, 0x27, 0x20, 0xCF, 0x1C, 0xD7, 0x30, 0xB0, 0x45, 0x16, 0x69, 0x1D, 0xC3, 0x11, 0xE4, 0x59, 0x8A, 0x7C, 0xB5, 0x9B, 0x8B, 0xD9, 0x30, 0xB7, 0xD3, 0x76, 0x19, 0x9A, 0x25, 0x59, 0x57, 0x59, 0xEC, 0x11, 0xAF, 0xE8, 0xD9, 0xF9, 0x2A, 0x8A, 0x1D, 0xF0, 0x75, 0x3F, 0x73, 0xAC, 0x87, 0x3B, 0xA2, 0x0B, 0xAA, 0x2B, 0xCF, 0xE4, 0x10, 0xA1, 0xDC, 0x45, 0x64, 0x03, 0x00, 0x80, 0x01, 0x66, 0x36, 0x33, 0xC0, 0xAB, 0xD5, 0x0A, 0x68, 0x25, 0x85, 0x02, 0xFF, 0x0F};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ARE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spARE[]               PROGMEM ={0xA7,0x70,0xB1,0xCE,0x29,0xD2,0xDD,0xFC,0xE6,0x37,0xBF,0xC5,0xA9,0x7C,0xC8,0x4E,0x95,0xE6,0xB7,0x3A,0x8D,0xAF,0x1E,0x19,0x9C,0xFC,0x76,0xAD,0xB3,0x43,0x32,0xDD,0xEA,0xE4,0xCE,0xF5,0xBE,0x2A,0x6B,0x73,0x22,0xD3,0xC5,0xE9,0x2C,0xCA,0xAE,0x1E,0x00,0x00};\n';
            }
            return __p 
        };


    this["JST"]["dyor_music_define_variables_word_BACK"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spBACK[]              PROGMEM ={0xA7,0x4D,0x59,0xCB,0x39,0xD6,0x9D,0x21,0x54,0x6D,0x93,0xCE,0x76,0x86,0x54,0xAD,0xCD,0x3A,0xED,0xED,0x6F,0x77,0xDB,0xDB,0xDE,0x2A,0x17,0x00,0x08,0xD0,0xC2,0x44,0x01,0x21,0x8B,0x0A,0x20,0x79,0x27,0x04,0xB8,0x28,0xFC};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_BLACK"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spBLACK[]             PROGMEM ={0xA4,0x12,0xBC,0x32,0x22,0x9C,0x94,0xDA,0x78,0x3B,0xD2,0xF4,0xBC,0xAA,0x60,0x65,0x0B,0x3D,0xDD,0xA9,0xAC,0x8B,0x4D,0xC8,0xA4,0xA7,0xF2,0xC9,0x4E,0x64,0xDC,0xDE,0xFA,0xD4,0xA1,0xF9,0x48,0xB4,0x9B,0xDB,0xEE,0xAE,0xF4,0xA1,0x73,0x5A,0x96,0xA1,0x3A,0xD8,0x01,0x40,0x00,0x71,0x38,0x09,0x20,0x16,0x05,0x06,0x24,0x9F,0x80,0x00,0x17,0x94,0x1E};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_BYE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spBYE[]               PROGMEM ={0xAE,0xC2,0xA6,0xCC,0x2D,0xD2,0x9E,0xC2,0xA7,0x78,0x91,0xC8,0x74,0xAB,0x53,0xB9,0x34,0xA3,0x30,0x8E,0x6F,0x75,0xAB,0x5B,0x9D,0xDA,0x95,0x6E,0x93,0xB1,0x7F,0xEB,0xDB,0xAC,0x2E,0x4C,0x4B,0xC9,0x96,0xDC,0xBB,0xD6,0x85,0xE2,0x61,0x19,0xA5,0x5B,0x1F,0x8A,0xA9,0x77,0x44,0xEE,0x7D,0xEE,0x62,0x2F,0xFB,0x07,0x00,0x00};\n';
            }
            return __p 
        };


    this["JST"]["dyor_music_define_variables_word_CAN"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spCAN[]               PROGMEM ={0x0C,0x68,0x42,0xCC,0x00,0x33,0x2A,0x3B,0x20,0x69,0xD5,0x92,0xE6,0xE9,0xA6,0x9A,0x75,0x6F,0x75,0xAB,0x53,0xA5,0x6E,0x2E,0x5E,0x51,0x6F,0x7D,0x9B,0xDB,0xEC,0x66,0xB7,0xB3,0xE9,0x4D,0xAA,0xAD,0xA7,0x16,0x6D,0x37,0xB9,0xCE,0xB5,0xAB,0x64,0xE0,0x50,0x99,0xC4,0xBE,0xE6,0xCD,0x03};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_COLOR"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spCOLOR[]             PROGMEM ={0x0E,0x88,0xC7,0x35,0x00,0x31,0x15,0x7B,0x40,0x03,0x27,0xF6,0xAE,0xDA,0x4D,0xB2,0xDD,0x78,0xC4,0xDA,0x7D,0xB1,0xF2,0xEA,0x9E,0xE4,0xAC,0x17,0xAB,0x72,0x31,0x83,0x8B,0xDB,0xEE,0x66,0x76,0xA9,0xB7,0x4D,0x2D,0x9B,0xB6,0xC4,0x41,0x0F,0x7A,0x94,0xC3,0x03,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_COMPLETED"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spCOMPLETED[]         PROGMEM ={0x02,0xD0,0xC5,0x99,0x03,0xAD,0xD2,0x35,0x52,0xD3,0x12,0xEF,0xBA,0x34,0xA9,0xE0,0xB2,0x88,0x96,0xD0,0xD8,0x88,0xCF,0x11,0x5E,0x7D,0x23,0x7B,0x10,0x40,0xAD,0xE2,0x1E,0x70,0x40,0xD1,0x9A,0x27,0xF1,0xC6,0x23,0x24,0x32,0x9F,0xD4,0x79,0x33,0x8F,0x6A,0xB5,0xD2,0x14,0x49,0xDD,0x7B,0xF1,0x4C,0x43,0x1E,0x1B,0xB3,0x64,0x6C,0x42,0x00,0xF0,0x15,0x02,0x70,0xDC,0x2D,0xD5,0x25,0x9A,0xA3,0xEB,0xB6,0x5D,0xDF,0x76,0x77,0xA5,0x4F,0xC1,0x8D,0x0D,0xBE,0x88,0x81,0xE9,0xC8,0x88,0xCC,0xC8,0x07,0x31,0x2A,0xE9,0x96,0x9E,0x0E,0xED,0xF0};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_CONNECTED"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spCONNECTED[]         PROGMEM ={0x0E,0x88,0xC7,0x35,0x00,0x31,0x15,0x7B,0x20,0x24,0xB1,0x78,0x5A,0xD8,0x92,0x9B,0x9F,0xDC,0xE7,0x70,0x53,0x9F,0x93,0x72,0xEF,0x5D,0x1D,0x2D,0x6D,0x2F,0x4E,0x96,0x72,0x84,0x43,0xD5,0x39,0x69,0x6E,0x91,0x86,0xDD,0x66,0xA4,0x69,0x59,0x90,0x8F,0xEB,0x94,0x45,0xED,0xAA,0x62,0x4A,0x78,0x0D,0x00,0x0A,0x90,0x41,0xA3,0x65,0x25,0x9A,0xA3,0xEB,0xB6,0x59,0xEC,0xAA,0xB6,0xA2,0x17,0x26,0x2C,0xC3,0x33,0xC6,0xDE,0xF6,0xAA,0x57,0xD2,0x2D,0x3D,0x1D,0xBA,0xA6,0x44,0x15,0x16,0xC9,0xAC,0xFA,0x18,0x45,0x94,0xA2,0x26,0xC0,0x03,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_DANGER"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spDANGER[] PROGMEM = {0x2D, 0xBF, 0x21, 0x92, 0x59, 0xB4, 0x9F, 0xA2, 0x87, 0x10, 0x8E, 0xDC, 0x72, 0xAB, 0x5B, 0x9D, 0x62, 0xA6, 0x42, 0x9E, 0x9C, 0xB8, 0xB3, 0x95, 0x0D, 0xAF, 0x14, 0x15, 0xA5, 0x47, 0xDE, 0x1D, 0x7A, 0x78, 0x3A, 0x49, 0x65, 0x55, 0xD0, 0x5E, 0xAE, 0x3A, 0xB5, 0x53, 0x93, 0x88, 0x65, 0xE2, 0x00, 0xEC, 0x9A, 0xEA, 0x80, 0x65, 0x82, 0xC7, 0xD8, 0x63, 0x0A, 0x9A, 0x65, 0x5D, 0x53, 0xC9, 0x49, 0x5C, 0xE1, 0x7D, 0x2F, 0x73, 0x2F, 0x47, 0x59, 0xC2, 0xDE, 0x9A, 0x27, 0x5F, 0xF1, 0x8B, 0xDF, 0xFF, 0x03};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_DO"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spDO[]                PROGMEM ={0x2E,0x4E,0x80,0xB3,0x32,0x6D,0x8D,0x22,0x44,0x53,0x4B,0xFB,0x7C,0xB2,0x22,0xAC,0xA8,0x2C,0xFB,0x4E,0x76,0x32,0xD3,0x99,0xB5,0x22,0x51,0x6B,0x49,0xC9,0xDE,0xAB,0xD6,0x38,0x11,0xA9,0x2E,0xD9,0x6B,0x1B,0x7A,0x69,0x2A,0xCD,0xB5,0x9B,0xEF,0x6D,0xAF,0x87,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_DOES"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spDOES[]              PROGMEM ={0xAD,0x4E,0xDE,0x4D,0x4D,0xDE,0xDC,0x7C,0x25,0x26,0x7B,0xB9,0x4D,0x95,0x9D,0xCE,0x74,0xA6,0xAB,0xF0,0x21,0xD3,0xD3,0x16,0xCF,0x6A,0x36,0xB3,0xE9,0x5D,0xE9,0xAC,0xF7,0x70,0xF7,0x2B,0xB9,0xCB,0x9D,0xEB,0xB5,0xF7,0x74,0x8F,0xD1,0xBE,0x67,0x40,0x05,0xEC,0x1A,0xE0,0x00,0x05,0x1E};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_DONE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spDONE[]              PROGMEM ={0xC0,0x32,0xA6,0x22,0xD2,0xC3,0x36,0xAB,0x88,0xAA,0x4A,0x8B,0xD8,0xA9,0x8E,0xC1,0xD2,0x2C,0x9E,0xDE,0xEA,0x56,0xA7,0x8A,0x3E,0x2A,0x35,0x52,0xDF,0xEA,0x54,0xD1,0x45,0xA7,0x44,0xEA,0x53,0x05,0x1F,0xE5,0x1E,0x89,0x4F,0x1D,0x42,0x94,0xBB,0x47,0x5D,0x8D,0x0F,0x51,0xEE,0x1E,0xB7,0xB5,0x3E,0x78,0x84,0x79,0x96,0xD0,0x05,0x0F,0x6D,0x19,0x6A,0x42,0x17,0x3C,0xB4,0x65,0xA8,0x56,0x9D,0x0B,0x30,0x16,0xA9,0xDA,0x8C,0xDA,0xD2,0x8C,0xB6,0x02,0x3D,0xF1,0x89,0x4E,0x0F};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_EIGHT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spEIGHT[]             PROGMEM ={0x2D,0x2F,0xC5,0x54,0xA3,0x63,0xB5,0xBC,0x54,0x55,0xCD,0x1E,0x32,0xB2,0x5A,0x85,0xB8,0xBA,0xCE,0xCE,0x66,0x36,0x8B,0x56,0xD5,0x22,0xC8,0x55,0x73,0x63,0x2F,0x07,0x00,0x00,0x02,0x44,0x6D,0xCA,0x01,0x04,0x18,0x21,0x86,0x81,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_EVENING"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spEVENING[]   PROGMEM = {0xCD,0x6D,0x98,0x73,0x47,0x65,0x0D,0x6D,0x10,0xB2,0x5D,0x93,0x35,0x94,0xC1,0xD0,0x76,0x4D,0x66,0x93,0xA7,0x04,0xBD,0x71,0xD9,0x45,0xAE,0x92,0xD5,0xAC,0x53,0x07,0x6D,0xA5,0x76,0x63,0x51,0x92,0xD4,0xA1,0x83,0xD4,0xCB,0xB2,0x51,0x88,0xCD,0xF5,0x50,0x45,0xCE,0xA2,0x2E,0x27,0x28,0x54,0x15,0x37,0x0A,0xCF,0x75,0x61,0x5D,0xA2,0xC4,0xB5,0xC7,0x44,0x55,0x8A,0x0B,0xA3,0x6E,0x17,0x95,0x21,0xA9,0x0C,0x37,0xCD,0x15,0xBA,0xD4,0x2B,0x6F,0xB3,0x54,0xE4,0xD2,0xC8,0x64,0xBC,0x4C,0x91,0x49,0x12,0xE7,0xB2,0xB1,0xD0,0x22,0x0D,0x9C,0xDD,0xAB,0x62,0xA9,0x38,0x53,0x11,0xA9,0x74,0x2C,0xD2,0xCA,0x59,0x34,0xA3,0xE5,0xFF,0x03};\n';
            }
            return __p 
        };

    
    this["JST"]["dyor_music_define_variables_word_FIRE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spFIRE[]   PROGMEM = {0x04, 0x18, 0xCE, 0x4D, 0x02, 0x1A, 0xD0, 0x80, 0x04, 0x46, 0x91, 0x55, 0x57, 0x07, 0x6D, 0xD9, 0xCD, 0xAE, 0x4F, 0x55, 0x5D, 0x59, 0x87, 0xAE, 0xB9, 0xD5, 0x6D, 0x5B, 0xDB, 0x7D, 0x93, 0xB6, 0xED, 0xEE, 0xE3, 0x5A, 0x6B, 0x6A, 0xF4, 0x91, 0xD5, 0x73, 0x6B, 0x67, 0xF5, 0x47, 0xBC, 0xD4, 0xA7, 0x9C, 0xA5, 0x34, 0xE4, 0xD0, 0xA6, 0xF0, 0xE4, 0xAA, 0xB8, 0x2D, 0xAB, 0xC3, 0x9B, 0x62, 0xC2, 0xAC, 0x74, 0xF6, 0x9F, 0xFB, 0x72, 0x0B, 0xEC, 0x92, 0xCD, 0xEE, 0xCF, 0x43, 0x69, 0x4C, 0x5B, 0xFF, 0x3F};\n';
        }
            return __p 
        };
    
    this["JST"]["dyor_music_define_variables_word_FIVE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spFIVE[]  PROGMEM ={0xC0,0x80,0xE8,0xCD,0x46,0xEE,0x9C,0x6F,0x31,0x66,0x39,0xB9,0xF3,0x35,0x45,0xD6,0xF4,0x64,0xDE,0x77,0x27,0x79,0xDD,0x93,0x7A,0xDF,0x1D,0x14,0x45,0x4E,0xE6,0x43,0x97,0x73,0x05,0x3D,0x45,0x08,0x5D,0xC5,0x15,0xE5,0x54,0x21,0x56,0x06,0x67,0x90,0x53,0xC7,0x54,0x15,0x14,0x75,0x4F,0x1B,0xAB,0x17,0x43,0x25,0x59,0x5D,0x6C,0x5E,0xAA,0x59,0x75,0xF4,0xA9,0x59,0x69,0xD5,0xD4,0xD1,0xC7,0x6A,0xA1,0x5E,0x53,0xDB,0x10,0x8B,0x86,0x46,0x5D,0x6D,0x43,0x28,0x1A,0x1A,0x35,0xB4,0xF4,0x2E,0x4B,0xA9,0x75,0x62,0x33,0x98,0xA2,0xC6,0x5A,0x09,0xD9,0x20,0x95,0x7B,0x99,0xBB,0x06,0x04,0x38,0x27,0x84,0x00,0xE5,0xD5,0x1F};\n';
        }
            return __p 
        };


    this["JST"]["dyor_music_define_variables_word_FOUR"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spFOUR[]              PROGMEM ={0xC0,0x00,0x23,0x2D,0x24,0xA0,0x01,0x0B,0x58,0x20,0xC5,0xBC,0xF7,0x11,0x4C,0x9A,0x9A,0xA4,0x84,0xF6,0x39,0x85,0x6E,0x97,0x93,0x98,0x84,0x8C,0xF5,0x5E,0x45,0xCD,0xDE,0x2A,0x91,0x63,0xD2,0x58,0x7D,0x6B,0x55,0xB1,0xF2,0x26,0xED,0xA9,0xE7,0xDB,0xC2,0x4B,0xFC,0xBA,0x49,0x2E,0x89,0x55,0xF4,0xE3,0x66,0xB5,0x95,0xAB,0xCC,0xBB,0x9B,0xED,0x30,0xF6,0x11,0x35,0x76,0x7B,0x00,0x00};\n';
        }
            return __p 
        };


    this["JST"]["dyor_music_define_variables_word_FRONT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spFRONT[]             PROGMEM ={0x06,0xA8,0x21,0xC5,0x03,0x11,0x88,0x40,0x49,0xF5,0x92,0xF4,0x42,0xAF,0x35,0xEB,0xF9,0xA9,0xBC,0xAF,0x0E,0xF2,0xF4,0xBB,0xDE,0x4D,0xEB,0x7D,0x82,0x76,0x69,0x35,0x71,0xB0,0xBD,0xEB,0x93,0x4D,0x33,0x15,0x19,0xC0,0x80,0xA6,0x9A,0x2D,0xF0};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_GO"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spGO[]                PROGMEM ={0xA5,0x4E,0xAE,0x58,0xBC,0x6B,0x9D,0xA2,0x1B,0x75,0xAA,0xC8,0x76,0xAA,0x1C,0x34,0x2C,0x39,0xCB,0xA9,0x82,0xF6,0xB1,0xD4,0x3C,0xA7,0xF2,0x3A,0x37,0x9C,0xBA,0xDD,0xEA,0xD6,0xBB,0x99,0x7D,0x9A,0x8C,0xAA,0x0B,0xC7,0xB4,0x71,0x72,0x93,0x56,0xFD,0x62,0x92,0x56,0xCF,0x0F};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_GOOD"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spGOOD[]              PROGMEM ={0xA3,0x8D,0x29,0x58,0x3C,0x33,0xDF,0xEC,0x14,0x59,0x68,0x6B,0x4A,0xF6,0x5B,0xDD,0xEA,0x56,0xA7,0xB2,0xC6,0x2B,0x3D,0x3A,0xEC,0xBA,0xD7,0xAA,0x26,0xBC,0xD2,0x23,0x1D,0x3C,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_GOODBYE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spGOODBYE[]           PROGMEM ={0xA9,0x49,0xE1,0x54,0x91,0x2D,0xAF,0x22,0x07,0x55,0x29,0x69,0x7B,0xF2,0x18,0x38,0x32,0x3C,0xCB,0x4D,0x52,0xC8,0x4A,0x5A,0x65,0x99,0x52,0x21,0x6A,0x61,0x69,0x2E,0x45,0x46,0x2C,0x43,0xA9,0x3C,0x3D,0x1C,0x87,0x2A,0x3A,0xFB,0x50,0x6E,0x73,0xEB,0xDB,0xEC,0x6E,0x77,0xA3,0xF7,0xD1,0x4E,0x35,0xA2,0xCC,0x7E,0x74,0x3E,0xC6,0xA8,0x79,0x85,0xD1,0x86,0x64,0x65,0x16,0x95,0x5B,0x13,0x52,0xB0,0x65,0x94,0x2E,0xB5,0x4D,0x6A,0x55,0x65,0xF8,0x01,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_HASTA_LA_VISTA"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spHASTA_LA_VISTA[]      PROGMEM = {0x0e,0xe0,0x3e,0x62,0x6d,0xc9,0x78,0xa8,0x89,0xed,0xd5,0x27,0xe9,0xae,0x61,0x71,0x03,0x00,0x6a,0x45,0x00,0x40,0x72,0x2F,0x80,0xa9,0x6c,0x0d,0xF0,0x55,0xe2,0x34,0xa9,0x47,0x68,0x65,0xed,0xd3,0xa4,0x9a,0x61,0xe5,0x8b,0x4F,0x93,0x7a,0x98,0x77,0x2c,0x3e,0x4d,0x6e,0x9e,0x52,0xd9,0xF8,0xb4,0x39,0x44,0x9a,0x67,0x95,0x00,0xF0,0x10,0x9e,0x00,0x62,0x3c,0x12,0x00,0x65,0x67,0x02,0xb4,0xec,0x48,0x00,0x94,0x11,0x2b,0xc9,0x22,0xd2,0x82,0x2d,0xad,0x24,0x4b,0x0d,0x0d,0x4d,0xec,0x00,0xec,0x33,0x1d,0x00,0x5c,0xc6,0x0a,0xaa,0x36,0xd7,0x50,0x3b,0xc7,0x8F,0x4a,0x2b,0xc2,0xeb,0x9c,0x2c,0x6b,0x0b,0x77,0x9b,0x73,0xea,0x94,0xcc,0x28,0xb3,0x76,0x02,0x50,0x0F,0x73,0x00,0x68,0xe1,0x0e,0x80,0x35,0x3d,0x00,0xbc,0xb2,0x9d,0x3e,0x56,0x33,0xa9,0xaa,0x73,0xFa,0x54,0xdc,0x29,0xa2,0xF6,0x19,0x62,0x0c,0xa3,0xca,0xc6,0xab,0x08,0xde,0xdd,0x3c,0x66,0x1b,0x00,0xe6,0x74,0x07,0x80,0x92,0x69,0x00,0x90,0x2b,0x57,0x9F,0x2c,0xbb,0x55,0x34,0x39,0x7d,0xd6,0x1c,0x3e,0x11,0xFb,0x74,0x41,0x6a,0xc6,0x78,0xe4,0xd5,0x17,0x45,0xe1,0x13,0xb1,0xcF,0x90,0x94,0x44,0x94,0x27,0x39,0x43,0x91,0x6a,0x5a,0x3e,0x33,0x00,0x40,0x66,0x26,0x40,0x93,0xc8,0x04,0x30,0x5e,0x15,0x00,0xc6,0xb3,0x1c,0x00,0x4c,0x47,0x00,0x40,0xa8,0x70,0x00,0x48,0x15,0x06,0xc0,0x31,0xc3,0x00,0xc0,0x67,0x38,0x00,0x7a,0xF7,0x00,0xe0,0xe6,0x71,0x86,0xe0,0x22,0xad,0xb2,0xd2,0x1a,0x82,0x8b,0x88,0x8a,0x5a,0x6b,0xc9,0xc6,0xc3,0x42,0x1b,0x3b,0x00,0x65,0x77,0x07,0x80,0x10,0x65,0x00,0x92,0x22,0x1c,0x20,0x8d,0xa5,0x03,0x98,0x33,0x33,0x00,0xb4,0xe1,0x06,0x00,0x31,0xd3,0x00,0x20,0x54,0xb5,0x2e,0x33,0x49,0x4b,0x8F,0x33,0x96,0x22,0x34,0x24,0xdc,0x8a,0x01,0x80,0x8F,0x30,0x00,0xF0,0x95,0x0a,0xc0,0xbd,0xca,0x00,0x20,0x67,0xb5,0x26,0x4a,0xc9,0x4c,0x4d,0xd2,0x9a,0xcc,0x35,0xcc,0x3d,0x6e,0x9b,0x32,0xb3,0xF0,0xb0,0x38,0x2d,0xcb,0x42,0xc2,0x52,0x6d,0xb7,0x2c,0x73,0x73,0xcb,0x48,0xda,0xca,0xc2,0x24,0x2c,0xb4,0x6e,0x2b,0x33,0x97,0x8c,0xF4,0x38,0x2d,0x2b,0x4c,0x43,0xc2,0xe3,0x2a,0x00,0xb8,0x2a,0x05,0x80,0x54,0xa1,0x00,0x10,0x32,0x1d,0x80,0x9c,0xd4,0xa9,0x6b,0x66,0x97,0x8c,0xb9,0xa7,0xae,0x99,0x5d,0x2a,0x97,0x9e,0xb6,0x15,0x76,0x8d,0x9c,0x7a,0x86,0x12,0x28,0xa2,0x6b,0x4a,0x01,0xa2,0xa5,0x0a,0x80,0xF4,0x3e,0x01,0x90,0xd6,0x66,0x8d,0x55,0x61,0x46,0x67,0xd4,0x35,0x66,0xc9,0x19,0x13,0x93,0xdb,0x98,0xa5,0xba,0x76,0x26,0x69,0x5b,0xd5,0x6a,0x14,0x11,0x47,0x00,0xc0,0x66,0x29,0x00,0x78,0xeb,0x33,0x55,0xcF,0xaa,0x1d,0xb3,0xd7,0x5c,0x2d,0xb9,0x74,0x57,0x5d,0x53,0x31,0x64,0x3a,0x55,0x65,0x2d,0xcd,0xb1,0x4a,0xe7,0xd4,0xb5,0x14,0x4d,0x11,0x53,0x55,0xd7,0x9a,0x0d,0xb9,0x6F,0x55,0x19,0x5b,0x52,0x12,0xb9,0x59,0xd6,0x01,0xcc,0x7b,0x3b,0x80,0x2b,0x6b,0x03,0x00,0xa9,0x6d,0x00,0xa4,0xbc,0x0c,0xc0,0xb4,0xa7,0x02,0xa0,0xF1,0x54,0x00,0xd0,0x11,0x02,0x80,0xce,0x43,0x01,0xc0,0x66,0x29,0x00,0xb8,0x4c,0x01,0x00,0x9F,0xa5,0x00,0xe0,0x23,0x05,0x00,0x9c,0xa7,0x00,0x80,0x8b,0x12,0x00,0x30,0x9e,0x02,0x00,0x36,0x12,0x08,0xdd,0x65,0x98,0x9b,0xd9,0x7e};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_HELLO"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spHELLO[]             PROGMEM ={0x00,0xC0,0x80,0x60,0x59,0x08,0x10,0x3D,0xB7,0x00,0x62,0x64,0x3D,0x55,0x4A,0x9E,0x66,0xDA,0xF6,0x56,0xB7,0x3A,0x55,0x76,0xDA,0xED,0x92,0x75,0x57,0xA3,0x88,0xA8,0xAB,0x02,0xB2,0xF4,0xAC,0x67,0x23,0x73,0xC6,0x2F,0x0C,0xF3,0xED,0x62,0xD7,0xAD,0x13,0xA5,0x46,0x8C,0x57,0xD7,0x21,0x0C,0x22,0x4F,0x93,0x4B,0x27,0x37,0xF0,0x51,0x69,0x98,0x9D,0xD4,0xC8,0xFB,0xB8,0x98,0xB9,0x56,0x23,0x2F,0x93,0xAA,0xE2,0x46,0x8C,0x52,0x57,0x66,0x2B,0x8C,0x07};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_HELP"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spHELP[]              PROGMEM ={0x08,0xB0,0x4E,0x94,0x00,0x21,0xA8,0x09,0x20,0x66,0xF1,0x96,0xC5,0x66,0xC6,0x54,0x96,0x47,0xEC,0xAA,0x05,0xD9,0x46,0x3B,0x71,0x94,0x51,0xE9,0xD4,0xF9,0xA6,0xB7,0x18,0xB5,0x35,0xB5,0x25,0xA2,0x77,0xB6,0xA9,0x97,0xB1,0xD7,0x85,0xF3,0xA8,0x81,0xA5,0x6D,0x55,0x4E,0x0D,0x00,0xC0,0x00,0x1B,0x3D,0x30,0x00,0x0F};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_HMMM_BEER"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spHMMM_BEER[]           PROGMEM = {0x00,0x50,0x9a,0x42,0xc2,0x5c,0xc3,0xc9,0xe8,0x1a,0x53,0x35,0x73,0x27,0xa5,0x8F,0xcc,0x3c,0x3c,0x12,0xa5,0xde,0x2b,0x0b,0x77,0x73,0xd3,0xFa,0x44,0xcd,0xc3,0xc2,0x71,0xeb,0x32,0x51,0x0F,0x0F,0x27,0xad,0x4b,0x2c,0xcc,0xdc,0x9d,0x94,0xd6,0x2b,0x4b,0x0d,0x77,0xdc,0x9a,0x20,0x3c,0xd4,0x22,0xF6,0x68,0x32,0x93,0x48,0x09,0x27,0xa3,0xc9,0x9c,0xc3,0xdc,0x6d,0xb7,0x26,0x73,0x6a,0x49,0x8d,0x3b,0x9a,0x2a,0xb0,0x3c,0xdc,0xce,0x6a,0x9a,0xc4,0x74,0x77,0x3b,0xab,0x69,0x02,0xd3,0xdd,0xec,0x8c,0xa6,0x08,0x2a,0x8d,0xb0,0x33,0x9a,0x22,0xa8,0x34,0x5c,0xc9,0x6a,0x9a,0x20,0x4b,0x77,0xbb,0xab,0xa9,0x9c,0xd2,0xdd,0x9d,0x8c,0x26,0x71,0x2e,0x4d,0xb7,0xdb,0xea,0xc4,0xb9,0x2d,0xdc,0xc9,0x68,0x32,0xe3,0x4a,0x73,0x27,0xa3,0x49,0x4c,0x32,0x25,0x1c,0xb7,0x26,0x08,0x2d,0x73,0x73,0xdb,0x1a,0x2F,0x2d,0x2d,0xc2,0x49,0x6b,0x02,0x09,0x0F,0x0F,0x3b,0xad,0x09,0x2c,0x3c,0x2c,0x1c,0x97,0xc6,0xc8,0x88,0x74,0x77,0x5d,0x5a,0xa5,0x2d,0x22,0x22,0x49,0x69,0x03,0xF1,0x28,0x8F,0xc4,0xad,0x8b,0xd4,0xc2,0x23,0xe3,0x8c,0xae,0x50,0x53,0xF3,0x70,0x92,0x3a,0x23,0x2d,0xbc,0x3c,0x4e,0xe9,0x23,0x35,0xcb,0x8c,0x38,0xa5,0x2F,0xc4,0x38,0x3d,0x92,0x94,0x21,0x51,0xd3,0xca,0x88,0x5d,0xc6,0x24,0xc4,0xdd,0x3c,0x71,0x19,0x92,0x50,0x09,0x0F,0xd5,0x6d,0xac,0xd4,0x55,0xdc,0x1d,0x97,0xb1,0x10,0xd1,0x34,0x77,0x95,0xc6,0x24,0xc4,0xd5,0x3d,0x4e,0x9a,0x0a,0x13,0x31,0x0d,0x3b,0x65,0xea,0x5c,0x59,0xd4,0x1c,0xa7,0xa9,0x52,0x13,0x35,0xb7,0x9d,0xe6,0x2c,0xd5,0xd4,0x4c,0x71,0x9a,0xab,0x70,0x16,0x31,0xc5,0x65,0xea,0xc2,0xcd,0xdc,0xe5,0x08,0x40,0x49,0x37,0x05,0x04,0x2b,0xd6,0xda,0x24,0xd5,0x62,0x22,0xce,0xea,0x1a,0x67,0xb3,0xae,0x5a,0xa7,0x1b,0x9a,0x8d,0x2b,0x67,0x9F,0xae,0x3b,0x36,0xaa,0xae,0x7d,0xda,0xee,0xc8,0xa9,0xbb,0xF6,0x69,0x47,0x64,0x23,0x9F,0x56,0xa7,0x1d,0x85,0x0d,0xbd,0x5b,0x9F,0x76,0x64,0x36,0xac,0x6e,0x7c,0xda,0x5e,0xd8,0xb0,0x6b,0xF6,0x69,0x47,0x13,0xc3,0xa8,0xd6,0xa7,0x1d,0xc3,0x1c,0x35,0x5b,0x9F,0xb6,0x0F,0x35,0x88,0xec,0x7c,0xda,0x3e,0xc4,0x28,0xb3,0xc9,0x69,0xFb,0x50,0x07,0x8F,0xd6,0xa7,0x1b,0xc3,0x1d,0xc5,0xbb,0x9c,0xae,0x4F,0x73,0xb0,0x68,0x73,0xba,0x3e,0xd8,0x30,0x63,0xce,0xe9,0xFa,0x14,0x25,0x8F,0x25,0xa7,0xeb,0xd3,0x94,0xcd,0xd6,0x9c,0xae,0x4F,0x55,0x72,0x5F,0xbd,0xba,0x36,0xc9,0x38,0xb3,0xd1,0xe9,0xda,0x10,0x51,0xb7,0x39,0xa7,0x6F,0x43,0x44,0xdd,0x5b,0x9F,0xbe,0x75,0x16,0x8d,0xe8,0x3c,0xFa,0x52,0xd0,0x22,0xb3,0x51,0xeb,0x4b,0x42,0xaF,0xc8,0x9a,0xa3,0x2F,0x91,0x24,0x3a,0x52,0x8d,0x3e,0x5b,0xe1,0xec,0x4c,0xdc,0x86,0x64,0x54,0xb3,0xcb,0x76,0x19,0x93,0x23,0xcb,0xF6,0x58,0x65,0x2c,0xc2,0xc9,0xa2,0x12,0xb7,0xa9,0xa9,0x60,0xd6,0x4c,0x5c,0xa6,0x2a,0x4d,0x24,0xc2,0x55,0x99,0xaa,0x57,0x16,0x37,0x25,0x65,0x69,0xca,0x59,0xd4,0x63,0xb7,0xa5,0xab,0x10,0x56,0x77,0x94,0xb6,0x6e,0x43,0x54,0x4d,0x0e,0xa4,0x6d,0xb8,0x08,0xb7,0x70,0x4c,0x80,0x28,0xcc,0x00,0x00,0x1e};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_I"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spI[]                 PROGMEM ={0x23,0x09,0xDE,0x27,0x82,0xBB,0xED,0xEC,0x16,0xB7,0xBE,0xF5,0x6D,0x4E,0x13,0xB2,0x97,0x5B,0xB4,0xDD,0xDD,0xEA,0x42,0xF6,0x70,0x8F,0x39,0xAD,0x8F,0x85,0xDB,0xBC,0xCB,0x94,0x3E,0x64,0xD5,0x1C,0x0B,0x95,0x07,0x37,0x78,0x27,0xB9,0xA9,0x86,0x4D,0x1F,0x3C,0xD3,0xA4,0x1B,0x96,0x35,0xAF,0xE1,0x01,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_IS"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spIS[]                PROGMEM ={0x23,0x6B,0xCE,0x99,0x3B,0x16,0xAF,0xAC,0xDA,0x60,0x9E,0xFC,0xB1,0xF2,0xEC,0x9D,0xB5,0xF2,0xC6,0xC9,0x42,0x50,0x37,0xEF,0x46,0x37,0xBF,0xC5,0xAE,0x56,0xE3,0x7D,0x84,0x84,0xDF,0xEE,0x5D,0xEF,0x6B,0x5F,0xFB,0xD6,0x7F,0xA9,0x6E,0x64,0xEE,0x1C,0xB0,0x00,0xB9,0x03,0xBE,0x60,0x76,0xC0,0xF7,0xAC,0x0E,0xF8,0x9A,0xC4,0x00,0xDF,0xB0,0x21,0x40,0x7A,0x97,0x07,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_LEFT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spLEFT[]              PROGMEM ={0xAD,0x0E,0xB0,0x96,0x2B,0x5A,0x8C,0xC2,0x93,0x49,0xAE,0x5C,0x78,0x72,0x1F,0x23,0xC5,0xBE,0xF6,0xCD,0x6F,0x71,0xEA,0x58,0xA2,0xC4,0x3A,0xF1,0x6D,0x5B,0xE7,0x63,0x04,0x7B,0x4C,0x8A,0x23,0x03,0xA2,0x35,0xD1,0x80,0x02,0x86,0xF7,0x00,0x00,0x70,0x40,0x17,0xE6,0x08,0x60,0x29,0xFD,0x01,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_LIKE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spLIKE[]              PROGMEM ={0xAA,0x96,0xB1,0x5F,0xB1,0xD3,0xC4,0xAA,0x36,0xB3,0xDE,0xD5,0x29,0x5C,0xCD,0xD6,0x68,0x27,0xB7,0x38,0x55,0xAC,0x31,0x6A,0xED,0xE4,0x34,0xB9,0x45,0x19,0xB7,0x9B,0xD6,0xA7,0xA5,0x49,0xB5,0x1A,0xD3,0x58,0xBA,0x18,0xFB,0x46,0x74,0x53,0x69,0xA8,0x16,0x55,0x0A,0x00,0x0C,0x90,0x73,0xA0,0x06,0x24,0xF0};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_LOOK"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spLOOK[]              PROGMEM ={0xA6,0x91,0x3A,0x3B,0x20,0xEF,0xA4,0xC6,0x71,0xAF,0x02,0xED,0xD6,0xEA,0xA8,0x78,0x12,0x34,0x6F,0xCB,0x92,0xA2,0x6E,0xA4,0x7C,0x23,0x0B,0x3C,0x36,0x44,0x9A,0x8E,0xCC,0xB2,0x79,0x96,0x5C,0xD5,0x32,0x2D,0xBF,0x21,0xBB,0xD1,0x28,0xAC,0xD8,0x55,0xD5,0x2D,0xBD,0x2E,0x9D,0x93,0xDD,0xEE,0xB4,0xC7,0x0D,0xDA,0x56,0xA4,0x4A,0x67,0x00,0x50,0x40,0xDE,0xA6,0x0A,0x88,0xD1,0x48,0x00,0xC5,0x17,0x30,0xA0,0xC4,0x20,0x04,0x58,0x2F,0xFC};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ME"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spME[]                PROGMEM ={0xAC,0x53,0x96,0xB2,0x53,0x33,0x9B,0x36,0x0F,0x30,0x35,0xAE,0xDF,0xDB,0x59,0xAF,0xAA,0xF7,0x52,0x60,0x79,0xBB,0xAB,0x59,0xF5,0xAA,0xB7,0xBD,0xAD,0x6D,0x69,0x5B,0x0B,0x06,0xF3,0x27,0xA5,0xAD,0x45,0x48,0xB2,0x26,0x87,0x3E,0x7A,0xF0,0xEC,0x36,0x6C,0xFA,0x60,0xC1,0xB3,0x52,0x32,0xEB,0x53,0x42,0x66,0x6D,0x39,0x0F,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_MORNING"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spMORNING[]   PROGMEM = {0xCE,0x08,0x52,0x2A,0x35,0x5D,0x39,0x53,0x29,0x5B,0xB7,0x0A,0x15,0x0C,0xEE,0x2A,0x42,0x56,0x66,0xD2,0x55,0x2E,0x37,0x2F,0xD9,0x45,0xB3,0xD3,0xC5,0xCA,0x6D,0x27,0xD5,0xEE,0x50,0xF5,0x50,0x94,0x14,0x77,0x2D,0xD8,0x5D,0x49,0x92,0xFD,0xB1,0x64,0x2F,0xA9,0x49,0x0C,0x93,0x4B,0xAD,0x19,0x17,0x3E,0x66,0x1E,0xF1,0xA2,0x5B,0x84,0xE2,0x29,0x8F,0x8B,0x72,0x10,0xB5,0xB1,0x2E,0x4B,0xD4,0x45,0x89,0x4A,0xEC,0x5C,0x95,0x14,0x2B,0x8A,0x9C,0x34,0x52,0x5D,0xBC,0xCC,0xB5,0x3B,0x49,0x69,0x89,0x87,0xC1,0x98,0x56,0x3A,0x21,0x2B,0x82,0x67,0xCC,0x5C,0x85,0xB5,0x4A,0x8A,0xF6,0x64,0xA9,0x96,0xC4,0x69,0x3C,0x52,0x81,0x58,0x1C,0x97,0xF6,0x0E,0x1B,0xCC,0x0D,0x42,0x32,0xAA,0x65,0x12,0x67,0xD4,0x6A,0x61,0x52,0xFC,0xFF};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_MORNING"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spMORNING[]   PROGMEM = {0xCE,0x08,0x52,0x2A,0x35,0x5D,0x39,0x53,0x29,0x5B,0xB7,0x0A,0x15,0x0C,0xEE,0x2A,0x42,0x56,0x66,0xD2,0x55,0x2E,0x37,0x2F,0xD9,0x45,0xB3,0xD3,0xC5,0xCA,0x6D,0x27,0xD5,0xEE,0x50,0xF5,0x50,0x94,0x14,0x77,0x2D,0xD8,0x5D,0x49,0x92,0xFD,0xB1,0x64,0x2F,0xA9,0x49,0x0C,0x93,0x4B,0xAD,0x19,0x17,0x3E,0x66,0x1E,0xF1,0xA2,0x5B,0x84,0xE2,0x29,0x8F,0x8B,0x72,0x10,0xB5,0xB1,0x2E,0x4B,0xD4,0x45,0x89,0x4A,0xEC,0x5C,0x95,0x14,0x2B,0x8A,0x9C,0x34,0x52,0x5D,0xBC,0xCC,0xB5,0x3B,0x49,0x69,0x89,0x87,0xC1,0x98,0x56,0x3A,0x21,0x2B,0x82,0x67,0xCC,0x5C,0x85,0xB5,0x4A,0x8A,0xF6,0x64,0xA9,0x96,0xC4,0x69,0x3C,0x52,0x81,0x58,0x1C,0x97,0xF6,0x0E,0x1B,0xCC,0x0D,0x42,0x32,0xAA,0x65,0x12,0x67,0xD4,0x6A,0x61,0x52,0xFC,0xFF};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_MOTOR"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spMOTOR[]  PROGMEM = {0x66, 0xAA, 0x8C, 0x69, 0x53, 0x92, 0xC4, 0x2D, 0x2F, 0x6B, 0x2A, 0x74, 0xDA, 0x9D, 0xB2, 0xDD, 0xF6, 0x36, 0xAB, 0xCE, 0x78, 0xDA, 0x9D, 0xB2, 0xD5, 0x9A, 0x01, 0xDB, 0x77, 0x45, 0xA0, 0x75, 0xC5, 0xB8, 0x71, 0x59, 0xDA, 0x31, 0xE5, 0x6A, 0x22, 0x63, 0xDE, 0xDA, 0x9A, 0xBB, 0xA3, 0x75, 0x68, 0xAF, 0x7B, 0x3E, 0xC3, 0x9D, 0x97, 0x60, 0x87, 0xE6, 0x8B, 0x4F, 0x78, 0x4B, 0x76, 0xB2, 0x09, 0xAF, 0xFE, 0xFD, 0x7F};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_MOVE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spMOVE[]              PROGMEM ={0xA5,0x4A,0x0E,0x5D,0x13,0xF4,0x96,0x3A,0x7B,0x30,0x1B,0x48,0xD6,0x2A,0xE9,0x37,0x44,0xAB,0xD9,0xCE,0x66,0xDA,0x12,0x11,0xC7,0x55,0xB3,0x76,0x49,0x78,0x6D,0xB6,0xCC,0xCA,0x25,0x13,0xAD,0x84,0xBD,0x5B,0x95,0x4A,0x9A,0x1E,0x74,0xDB,0xD4,0xEA,0xC8,0xF4,0xD9,0xA4,0x7B,0xEB,0x82,0xD4,0xB1,0x84,0xEC,0x75,0xA8,0x43,0x1E,0xC2,0x64,0x55,0xB4,0x3A,0x74,0x75,0xB3,0x31,0xEE,0x61,0x21,0x07,0x01,0x54,0xA4,0x10,0x20,0xD8,0x50,0x01,0x04,0xE7,0x4A,0x00,0x9F,0x43,0xE0,0x01,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_NAME"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spNAME[]              PROGMEM ={0xAE,0x0D,0x9A,0xCC,0x9F,0xE3,0xA4,0x2E,0x58,0xB0,0x68,0x6B,0x52,0xBA,0x14,0x40,0xBC,0xAD,0x5A,0xED,0x6A,0x9B,0xDB,0xD2,0x54,0x9F,0x26,0x66,0x8F,0x66,0xB5,0xAA,0x16,0xCA,0x44,0x6D,0xF1,0x2E,0x76,0x31,0x8A,0x11,0x52,0xD8,0x63,0xF1,0xAC,0x76,0x35,0x9A,0x9D,0xC2,0xC0,0x7C,0xD1,0xEC,0x5A,0x3F,0x73,0x2A,0xB8,0xAF,0x6E,0x43,0x9D,0x4E,0xEC,0x3E,0xCB,0x0D,0xC6,0xC1,0x38,0x77,0x12,0x3B,0x98,0xD1,0x7A,0x1C,0x91,0x4E,0x63,0x46,0x19,0x24,0x4C,0xB2,0xB5,0x1A,0xB9,0x95,0x4E,0x4D,0xD7,0xA6,0x93,0xD6,0x2D,0xC2,0x13,0xA9,0xD6,0x25,0x23,0xD6,0x88,0x26,0xDA,0xB0,0x82,0xD4,0xC2,0x32,0x3C};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_NINE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spNINE[]              PROGMEM ={0x80,0x52,0xAA,0x32,0x2B,0xDA,0xB6,0xA9,0xAC,0x95,0x69,0xCD,0x48,0xAE,0xB1,0x5E,0xC7,0xAD,0x4D,0xAE,0x3A,0xBA,0x0C,0x51,0xAA,0x72,0xAA,0xE0,0x3B,0x25,0xB0,0xCD,0xA9,0x6C,0x9C,0x34,0xCD,0x2A,0x2B,0x77,0x61,0xD2,0x2C,0xEB,0x8C,0xDC,0xFB,0x49,0xD2,0x29,0x32,0x0A,0x17,0xC7,0xCD,0x22,0xEA,0xA9,0x62,0xA8,0x70,0xC9,0x7A,0xA7,0x4D,0x39,0x33,0x58,0x9B,0x8E,0x2E,0x76,0x0D,0xD5,0xA8,0xD3,0xFA,0xD0,0x43,0xB4,0x35,0x76,0x19,0x52,0x96,0xD0,0xCC,0xC8,0x65,0x88,0x43,0x45,0x23,0xAA,0xBA,0x31,0x0C,0x23,0xCD,0x18,0xC3,0x46,0x19,0x25,0x52,0xB3,0xA6,0x1A,0xB4,0xE3,0x48,0xA9,0x88,0x66,0x14,0x56,0x3D,0x22,0x1B,0x86,0xD1,0x29,0x37,0xCA,0x8C,0x0B,0x00,0xF0};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_NO"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spNO[]                PROGMEM ={0xA1,0xF2,0x0E,0x3E,0xD3,0xA9,0x94,0x3A,0x78,0xB8,0xA8,0xA0,0x93,0x6A,0xEF,0xE0,0xA3,0x9C,0xF1,0xAA,0xA2,0xE7,0x32,0xF3,0x24,0xA7,0xB0,0xDE,0xDB,0xDC,0xDB,0xDC,0xFC,0xE6,0x37,0x5F,0x95,0xF2,0xB9,0x61,0xD4,0x65,0x57,0xBB,0x6E,0x2D,0x8F,0xB3,0x6A,0xD4,0xA5,0x76,0xB5,0x0F,0x3D,0xDD,0x1B,0xAA,0x92,0xC8,0xF7,0x0F,0x00,0x00};\n';
        }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ON"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spON[]     PROGMEM = {0x65, 0x4A, 0xEA, 0x3A, 0x5C, 0xB2, 0xCE, 0x6E, 0x57, 0xA7, 0x48, 0xE6, 0xD2, 0x5D, 0xBB, 0xEC, 0x62, 0x17, 0xBB, 0xDE, 0x7D, 0x9F, 0xDA, 0x5C, 0x5C, 0x7A, 0xAA, 0xB5, 0x6E, 0xCB, 0xD0, 0x0E, 0xAD, 0x6E, 0xAF, 0xEE, 0xF9, 0x88, 0x67, 0xBC, 0xDC, 0x3D, 0xAC, 0x60, 0xB8, 0x45, 0xF3, 0xB7, 0xBF, 0xC3, 0xDD, 0xA2, 0xBB, 0xAB, 0xCD, 0x89, 0x8F, 0x7F, 0xFE, 0x1F};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_OFF"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spOFF[]               PROGMEM ={0x2B,0xD5,0xF5,0xC2,0xD4,0xEB,0x9E,0xCA,0x99,0x6B,0x53,0x5D,0x7A,0x2A,0x53,0x66,0x94,0x33,0xCD,0xAD,0x6E,0x75,0xAB,0xDB,0xB4,0x4E,0xFB,0x1C,0x65,0x4B,0x68,0x80,0x6A,0x33,0x3C,0x60,0x01,0x0F,0x38,0x20,0xDB,0x0C,0x03,0xE4,0x98,0xF6};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ON"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spON[]                PROGMEM ={0xA7,0x36,0x7E,0xC6,0xD9,0x97,0x9E,0xC2,0xA4,0x2D,0xA5,0x4E,0x7A,0xAB,0x5B,0xED,0x6A,0x57,0xBB,0x9E,0xCD,0x68,0x75,0x4F,0x37,0x2F,0xBB,0xBD,0x2B,0x9D,0x6E,0x91,0xE6,0xE5,0xD8,0xF4,0xD2,0x49,0xB1,0x8D,0x1B,0xDB,0x99,0x4E,0x3A,0x69,0xB1,0x71,0xAC,0x3A,0x1E,0xB4,0x42,0xC7,0x76,0xE8,0x02,0x77,0x35,0xD7,0xC6,0xAE,0x0B,0x29,0x0C,0x31,0x5D,0x22,0x40,0x57,0xE2,0x07,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ONE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spONE[]               PROGMEM ={0xA6,0xA5,0x36,0xDF,0x89,0xEC,0xA5,0x86,0xDB,0xF9,0x42,0x56,0x9A,0x2A,0xE1,0xFB,0x0B,0x38,0x7D,0x6F,0x46,0x63,0x7C,0x9D,0x62,0x25,0x9E,0xCD,0x28,0x5C,0xAC,0x32,0xEA,0x38,0xBB,0x1A,0x4D,0x88,0x56,0x2A,0x53,0x67,0x76,0x79,0x70,0x83,0xF3,0x94,0x6C,0xE9,0xD6,0x0C,0xCE,0x61,0x8A,0xB4,0x3B,0x36,0xCA,0x20,0x1A,0xDC,0xAD,0xCD,0x28,0x8D,0x78,0x7B,0x5B,0x26,0x93,0x10,0x6A,0x95,0x9E,0xDA,0x4C,0x25,0x85,0x9A,0x5A,0x9A,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_PLAY"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spPLAY[]              PROGMEM ={0x06,0xC8,0x55,0x54,0x01,0x49,0x69,0x94,0xC4,0xA4,0x1C,0xE3,0x8A,0xD3,0x93,0x19,0xAF,0x24,0xE4,0x68,0xE1,0x4D,0xBC,0x92,0x58,0x22,0x95,0x27,0xF1,0x4A,0x53,0xF5,0x10,0x99,0x26,0xB3,0x68,0x75,0x29,0x12,0xE2,0x53,0xBB,0x74,0x31,0x52,0x64,0x4F,0xD8,0xDA,0xA7,0x3E,0x3A,0xF6,0xAC,0x2C,0x13,0xFA,0xA0,0x39,0xBA,0x33,0x88,0xEB,0x8D,0x92,0xB9,0x70,0xA1,0x0F,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_PLEASE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spPLEASE[]            PROGMEM ={0x0E,0xC8,0x81,0xD4,0x01,0x59,0x9B,0x8F,0xB0,0x48,0x69,0x57,0x73,0x3B,0xD2,0x24,0x2D,0x3D,0x24,0xCD,0x4A,0xBD,0x33,0x8F,0xF0,0xC7,0x3B,0x6B,0x79,0x4D,0x86,0x9C,0xFE,0x64,0x56,0xA3,0xAA,0x59,0x89,0x3D,0xBE,0xCC,0xA6,0xB7,0xA5,0xCF,0x9D,0x85,0xA5,0xDE,0xE6,0x3E,0xF5,0x29,0xB1,0x98,0xC5,0xE3,0xD2,0x07,0x13,0x10,0x56,0x1D,0xCB,0xF0,0x35,0x87,0x51,0xAE,0x75,0xC0,0x04,0xAC,0x06,0xF8,0x46,0xCD,0x00,0x3F,0x1A,0x19,0xE0,0x7B,0x0B,0x01,0x7C,0xA7,0xF6};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_READY_TO_START"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spREADY_TO_START[]    PROGMEM ={0xAE,0x91,0x85,0xD3,0x32,0xB8,0xB5,0xC6,0x35,0x4E,0x09,0xCA,0x7E,0x6A,0xDF,0xB9,0xCC,0xB4,0xFB,0xA9,0xE2,0xD4,0x30,0xD5,0xEE,0xB7,0x5A,0x55,0xEA,0x5A,0x10,0x99,0xA5,0x55,0x31,0x1B,0x1B,0x4E,0xA6,0x55,0xE5,0xAE,0xCA,0xD2,0x9D,0x5A,0x55,0xA6,0x08,0x49,0x2D,0x8D,0xB5,0x6C,0x11,0xB0,0x54,0x9A,0x06,0x0C,0xB0,0x8C,0x45,0x29,0xBC,0x4A,0x53,0xCB,0x4E,0xA5,0xA9,0xC2,0x4C,0xD5,0xF2,0x1A,0xA0,0x03,0x35,0x05,0xFC,0xA9,0x6C,0x01,0x05,0xFC,0x1D,0x0C,0x10,0x80,0xA6,0xD2,0x4F,0x1E,0x43,0x44,0x86,0xB4,0xBD,0xC5,0xAD,0x4E,0xE5,0x8B,0x77,0x18,0x37,0x59,0x85,0x9F,0xE6,0xA5,0xBA,0x78,0x67,0x33,0x6D,0x91,0x9F,0x22,0x1D,0xE6,0xD0,0x45,0xDA,0x49,0x46,0xB8,0x2C,0x00,0x03,0x64,0x19,0xCA,0x80,0x26,0x9B,0x11,0xE0,0x12,0x33,0x00,0xC0,0x03,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_RED"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spRED[]               PROGMEM ={0xA6,0xE5,0x4D,0xDD,0x33,0xE4,0x87,0xC6,0x0C,0x0C,0x4B,0xD3,0x3E,0x2A,0x3F,0x39,0xC5,0x2D,0xEF,0xA9,0x52,0x77,0x17,0xED,0x36,0x37,0xBF,0xF9,0x29,0x52,0xF7,0x10,0xA9,0xD6,0xB7,0xDA,0xF5,0x6E,0x67,0xE7,0x06,0xEB,0x55,0xC5,0xBC,0x91,0x1D,0xEC,0x40,0x02,0xA2,0x32,0xD3,0xD2,0x56,0x18,0x4A,0x6C,0x13,0x51,0xC7,0x0F,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_RIGHT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spRIGHT[]             PROGMEM ={0xA2,0x65,0x21,0xDD,0x39,0x1C,0x8B,0x9A,0x8E,0x90,0xB0,0x74,0xAC,0x6A,0x3A,0x5C,0xA2,0x43,0x89,0x69,0xF8,0x52,0x8E,0x31,0x27,0xA9,0xD1,0x07,0xB3,0x54,0xDC,0xAF,0xDA,0xC4,0x1A,0x67,0x9D,0x77,0xEB,0x53,0x85,0x9C,0xE9,0xDC,0x71,0x6E,0x75,0xAA,0x58,0x33,0x4D,0x3A,0xEE,0xA9,0xD3,0xF0,0x64,0xCF,0xBA,0xA7,0xC9,0x45,0xC4,0xA2,0x2A,0xCD,0x2E,0xF5,0x29,0xB3,0x44,0x57,0x61,0x33,0x18,0x69,0x92,0xE9,0x16,0x00,0x40,0x01,0x5D,0x79,0x3C};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_SAY"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spSAY[]               PROGMEM ={0x08,0x78,0xDE,0x5C,0x03,0x16,0xB0,0x80,0x05,0x2C,0x60,0x01,0x0D,0xAC,0x38,0xE5,0x70,0xD1,0x9A,0x7B,0x93,0x9B,0x9C,0x34,0xD5,0x30,0xD1,0x9A,0x7B,0xB3,0x93,0xD7,0x1C,0xA4,0x1A,0x6F,0x6E,0xBD,0xBA,0x52,0x59,0xD5,0xB7,0x76,0x1F,0xEA,0x90,0x07,0x37,0xE4,0x82,0x9A,0xF1,0x51,0xDC,0x98,0xAD,0x62,0x74,0x07,0x7A};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_SEE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spSEE[]               PROGMEM ={0x08,0xD0,0xB4,0x42,0x00,0x8B,0x88,0x3A,0xE0,0x2B,0xD5,0x00,0xFC,0x18,0xE6,0x81,0x08,0x78,0xC0,0x00,0x4F,0xAB,0x1C,0xA7,0xF8,0x60,0x31,0x7D,0x73,0xE2,0x1A,0x93,0xD8,0xED,0xEB,0x8D,0x6F,0x72,0xB3,0x51,0xF4,0x9A,0x02,0x1A,0x6F,0x77,0xB5,0xEB,0xD9,0x94,0xB6,0x34,0x22,0xA9,0xA9,0x93,0xBB,0xD0,0x25,0xC7,0x94,0x97,0xA1,0x4D,0xE7,0x95,0xF0,0x9E,0x18,0x35,0x5D,0xF4,0xA0,0xD3,0x29,0x4C,0x75,0xC1,0x82,0x86,0xB9,0xB3,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_SEVEN"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spSEVEN[]             PROGMEM ={0x0C,0xF8,0xDE,0x4C,0x02,0x1A,0xD0,0x80,0x05,0x2C,0xB0,0x62,0x17,0x2D,0x43,0x2B,0xF1,0x4D,0x6E,0xB2,0xD3,0x92,0x19,0x1F,0x6E,0xEC,0x51,0x5C,0xE5,0xB9,0x5A,0x58,0x3A,0x76,0x95,0xF7,0x9E,0x1E,0x30,0xAF,0x77,0x65,0xB2,0x29,0x42,0x2C,0xA6,0xB8,0xD9,0x64,0xCD,0x90,0x8A,0xE5,0x66,0x13,0x38,0x8C,0xD3,0x9D,0x58,0xB4,0x17,0x1B,0x29,0xF7,0x62,0x31,0x5E,0xC5,0x24,0xD3,0x88,0xCD,0x79,0xD6,0x90,0x71,0xF7};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_SIX"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spSIX[]               PROGMEM ={0x06,0x98,0xB6,0xC4,0x01,0x2F,0x66,0x46,0x20,0x01,0xD3,0x96,0x18,0x40,0x04,0xAF,0x96,0xA4,0x60,0xA1,0x52,0x8B,0x6F,0xB2,0x92,0x58,0xC4,0xC5,0x67,0xC9,0x4E,0x46,0x95,0x9A,0xB8,0x44,0x2D,0x76,0x7D,0x48,0xD8,0x13,0x15,0x03,0x00,0x10,0x60,0xA2,0x8B,0x00,0x8E,0xAD,0x52,0xC0,0xCF,0x9E,0x1A,0x10,0xC0,0x8F,0xE6,0x0F,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_SORRY"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spSORRY[]             PROGMEM ={0x06,0x38,0xD6,0xD4,0x03,0x01,0xF8,0x5E,0x35,0x00,0x3F,0xBA,0x45,0x20,0x03,0xCB,0x77,0xD6,0xDA,0x35,0x6D,0x9F,0xD8,0x27,0xDF,0x10,0x4F,0x7B,0xE3,0x13,0x87,0x6C,0xE7,0xA6,0x69,0x6E,0x7C,0x12,0x57,0xEC,0xCC,0xB5,0xED,0xCA,0x4C,0xB3,0xB3,0x94,0x2C,0xA3,0xB2,0x4D,0xC7,0x06,0xD7,0x8E,0xC6,0x57,0x69,0x19,0x69,0x37,0xFB,0xD1,0xA7,0xCA,0x66,0x31,0x0D,0x7B,0xDF,0xFA,0x32,0xC8,0x35,0x36,0x56,0xE9,0x72,0x03,0xB3,0x38,0x49,0xA5,0xAD,0xD5,0x21,0xB4,0x4B,0x9B,0xC6,0x19,0xE6,0xF7,0x90,0xF2};\n';
            }
            return __p 
        };
        
    this["JST"]["dyor_music_define_variables_word_STOP"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spSTOP[]              PROGMEM ={0x0E,0xD8,0x5A,0x3D,0x02,0x11,0xF0,0x00,0x40,0x00,0xBA,0x0F,0x5F,0x85,0x4F,0xBD,0x2A,0x91,0xE4,0x16,0xB7,0xBA,0xD5,0x6D,0x6E,0x33,0x3A,0xDB,0xA7,0x94,0xC7,0xAE,0xEF,0x01,0x00,0x04,0xA0,0xBD,0x39,0x06,0xE0,0x01,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_TAKE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spTAKE[]              PROGMEM ={0x09,0xE8,0xDA,0x3D,0x00,0xCD,0xB5,0x18,0x20,0x15,0xB5,0x11,0xA7,0xA6,0x2E,0x31,0xAE,0x6F,0x72,0xD2,0xD2,0xD5,0x28,0xAA,0xE9,0xCD,0x76,0x31,0xEA,0xE8,0xC0,0xB6,0xD2,0x74,0xEC,0xCD,0x98,0x64,0x6A,0x98,0x29,0x06,0x08,0x40,0x74,0x4E,0x16,0x10,0x40,0x0A,0x06,0xF0};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_TEN"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spTEN[]               PROGMEM ={0x0A,0xB0,0xDC,0xD4,0x01,0x83,0x86,0x28,0x20,0x85,0x10,0x01,0xB8,0x28,0x72,0xE2,0x34,0xCB,0x55,0xA2,0xEE,0x4D,0x6E,0x7A,0xB3,0x9B,0x9F,0x22,0x2E,0x77,0xF6,0x88,0x73,0xEB,0xDD,0xCE,0x2E,0x74,0xDE,0x42,0x4B,0x7A,0xA3,0xD8,0x85,0xDE,0x5B,0x18,0x89,0x4C,0xE9,0x7A,0x67,0xB0,0xC5,0x2B,0xA5,0xE9,0x95,0xE1,0x96,0xE8,0x84,0xAA,0xE7,0x4E,0xC3,0xEC,0x63,0x3F,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_THREE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spTHREE[]             PROGMEM ={0x0C,0x08,0xCA,0x44,0x02,0x1A,0xB0,0x40,0xC8,0x4D,0x15,0x73,0xCB,0xB4,0x39,0x0F,0xB9,0xE9,0x14,0xE6,0xAD,0xBE,0xE4,0x7E,0x50,0x50,0xA9,0xDF,0x91,0xE5,0x25,0x05,0x21,0x79,0x47,0x5E,0x7A,0x18,0x09,0xBD,0x5F,0x45,0xCB,0xC1,0xA8,0xF6,0x76,0x56,0xAD,0x2D,0x41,0x98,0xB3,0xEF,0xD4,0x2E,0x0C,0x5E,0x89,0xE5,0x66,0x65,0x3F,0xB8,0xC1,0x6B,0xF2,0x9A,0x0E,0x63,0x46,0xAF,0x38,0xAB,0x53,0xCC,0x03};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_TURN"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spTURN[]              PROGMEM ={0x0A,0xE8,0x3A,0x35,0x02,0x02,0xF0,0x39,0x84,0x00,0x22,0xB5,0x9C,0x28,0xEA,0x31,0x5E,0x57,0x77,0xA3,0x1B,0xDF,0xE4,0x66,0xAB,0x88,0x7E,0x05,0x27,0xB8,0xCF,0x6A,0x54,0xB1,0x0C,0x73,0xAB,0xF6,0x59,0xF7,0x3A,0x35,0x29,0x40,0x4B,0x58,0xE2,0xDC,0xD4,0x36,0xB5,0xD1,0x41,0x6B,0x59,0xAC,0xDC,0x3E,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_TWO"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spTWO[]               PROGMEM ={0x02,0xD8,0x51,0x3C,0x00,0xC7,0x7A,0x18,0x20,0x85,0xE2,0xE5,0x16,0x61,0x45,0x65,0xD9,0x6F,0xBC,0xE3,0x99,0xB4,0x34,0x51,0x6B,0x49,0xC9,0xDE,0xAB,0x56,0x3B,0x11,0xA9,0x2E,0xD9,0x73,0xEB,0x7A,0x69,0x2A,0xCD,0xB5,0x9B,0x1A,0x58,0x2A,0x73,0xF3,0xCD,0x6A,0x90,0x62,0x8A,0xD3,0xD3,0xAA,0x41,0xF1,0x4E,0x77,0x75,0xF2};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_WAIT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spWAIT[]              PROGMEM ={0xA6,0x61,0xB6,0x5E,0x14,0xDD,0xB8,0x9A,0xF9,0x7E,0x16,0xF2,0xE3,0x2A,0x56,0x7B,0x45,0x68,0x6B,0x2B,0x94,0x8F,0x0D,0xE3,0x2D,0x27,0x8F,0xD1,0xDC,0x43,0xB6,0x9C,0x22,0x66,0x35,0xF3,0x9C,0x73,0xAA,0x1C,0x94,0xB5,0x72,0xF6,0xAC,0x7B,0xEB,0x7A,0x6B,0x38,0xB2,0x3A,0x8C,0xEE,0x01,0x00,0x1C,0x50,0x99,0x87,0x02,0x9A,0x2A,0x79,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_WAIT"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spWAIT[]              PROGMEM ={0xA6,0x61,0xB6,0x5E,0x14,0xDD,0xB8,0x9A,0xF9,0x7E,0x16,0xF2,0xE3,0x2A,0x56,0x7B,0x45,0x68,0x6B,0x2B,0x94,0x8F,0x0D,0xE3,0x2D,0x27,0x8F,0xD1,0xDC,0x43,0xB6,0x9C,0x22,0x66,0x35,0xF3,0x9C,0x73,0xAA,0x1C,0x94,0xB5,0x72,0xF6,0xAC,0x7B,0xEB,0x7A,0x6B,0x38,0xB2,0x3A,0x8C,0xEE,0x01,0x00,0x1C,0x50,0x99,0x87,0x02,0x9A,0x2A,0x79,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_WE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spWE[]                PROGMEM ={0xAC,0xC5,0x63,0x23,0x90,0x9D,0xC8,0x36,0xB5,0xD2,0x77,0x89,0x50,0x9F,0x55,0xA7,0xC0,0x9C,0x5D,0x33,0x77,0x3D,0xEA,0xE6,0x8D,0x61,0x7A,0xF2,0xAC,0x67,0x35,0xAB,0x59,0x8F,0xA6,0x55,0x63,0xB0,0xBA,0x93,0x1B,0xDD,0xC8,0xC6,0xB4,0xC9,0x81,0x75,0x95,0x99,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_WHITE"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spWHITE[]             PROGMEM ={0x08,0x30,0xD5,0x0D,0x4A,0x2A,0xD2,0xBC,0x12,0xA7,0x1A,0xA9,0xF6,0xF9,0xCE,0xDC,0x66,0xA5,0x36,0xD5,0x0B,0x47,0xDB,0x93,0xBA,0x5A,0x6B,0xE2,0x4D,0x4F,0x1A,0x7A,0xB6,0x4B,0x34,0x39,0x59,0x1A,0x99,0x26,0xDA,0xF4,0x14,0x75,0x84,0xA9,0x79,0xDA,0x5B,0xA7,0x36,0x05,0x96,0x88,0x2A,0x0B,0x00,0x40,0x00,0x56,0x5B,0x1C,0xD0,0x74,0x19,0x03,0xB8,0x4F,0x7B};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_WON"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spWON[]               PROGMEM ={0xA6,0xA5,0x36,0xDF,0x89,0xEC,0xA5,0x86,0xDB,0xF9,0x42,0x56,0x9A,0x2A,0xE1,0xFB,0x0B,0x38,0x7D,0x6F,0x46,0x63,0x7C,0x9D,0x62,0x25,0x9E,0xCD,0x28,0x5C,0xAC,0x32,0xEA,0x38,0xBB,0x1A,0x4D,0x88,0x56,0x2A,0x53,0x67,0x76,0x79,0x70,0x83,0xF3,0x94,0x6C,0xE9,0xD6,0x0C,0xCE,0x61,0x8A,0xB4,0x3B,0x36,0xCA,0x20,0x1A,0xDC,0xAD,0xCD,0x28,0x8D,0x78,0x7B,0x5B,0x26,0x93,0x10,0x6A,0x95,0x9E,0xDA,0x4C,0x25,0x85,0x9A,0x5A,0x9A,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_YELLOW"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spYELLOW[]            PROGMEM ={0xAE,0xDB,0x09,0x44,0xBC,0x2F,0xC5,0x2E,0x75,0xD3,0x83,0x8A,0xCF,0xA5,0xD2,0x0C,0x2D,0x4A,0xBE,0x8F,0x4F,0x55,0xAD,0x2B,0x47,0xAF,0x39,0x45,0xF4,0x16,0x1E,0xB9,0xF8,0x14,0xC1,0x7B,0xBB,0x79,0xEB,0x51,0x78,0xE7,0x93,0x1C,0x4D,0x4A,0x15,0xAC,0x6F,0x09,0xB7,0xEB,0xCD,0x6E,0x5A,0xA7,0x72,0xBE,0xAA,0xB4,0xA9,0x7D,0xE8,0x65,0x9E,0x63,0x93,0x36,0x66,0xE0,0xA3,0x4B,0x8C,0x5B,0xA9,0x81,0x97,0x2D,0x31,0xD5,0xA4,0x06,0x1B,0x24,0xC7,0x9C,0xB6,0xE8,0x7D,0x14,0x76,0xF6,0x34,0x0F,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_YES"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spYES[]               PROGMEM ={0xAA,0x9A,0x0E,0x54,0x6A,0x26,0xC7,0xA6,0xB6,0xAB,0x9D,0xD5,0x0D,0xD8,0xDE,0x9E,0xA6,0x44,0x57,0x8D,0x78,0x73,0xDB,0xD3,0x96,0xEC,0xAE,0xE6,0x4B,0x57,0x1B,0x9B,0x27,0xEB,0xDA,0x9D,0x75,0xAB,0xC2,0x88,0x44,0x6B,0x3B,0xA1,0xB2,0xD1,0x55,0xAC,0x23,0xC4,0xDC,0x00,0xDF,0x88,0x69,0x40,0x03,0x12,0xE0,0x00,0x05,0x28,0x80,0x81,0x07};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_YOU"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spYOU[]               PROGMEM ={0xA5,0xDA,0x0D,0x98,0x23,0x6F,0xF4,0x6A,0x55,0x33,0xA9,0x82,0xC6,0xEB,0x91,0xF5,0x68,0x02,0x11,0x5B,0x67,0x36,0x32,0x2B,0xA2,0x24,0x75,0x75,0xCF,0x7B,0xD5,0x9B,0xD6,0x5A,0x61,0xE5,0x49,0xDD,0x6A,0x97,0xFB,0xD8,0xFB,0x5E,0x77,0xA2,0xB3,0x2C,0x45,0x25,0x8D,0x3C,0x00,0x00};\n';
            }
            return __p 
        };

    this["JST"]["dyor_music_define_variables_word_ZERO"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'const uint8_t spZERO[]              PROGMEM ={0xAD,0x59,0x3A,0xC8,0x18,0xFD,0x9E,0xA2,0x99,0x34,0x23,0xE9,0x77,0xB2,0xE0,0xDD,0xC4,0xAA,0xCD,0x49,0x5C,0x36,0xB3,0xAC,0x36,0x2B,0xB1,0x45,0xD2,0x33,0x72,0xEF,0x6C,0x54,0xA6,0x73,0x79,0x49,0xDE,0xD5,0xD8,0x2A,0xE9,0xA9,0xDE,0x67,0xEF,0x06,0x99,0xBB,0xA4,0x2D,0x75,0x19,0x54,0xB4,0x2F,0xD1,0xB4,0x79,0xF0,0x83,0x1F,0xFC,0xEC,0x17,0xBB,0x3C,0x00,0x00};\n';
            }
            return __p 
        };


    this["JST"]["dyor_music_define_variables_play_voice"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
        __p += '#include "Arduino.h"\n#include <inttypes.h>\n#include <avr/io.h>\n';
        __p += '#define FS 8000 // Speech engine sample rate\n';
        __p += 'uint8_t* ptrAddr;\nuint8_t ptrBit;\n';
        __p += 'uint8_t setup_voice;\n';
        __p += '#define CHIRP_SIZE 41\n';
        __p += 'int8_t chirp[CHIRP_SIZE] = {0x00,0x2a,0xd4,0x32,0xb2,0x12,0x25,0x14,0x02,0xe1,0xc5,0x02,0x5f,0x5a,0x05,0x0f,0x26,0xfc,0xa5,0xa5,0xd6,0xdd,0xdc,0xfc,0x25,0x2b,0x22,0x21,0x0f,0xff,0xf8,0xee,0xed,0xef,0xf7,0xf6,0xfa,0x00,0x03,0x02,0x01};\n';
        __p += '\nuint8_t synthPeriod;\n';
        __p += 'uint16_t synthEnergy;\n';
        __p += 'int16_t synthK1,synthK2;\n';
        __p += 'int8_t synthK3,synthK4,synthK5,synthK6,synthK7,synthK8,synthK9,synthK10;\n';
        __p += 'uint8_t tmsEnergy[0x10] = {0x00,0x02,0x03,0x04,0x05,0x07,0x0a,0x0f,0x14,0x20,0x29,0x39,0x51,0x72,0xa1,0xff};\n';
        __p += 'uint8_t tmsPeriod[0x40] = {0x00,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2D,0x2F,0x31,0x33,0x35,0x36,0x39,0x3B,0x3D,0x3F,0x42,0x45,0x47,0x49,0x4D,0x4F,0x51,0x55,0x57,0x5C,0x5F,0x63,0x66,0x6A,0x6E,0x73,0x77,0x7B,0x80,0x85,0x8A,0x8F,0x95,0x9A,0xA0};\n';
        __p += 'int16_t tmsK1[0x20]     = {0x82C0,0x8380,0x83C0,0x8440,0x84C0,0x8540,0x8600,0x8780,0x8880,0x8980,0x8AC0,0x8C00,0x8D40,0x8F00,0x90C0,0x92C0,0x9900,0xA140,0xAB80,0xB840,0xC740,0xD8C0,0xEBC0,0x0000,0x1440,0x2740,0x38C0,0x47C0,0x5480,0x5EC0,0x6700,0x6D40};\n';
        __p += 'int16_t tmsK2[0x20]     = {0xAE00,0xB480,0xBB80,0xC340,0xCB80,0xD440,0xDDC0,0xE780,0xF180,0xFBC0,0x0600,0x1040,0x1A40,0x2400,0x2D40,0x3600,0x3E40,0x45C0,0x4CC0,0x5300,0x5880,0x5DC0,0x6240,0x6640,0x69C0,0x6CC0,0x6F80,0x71C0,0x73C0,0x7580,0x7700,0x7E80};\n';
        __p += 'int8_t tmsK3[0x10]      = {0x92,0x9F,0xAD,0xBA,0xC8,0xD5,0xE3,0xF0,0xFE,0x0B,0x19,0x26,0x34,0x41,0x4F,0x5C};\n';
        __p += 'int8_t tmsK4[0x10]      = {0xAE,0xBC,0xCA,0xD8,0xE6,0xF4,0x01,0x0F,0x1D,0x2B,0x39,0x47,0x55,0x63,0x71,0x7E};\n';
        __p += 'int8_t tmsK5[0x10]      = {0xAE,0xBA,0xC5,0xD1,0xDD,0xE8,0xF4,0xFF,0x0B,0x17,0x22,0x2E,0x39,0x45,0x51,0x5C};\n';
        __p += 'int8_t tmsK6[0x10]      = {0xC0,0xCB,0xD6,0xE1,0xEC,0xF7,0x03,0x0E,0x19,0x24,0x2F,0x3A,0x45,0x50,0x5B,0x66};\n';
        __p += 'int8_t tmsK7[0x10]      = {0xB3,0xBF,0xCB,0xD7,0xE3,0xEF,0xFB,0x07,0x13,0x1F,0x2B,0x37,0x43,0x4F,0x5A,0x66};\n';
        __p += 'int8_t tmsK8[0x08]      = {0xC0,0xD8,0xF0,0x07,0x1F,0x37,0x4F,0x66};\n';
        __p += 'int8_t tmsK9[0x08]      = {0xC0,0xD4,0xE8,0xFC,0x10,0x25,0x39,0x4D};\n';
        __p += 'int8_t tmsK10[0x08]     = {0xCD,0xDF,0xF1,0x04,0x16,0x20,0x3B,0x4D};\n';
        __p += '\nISR(TIMER1_COMPA_vect) {\n  static uint8_t nextPwm;\n  static uint8_t periodCounter;\n  static int16_t x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;\n  int16_t u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,u10;\n  OCR2B = nextPwm;\n  sei();\n  if (synthPeriod) {\n    // Voiced source\n    if (periodCounter < synthPeriod) {\n      periodCounter++;\n    } else {\n      periodCounter = 0;\n    }\n    if (periodCounter < CHIRP_SIZE) {\n      u10 = ((chirp[periodCounter]) * (uint32_t) synthEnergy) >> 8;\n    } else {\n      u10 = 0;\n    }\n  } else {\n    // Unvoiced source\n    static uint16_t synthRand = 1;\n    synthRand = (synthRand >> 1) ^ ((synthRand & 1) ? 0xB800 : 0);\n    u10 = (synthRand & 1) ? synthEnergy : -synthEnergy;\n  }\n  // Lattice filter forward path\n  u9 = u10 - (((int16_t)synthK10*x9) >> 7);\n  u8 = u9 - (((int16_t)synthK9*x8) >> 7);\n  u7 = u8 - (((int16_t)synthK8*x7) >> 7);\n  u6 = u7 - (((int16_t)synthK7*x6) >> 7);\n  u5 = u6 - (((int16_t)synthK6*x5) >> 7);\n';
        __p += '  u4 = u5 - (((int16_t)synthK5*x4) >> 7);\n  u3 = u4 - (((int16_t)synthK4*x3) >> 7);\n  u2 = u3 - (((int16_t)synthK3*x2) >> 7);\n  u1 = u2 - (((int32_t)synthK2*x1) >> 15);\n  u0 = u1 - (((int32_t)synthK1*x0) >> 15);\n  // Output clamp\n  if (u0 > 511) u0 = 511;\n  if (u0 < -512) u0 = -512;\n  // Lattice filter reverse path\n  x9 = x8 + (((int16_t)synthK9*u8) >> 7);\n  x8 = x7 + (((int16_t)synthK8*u7) >> 7);\n  x7 = x6 + (((int16_t)synthK7*u6) >> 7);\n  x6 = x5 + (((int16_t)synthK6*u5) >> 7);\n  x5 = x4 + (((int16_t)synthK5*u4) >> 7);\n  x4 = x3 + (((int16_t)synthK4*u3) >> 7);\n  x3 = x2 + (((int16_t)synthK3*u2) >> 7);\n  x2 = x1 + (((int32_t)synthK2*u1) >> 15);\n  x1 = x0 + (((int32_t)synthK1*u0) >> 15);\n  x0 = u0;\n  nextPwm = (u0>>2)+0x80;\n}\n';
        
            }
            return __p
        };

    this["JST"]["dyor_music_definitions_play_voice_setPtr"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
        __p += 'void setPtr(const uint8_t* addr) {\n    ptrAddr = (uint8_t*)addr;\n ptrBit = 0;\n}\n';
            }
            return __p
        };

    this["JST"]["dyor_music_definitions_play_voice_rev"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
        __p += 'uint8_t rev(uint8_t a) {\n  // 76543210\n   a = (a>>4) | (a<<4); // Swap in groups of 4\n   // 32107654\n   a = ((a & 0xcc)>>2) | ((a & 0x33)<<2); // Swap in groups of 2\n // 10325476\n   a = ((a & 0xaa)>>1) | ((a & 0x55)<<1); // Swap bit pairs\n  // 01234567\n   return a;\n}\n';
            }
            return __p
        };

    this["JST"]["dyor_music_definitions_play_voice_getBits"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
        __p += 'uint8_t getBits(uint8_t bits) {\n   uint8_t value;\n    uint16_t data;\n    data = rev(pgm_read_byte(ptrAddr))<<8;\n    if (ptrBit+bits > 8) {\n        data |= rev(pgm_read_byte(ptrAddr+1));\n    }\n data <<= ptrBit;\n  value = data >> (16-bits);\n    ptrBit += bits;\n   if (ptrBit >= 8) {\n        ptrBit -= 8;\n      ptrAddr++;\n    }\n return value;\n}\n';
            }
            return __p
        };

    this["JST"]["dyor_music_definitions_play_voice_say"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
        __p += 'void say(const uint8_t* addr) {\n   uint8_t energy;\n\n if (!setup_voice) {\n       // Auto-setup.\n        // \n       // Enable the speech system whenever say() is called.\n\n\n     pinMode(3,OUTPUT);\n        // Timer 2 set up as a 62500Hz PWM.\n       //\n        // The PWM buzz is well above human hearing range and is\n      // very easy to filter out.\n       //\n        TCCR2A = _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);\n       TCCR2B = _BV(CS20);\n       TIMSK2 = 0;\n   \n      // Unfortunately we cant calculate the next sample every PWM cycle\n        // as the routine is too slow. So use Timer 1 to trigger that.\n        // Timer 1 set up as a 8000Hz sample interrupt\n        TCCR1A = 0;\n       TCCR1B = _BV(WGM12) | _BV(CS10);\n      TCNT1 = 0;\n        OCR1A = F_CPU / FS;\n       TIMSK1 = _BV(OCIE1A);\n     setup_voice = 1;\n  }\n setPtr(addr);\n do {\n      uint8_t repeat;\n       // Read speech data, processing the variable size frames.\n     energy = getBits(4);\n      if (energy == 0) {\n            // Energy = 0: rest frame\n         synthEnergy = 0;\n      } else if (energy == 0xf) {\n';
        __p +=  '       // Energy = 15: stop frame. Silence the synthesier.\n           synthEnergy = 0;\n          synthK1 = 0;\n          synthK2 = 0;\n          synthK3 = 0;\n          synthK4 = 0;\n          synthK5 = 0;\n          synthK6 = 0;\n          synthK7 = 0;\n          synthK8 = 0;\n          synthK9 = 0;\n          synthK10 = 0;\n     } else {\n          synthEnergy = tmsEnergy[energy];\n          repeat = getBits(1);\n          synthPeriod = tmsPeriod[getBits(6)];\n          // A repeat frame uses the last coefficients\n          if (!repeat) {\n                // All frames use the first 4 coefficients\n                synthK1 = tmsK1[getBits(5)];\n              synthK2 = tmsK2[getBits(5)];\n              synthK3 = tmsK3[getBits(4)];\n              synthK4 = tmsK4[getBits(4)];\n              if (synthPeriod) {\n                    // Voiced frames use 6 extra coefficients.\n                    synthK5 = tmsK5[getBits(4)];\n                  synthK6 = tmsK6[getBits(4)];\n                  synthK7 = tmsK7[getBits(4)];\n                  synthK8 = tmsK8[getBits(3)];\n                  synthK9 = tmsK9[getBits(3)];\n                  synthK10 = tmsK10[getBits(3)];\n                }\n         }\n     }\n     delay(25);\n    } while (energy != 0xf);\n}\n';
            }
            return __p
        };

    this["JST"]["dyor_music_play_score"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'playScore(' +
                    ((__t = (pin)) == null ? '' : __t) +
                    ',' +
                    'String("'+ ((__t = (melody)) == null ? '' : __t) + '")' +
                    ');\n';

            }
            return __p
        };
	this["JST"]["dyor_music_play_melody"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'playMelody(' +
                    ((__t = (pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (melody)) == null ? '' : __t) + ',sizeof('+((__t = (melody)) == null ? '' : __t)+')/(2*sizeof(uint16_t)));\n';

            }
            return __p
        };
		
	this["JST"]["dyor_music_play_melody1"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'playMelody(' +
                    ((__t = (pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (melody)) == null ? '' : __t) + ','+((__t = (melody)) == null ? '' : __t)+'_length/(2*sizeof(uint16_t)));\n';

            }
            return __p
        };
		
	this["JST"]["dyor_music_prepare_melody"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'prepareMelody(' +
                    ((__t = (pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (melody)) == null ? '' : __t) + ',sizeof('+((__t = (melody)) == null ? '' : __t)+')/(2*sizeof(uint16_t)));\n';

            }
            return __p
        };
		
	this["JST"]["dyor_led_matrix_prepare_stream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'prepareLEDMatrixStream(' +
                    ((__t = (pinCS)) == null ? '' : __t) +
                    ',' +
					((__t = (pinDIN)) == null ? '' : __t) +
                    ',' +
					((__t = (pinCLK)) == null ? '' : __t) +
                    ',' +
                    ((__t = (stream)) == null ? '' : __t) + ',sizeof('+((__t = (stream)) == null ? '' : __t)+')/('+
					((__t = (next)) == null ? '' : __t) +'*sizeof(uint8_t)),'+
					((__t = (next)) == null ? '' : __t) +
					',' +
					((__t = (duration)) == null ? '' : __t) +
					',' +
					((__t = (dir)) == null ? '' : __t) +
					');\n';

            }
            return __p
        };
		
	this["JST"]["dyor_prepare_RGBstream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'prepareRGBStream_'+((__t = (pin)) == null ? '' : __t)+'(' +
					((__t = (stream)) == null ? '' : __t) + ',sizeof('+((__t = (stream)) == null ? '' : __t)+')/(7*sizeof(uint32_t))'+
					',' +
					((__t = (duration)) == null ? '' : __t) +
					');\n';

            }
            return __p
        };
		
	this["JST"]["dyor_led_matrix_play_stream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'playLEDMatrixStream(' +
                    ((__t = (pinCS)) == null ? '' : __t) +
                    ',' +
					((__t = (pinDIN)) == null ? '' : __t) +
                    ',' +
					((__t = (pinCLK)) == null ? '' : __t) +
                    ',' +
                    ((__t = (stream)) == null ? '' : __t) + ',sizeof('+((__t = (stream)) == null ? '' : __t)+')/('+
					((__t = (next)) == null ? '' : __t) +'*sizeof(uint8_t)),'+
					((__t = (next)) == null ? '' : __t) +
					',' +
					((__t = (duration)) == null ? '' : __t) +
					',' +
					((__t = (dir)) == null ? '' : __t) +
					');\n';

            }
            return __p
        };
		
	this["JST"]["dyor_play_RGBstream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'playRGBStream_'+((__t = (pin)) == null ? '' : __t) +'(' +
                    ((__t = (stream)) == null ? '' : __t) + ',sizeof('+((__t = (stream)) == null ? '' : __t)+')/(7*sizeof(uint32_t)),'+
					((__t = (duration)) == null ? '' : __t) +
					');\n';

            }
            return __p
        };

    this["JST"]["dyor_music_definitions_play_score"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'long playScore(int pin, String melody)\n{\nint first=0;\nint second=0;\nint note;\nint duration;\nint go_on=1;\nwhile(go_on)\n{\n  second=melody.indexOf(\',\');\n  note=melody.substring(first,second).toInt();\n  first=second+1;\n  melody=melody.substring(first);\n  first=0;\n  second=melody.indexOf(\',\');\n  if (second==-1)\n    go_on=0;\n  duration=melody.substring(first,second).toInt();\n  first=second+1;\n  melody=melody.substring(first);\n  first=0;\n  tone(pin,note,duration);\n  delay(duration);\n  noTone(pin);\n }\n}\n';
            }
            return __p
        };
	this["JST"]["dyor_music_definitions_play_melody"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void playMelody(int pin,const uint16_t* melody, int length)\n{\n  unsigned int note;\n  unsigned long duration;\n  uint16_t* melody_ptr=(uint16_t*)melody;\n  for (int i=0;i<length;i++)\n  {\n    note=*melody_ptr++;\n    duration=*melody_ptr++;\n    tone(pin,note,duration);\n    delay(duration);\n    noTone(pin);\n  }\n}\n';
            }
            return __p
        };
		
	this["JST"]["dyor_music_definitions_prepare_melody"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void prepareMelody(int pin,const uint16_t* melody, int length)\n{\n  if (_melody_status==1)\n    return;\n  _melody_pin=pin;\n  _current_melody_ptr=(uint16_t*)melody;\n  _melody_length=length;\n  _melody_counter=0;\n  noTone(_melody_pin);\n  _melody_next_time=millis()+2;\n  _melody_status=1;\n}\n';
            }
            return __p
        };
		
	this["JST"]["dyor_led_matrix_definitions_prepare_stream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void prepareLEDMatrixStream(int CS_pin,int DIN_pin, int CLK_pin,const uint8_t stream[][8], int length, int next, int duration, bool forward_dir)\n{\n  if (_led_matrix_stream_status==1)\n    return;\n  int _length=length;\n  if (next==1)\n    _length-=8*sizeof(uint8_t);\n  _led_matrix_stream_CS_pin=CS_pin;\n  _led_matrix_stream_DIN_pin=DIN_pin;\n  _led_matrix_stream_CLK_pin=CLK_pin;\n  for (int i=0;i<8;i++)\n    _current_led_matrix_stream_ptr[i]=(uint8_t*)&stream[0][i];\n  _led_matrix_stream_length=_length;\n  _led_matrix_stream_counter=0;\n  _led_matrix_stream_forward_dir=forward_dir;\n  _led_matrix_stream_status=1;\n  _led_matrix_stream_next=next;\n  _led_matrix_stream_duration=duration;\n  _led_matrix_stream_next_time=millis()+2; \n}\n';
            }
            return __p
        };
		
	this["JST"]["dyor_definitions_prepare_RGBstream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void prepareRGBStream_'+((__t = (pin)) == null ? '' : __t)+'(const uint32_t stream[][7], int length, int duration)\n{\n  if (_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_status==1)\n    return;\n  _current_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_ptr=(uint32_t*)&stream[0][0];\n  _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_length=length;\n  _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_counter=0;\n  _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_status=1;\n  _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_duration=duration;\n  _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_next_time=millis()+2; \n}\n';
				}
            return __p
        };
		
	this["JST"]["dyor_led_matrix_definitions_play_stream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void playLEDMatrixStream(int CS_pin,int DIN_pin, int CLK_pin,const uint8_t stream[][8], int length, int next, int duration, bool forward_dir)\n{\n  int _length=length;\n  if (next==1)\n    _length-=8*sizeof(uint8_t);\n  uint8_t* _current_led_matrix_stream_ptr[8];\n  uint8_t row[8];\n  for (int i=0;i<8;i++)\n    _current_led_matrix_stream_ptr[i]=(uint8_t*)&stream[0][i];\n  for (int j=0;j<_length;j++)\n  {\n    for (int i=0;i<8;i++)\n    {\n      row[i]=*_current_led_matrix_stream_ptr[i];\n      _current_led_matrix_stream_ptr[i]+=next;\n    }\n    if (forward_dir)\n      expression(CS_pin,DIN_pin,CLK_pin,row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7]);\n    else\n      expression(CS_pin,DIN_pin,CLK_pin,row[7],row[6],row[5],row[4],row[3],row[2],row[1],row[0]);\n    delay(duration);\n  }\n}\n';
            }
            return __p
        };
		
	this["JST"]["dyor_definitions_play_RGBstream"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void playRGBStream_'+((__t = (pin)) == null ? '' : __t)+'(const uint32_t stream[][7], int length, int duration)\n{\n  int _length=length;\n  for (int j=0;j<_length;j++)\n  {\n    writepixels_'+((__t = (pin)) == null ? '' : __t)+'(stream[j][0],stream[j][1],stream[j][2],stream[j][3],stream[j][4],stream[j][5],stream[j][6]);\n    delay(duration);\n  }\n}\n';
            }
            return __p
        };
		
	this["JST"]["dyor_music_definitions_play_melody_interrupt"] = function(obj) {
		obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void playMelodyInterrupt()\n{\n  unsigned int _melody_note=0;\n  unsigned long _melody_duration=0;\n  unsigned long currentTime=millis();\n   if (_melody_status==0)\n {\n  noTone(_melody_pin);\n  _melody_status=-1;\n }\n else if (_melody_status==1){\n  if (_melody_counter>_melody_length)\n  {\n    _melody_status=0;\n  }\n  if (currentTime>=_melody_next_time)\n  {\n    _melody_note=*_current_melody_ptr++;\n    _melody_duration=*_current_melody_ptr++;\n    tone(_melody_pin,_melody_note,_melody_duration);\n    _melody_next_time=currentTime+_melody_duration;\n    _melody_counter++;\n  }\n }\n}\n';
            }
            return __p
	}
	
	this["JST"]["dyor_led_matrix_definitions_play_stream_interrupt"] = function(obj) {
		obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void playLEDMatrixStreamInterrupt()\n{\n  uint8_t row[8];\n  unsigned long currentTime=millis();\n if (_led_matrix_stream_status==0)\n {\n  _led_matrix_stream_status=-1;\n }\n else if (_led_matrix_stream_status==1){\n  if (_led_matrix_stream_counter==_led_matrix_stream_length)\n  {\n    _led_matrix_stream_status=0;\n  }\n  if (currentTime>=_led_matrix_stream_next_time)\n  {\n    for (int i=0;i<8;i++)\n    {\n      row[i]=*_current_led_matrix_stream_ptr[i];\n      _current_led_matrix_stream_ptr[i]+=_led_matrix_stream_next;\n    }\n    if (_led_matrix_stream_forward_dir)\n      expression(_led_matrix_stream_CS_pin,_led_matrix_stream_DIN_pin,_led_matrix_stream_CLK_pin,row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7]);\n    else\n      expression(_led_matrix_stream_CS_pin,_led_matrix_stream_DIN_pin,_led_matrix_stream_CLK_pin,row[7],row[6],row[5],row[4],row[3],row[2],row[1],row[0]);\n    _led_matrix_stream_next_time=currentTime+_led_matrix_stream_duration;\n    _led_matrix_stream_counter++;\n  }\n }\n}\n';
            }
            return __p
	}
	
	this["JST"]["dyor_definitions_play_RGBstream_interrupt"] = function(obj) {
		obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'void playRGBStreamInterrupt_'+((__t = (pin)) == null ? '' : __t)+'()\n{\n  unsigned long currentTime=millis();\n  uint32_t _RGBbuffer[7];\n  if (_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_status==0)\n  {\n    _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_status=-1;\n  }\n  else if (_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_status==1){\n  if (_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_counter==_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_length)\n  {\n    _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_status=0;\n  }\n  if (currentTime>=_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_next_time)\n  {\n    uint16_t *ptr=(uint16_t*)_current_RGBstream_2_ptr;\n    uint32_t _high;\n    uint32_t _low;\n    for (uint32_t i=0;i<7;i++)\n  {\n    _low=(uint32_t)pgm_read_word_near(ptr++);\n    _high=(uint32_t)pgm_read_word_near(ptr++);\n    _RGBbuffer[i]=(_high<<16)+_low;\n  }\n    writepixels_'+((__t = (pin)) == null ? '' : __t)+'(_RGBbuffer[0],_RGBbuffer[1],_RGBbuffer[2],_RGBbuffer[3],_RGBbuffer[4],_RGBbuffer[5],_RGBbuffer[6]);\n    _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_next_time=currentTime+_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_duration;\n    _RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_counter++;\n    _current_RGBstream_'+((__t = (pin)) == null ? '' : __t)+'_ptr+=7;\n  }\n }\n}\n';
            }
            return __p
	}

        this["JST"]["dyor_piezo_buzzer"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tone(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (dropdown_freq)) == null ? '' : __t) +
            ',' +
            ((__t = (delay_time)) == null ? '' : __t) +
                    ');\ndelay(' +
                    ((__t = (delay_time)) == null ? '' : __t) +
                    ');\nnoTone(' +
            ((__t = (dropdown_pin)) == null ? '' : __t) +
            ');\n';

            }
            return __p
        };

    this["JST"]["dyor_piezo_buzzer_tie"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tone(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (dropdown_freq)) == null ? '' : __t) +
            ',' +
            ((__t = (delay_time)) == null ? '' : __t) +
                    ');\ndelay(' +
                    ((__t = (delay_time)) == null ? '' : __t) +
                    ');\n';

            }
            return __p
        };

    this["JST"]["dyor_play_melody"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'tone(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (dropdown_freq)) == null ? '' : __t) +
            ',' +
            ((__t = (delay_time)) == null ? '' : __t) +
                    ');\ndelay(' +
                    ((__t = (delay_time)) == null ? '' : __t) +
                    ');\nnoTone(' +
            ((__t = (dropdown_pin)) == null ? '' : __t) +
            ');\n';

            }
            return __p
        };

    this["JST"]["softwareserial_def_definitions"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <SoftwareSerial.h>';

            }
            return __p
        };

        this["JST"]["dyor_bt_softwareserial_def_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                /*__p += 'pinMode(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',INPUT);\n  pinMode(' +
                    ((__t = (NextPIN)) == null ? '' : __t) +
                    ', OUTPUT);\n  _bt_softwareSerial.begin(' +
                    ((__t = (baud_rate)) == null ? '' : __t) +
                    ');\n  _bt_softwareSerial.flush();\n';
				*/
				__p += '  _bt_softwareSerial.begin(' +
                    ((__t = (baud_rate)) == null ? '' : __t) +
                    ');\n  _bt_softwareSerial.flush();\n';
            }
            return __p
        };

        this["JST"]["dyor_bluetooth_name_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                /*__p += 'pinMode(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',INPUT);\n  pinMode(' +
                    ((__t = (NextPIN)) == null ? '' : __t) +
                    ', OUTPUT);\n  _bt_softwareSerial.begin(' +
                    ((__t = (baud_rate)) == null ? '' : __t) +
                    ');\n  _bt_softwareSerial.flush();\n  String name = '+((__t = (name)) == null ? '' : __t)+';\n  String str = "AT+NAME"+name+"\\r\\n";\n  _bt_softwareSerial.write(str.c_str());\n';*/
				__p += '  _bt_softwareSerial.begin(' +
                    ((__t = (baud_rate)) == null ? '' : __t) +
                    ');\n  _bt_softwareSerial.flush();\n  String name = '+((__t = (name)) == null ? '' : __t)+';\n  String str = "AT+NAME"+name+"\\r\\n";\n  _bt_softwareSerial.write(str.c_str());\n';
            }
            return __p
        };
		
		this["JST"]["dyor_bt_command_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _bt_cmd=0;\n';

            }
            return __p
        };
		
		this["JST"]["dyor_bt_telegram_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int _bt_pos=0;\nunsigned char _bt_cmd=0;\nint _bt_length=0;\nunsigned char _bt_data[255];\n';

            }
            return __p
        };

        this["JST"]["dyor_bluetooth_receive"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '_bt_softwareSerial.read()';

            }
            return __p
        };

        this["JST"]["dyor_bluetooth_send"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '_bt_softwareSerial.write( ' +
                    ((__t = (statement_send)) == null ? '' : __t) +
                    ' );\n';

            }
            return __p
        };
		
		this["JST"]["dyor_bluetooth_available"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'if (_bt_softwareSerial.available()>0){\n' +
                    ((__t = (branch)) == null ? '' : __t) +
                    '\n}\n';

            }
            return __p
        };
		
		this["JST"]["communications_wifi_softwareserial_def_setups"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'pinMode(' +
                    ((__t = (dropdown_pin)) == null ? '' : __t) +
                    ',INPUT);\n  pinMode(' +
                    ((__t = (NextPIN)) == null ? '' : __t) +
                    ', OUTPUT);\n  _wifi_softwareSerial.begin(' +
                    ((__t = (baud_rate)) == null ? '' : __t) +
                    ');\n  _wifi_softwareSerial.flush();\n';

            }
            return __p
        };
		
		this["JST"]["communications_wifi_def_definitions"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <ESP8266.h>';

            }
            return __p
        };
		
		this["JST"]["communications_wifi_def_definitions2"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '#include <ESP8266WiFi.h>';

            }
            return __p
        };
		
		this["JST"]["communications_wifi_def_setups2"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'WiFi.begin(' +
                    ((__t = (ssid)) == null ? '' : __t) +
                    ',' +
                    ((__t = (password)) == null ? '' : __t) +
                    ');\n  while (WiFi.status()!=WL_CONNECTED)\n    delay(500);\n';
            }
            return __p
        };
		
		this["JST"]["dyor_definitions_colour_red"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int getRawColourRed(int s2, int s3, int out) {\ndigitalWrite(s2,LOW);\ndigitalWrite(s3,LOW);\nint red = pulseIn(out,LOW);\nreturn red;\n}\n';			
            }
        return __p
		};
		
		this["JST"]["dyor_definitions_colour_green"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int getRawColourGreen(int s2, int s3, int out) {\ndigitalWrite(s2,HIGH);\ndigitalWrite(s3,HIGH);\nint green = pulseIn(out,LOW);\nreturn green;\n}\n';			
            }
        return __p
		};
		
		this["JST"]["dyor_definitions_colour_blue"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int getRawColourBlue(int s2, int s3, int out) {\ndigitalWrite(s2,LOW);\ndigitalWrite(s3,HIGH);\nint blue = pulseIn(out, LOW);\nreturn blue;\n}\n';			
            }
        return __p
		};
		
		this["JST"]["dyor_definitions_colour_white"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int getRawColourWhite(int s2, int s3, int out) {\ndigitalWrite(s2,HIGH);\ndigitalWrite(s3,LOW);\nint white = pulseIn(out, LOW);\nreturn white;\n}\n';			
            }
        return __p
		};
		
		this["JST"]["dyor_definitions_colour_readDetect"] = function(obj) {
        obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += 'int readDetectColor(int s2, int s3, int out)\n{\n    int input[4];\n    input[0]=getRawColourWhite(s2,s3,out);\n    input[1]=getRawColourRed(s2,s3,out);\n    input[2]=getRawColourGreen(s2,s3,out);\n    input[3]=getRawColourBlue(s2,s3,out);\n    int color;\n    float _colors[NUM_FILTERS];\n    float _bw[NUM_FILTERS];\n    float res=0.0;\n    float black_res=0.0;\n    float white_res=0.0;\n    float red_res=0.0;\n    float green_res=0.0;\n    float blue_res=0.0;\n    int i,j;\n    /*First check if it is black or white*/\n    for (i=0;i<NUM_FILTERS;i++)\n      _bw[i]=scale_BW[i]*((float)input[i]+shift_BW[i]);\n    /*Classify as black?*/\n    for (i=0;i<BLACK_SV;i++)\n    {\n      res=0.0;\n      for (j=0;j<NUM_FILTERS;j++)\n        res+=sv_black[i][j]*_bw[j];\n      black_res+=res*alpha_black[i];\n    }\n    black_res+=bias_black;\n    if (black_res<0.0)\n      return (BLACK_COLOR);\n    /*Classify as white?*/\n    for (i=0;i<WHITE_SV;i++)\n    {\n      res=0.0;\n      for (j=0;j<NUM_FILTERS;j++)\n        res+=sv_white[i][j]*_bw[j];\n      white_res+=res*alpha_white[i];\n    }\n    white_res+=bias_white;\n    if (white_res<0.0)\n      return (WHITE_COLOR);\n    /*Now check if it is any color combination*/\n    for (i=0;i<NUM_FILTERS;i++)\n      _colors[i]=scale_RGB[0]*((float)input[i]+shift_RGB[i]);\n    /*Classify as red?*/\n    for (i=0;i<RED_SV;i++)\n    {\n      res=0.0;\n      for (j=0;j<NUM_FILTERS;j++)\n        res+=sv_red[i][j]*_colors[j];\n      red_res+=res*alpha_red[i];\n    }\n    red_res+=bias_red;\n    /*Classify as green?*/\n    for (i=0;i<GREEN_SV;i++)\n    {\n      res=0.0;\n      for (j=0;j<NUM_FILTERS;j++)\n        res+=sv_green[i][j]*_colors[j];\n      green_res+=res*alpha_green[i];\n    }\n    green_res+=bias_green;\n    /*Classify as blue?*/\n    for (i=0;i<BLUE_SV;i++)\n    {\n      res=0.0;\n      for (j=0;j<NUM_FILTERS;j++)\n        res+=sv_blue[i][j]*_colors[j];\n      blue_res+=res*alpha_blue[i];\n    }\n    blue_res+=bias_blue;\n    if ((red_res<0.0)&&(green_res>10.0)&&(blue_res>10.0))\n      return (RED_COLOR);\n    if ((red_res>8.0)&&(green_res>-3.0)&&(blue_res<0.0))\n      return (DARK_BLUE_COLOR);\n    if ((red_res<2.0)&&(green_res>5.0)&&(green_res<10.0)&&(blue_res<0.0))\n      return (MAGENTA_COLOR);\n    if ((red_res>-5.0)&&(red_res<10.0)&&(green_res<0.0)&&(blue_res>0.0)&&(blue_res<5.0))\n      return (DARK_GREEN_COLOR);\n    if ((red_res>5.0)&&(red_res<10.0)&&(green_res<0.0)&&(blue_res>5.0)&&(blue_res<10.0))\n      return (YELLOW_COLOR);\n    if ((red_res>-5.0)&&(red_res<1.0)&&(green_res<0.0)&&(blue_res>10.0))\n      return (ORANGE_COLOR);\n    if ((red_res>5.0)&&(green_res<-3.0)&&(blue_res<0.0))\n      return (LIGHT_BLUE_COLOR);\n    if ((red_res>2.0)&&(red_res<5.0)&&(green_res<0.0)&&(blue_res>5.0)&&(blue_res<10.0))\n      return (LIGHT_GREEN_COLOR);\n    if ((red_res>2.0)&&(red_res<5.0)&&(green_res>0.0)&&(green_res<10.0)&&(blue_res<0.0))\n      return (PURPLE_COLOR);\n    return (NO_COLOR);\n}\n';
            }
        return __p
		};
		
		this["JST"]["dyor_colour_definitions_variables"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
                __p += '\n#define BLACK_COLOR 0\n#define WHITE_COLOR 1\n#define RED_COLOR 2\n#define DARK_GREEN_COLOR 3\n#define DARK_BLUE_COLOR 4\n#define YELLOW_COLOR 5\n#define MAGENTA_COLOR 6\n#define LIGHT_GREEN_COLOR 7\n#define LIGHT_BLUE_COLOR 8\n#define PURPLE_COLOR 9\n#define ORANGE_COLOR 10\n#define NO_COLOR -1\n\n#define NUM_FILTERS 4  //SVM\n\n#define BLACK_SV 2\n#define WHITE_SV 4\n#define RED_SV 2\n#define GREEN_SV 10\n#define BLUE_SV 3\nconst float sv_black[BLACK_SV][NUM_FILTERS] ={{1.688366,1.435531,1.522864,1.593273},{0.048799,-0.632296,0.666073,0.611390}};\nconst float sv_white[WHITE_SV][NUM_FILTERS] ={{-0.425293,-0.302410,-0.701600,-0.326853},{-0.425293,-0.294364,-0.696278,-0.319580},{-0.741354,0.027477,-0.648383,-0.865071},{-0.859877,-1.034597,-0.914467,-0.952349}};\nconst float sv_red[RED_SV][NUM_FILTERS] ={{0.405951,-1.360110,1.365639,1.029594},{-0.121258,-0.015598,-0.769742,-0.000397}};\nconst float sv_green[GREEN_SV][NUM_FILTERS] ={{1.723975,-1.229393,1.540850,1.519262},{1.064963,-1.378784,1.234231,1.080250},{-1.043875,0.077771,-0.780693,-0.017282},{-1.043875,0.077771,-0.791643,-0.034168},{0.010544,0.245835,-0.725939,-0.034168},{-0.253061,0.096445,-0.769742,-0.101708},{-2.493701,0.600636,-0.736890,-1.351206},{-1.175677,0.918091,-0.725939,-1.334321},{-1.439282,0.974112,-0.682137,-1.249895},{-1.307480,0.992786,-0.704038,-1.283665}};\nconst float sv_blue[BLUE_SV][NUM_FILTERS] ={{-0.253061,0.021749,-0.824495,-0.169248},{-1.175677,0.003076,-0.813545,-0.067938},{-0.912072,0.581963,-0.572630,-1.300551}};\n\nconst float alpha_black[BLACK_SV] ={-0.230886,0.230886};\nconst float alpha_white[WHITE_SV] ={0.637815,0.544025,0.637815,-1.819655};\nconst float alpha_red[RED_SV] ={-0.259525,0.259525};\nconst float alpha_green[GREEN_SV] ={0.333093,0.576239,-0.407285,-0.639835,-0.837067,-0.976061,0.142797,0.781250,0.245620,0.781250};\nconst float alpha_blue[BLUE_SV] ={0.480157,0.619824,-1.099980};\n\nconst float bias_black =0.986961;\nconst float bias_white =3.156313;\nconst float bias_red =0.562167;\nconst float bias_green =2.399832;\nconst float bias_blue =1.050532;\n\nconst float scale_BW[NUM_FILTERS] ={0.019754,0.008046,0.005322,0.007273};\nconst float scale_RGB[NUM_FILTERS] ={0.131802,0.018674,0.010951,0.016885};\n\nconst float shift_BW[NUM_FILTERS] ={-58.529644,-177.584980,-224.837945,-167.939394};\nconst float shift_RGB[NUM_FILTERS] ={-39.920000,-148.835294,-170.291765,-129.023529};\n';
            }
            return __p
        };
		
		this["JST"]["dyor_calibrate_red_colour"] = function(obj) {
			obj || (obj = {});
			var __t, __p = '',
			__e = _.escape;
			with(obj) {
				__p += '_red_colour_min=' +
                    ((__t = (min)) == null ? '' : __t) +
                    ';\n';
				__p += '_red_colour_max=' +
                    ((__t = (max)) == null ? '' : __t) +
                    ';\n';
			}
			return __p
		};
		
		this["JST"]["dyor_calibrate_green_colour"] = function(obj) {
			obj || (obj = {});
			var __t, __p = '',
			__e = _.escape;
			with(obj) {
				__p += '_green_colour_min=' +
                    ((__t = (min)) == null ? '' : __t) +
                    ';\n';
				__p += '_green_colour_max=' +
                    ((__t = (max)) == null ? '' : __t) +
                    ';\n';
			}
			return __p
		};
		
		this["JST"]["dyor_calibrate_blue_colour"] = function(obj) {
			obj || (obj = {});
			var __t, __p = '',
			__e = _.escape;
			with(obj) {
				__p += '_blue_colour_min=' +
                    ((__t = (min)) == null ? '' : __t) +
                    ';\n';
				__p += '_blue_colour_max=' +
                    ((__t = (max)) == null ? '' : __t) +
                    ';\n';
			}
			return __p
		};
		
		this["JST"]["dyor_calibrate_white_colour"] = function(obj) {
			obj || (obj = {});
			var __t, __p = '',
			__e = _.escape;
			with(obj) {
				__p += '_white_colour_min=' +
                    ((__t = (min)) == null ? '' : __t) +
                    ';\n';
				__p += '_white_colour_max=' +
                    ((__t = (max)) == null ? '' : __t) +
                    ';\n';
			}
			return __p
		};
		
		this["JST"]["GetDate"] = function (obj) {
			obj || (obj = {});
			var __t, __p = '',
			__e = _.escape;
			with (obj) {
				__p += 'void GetDate(String str, int& Year, int& Month, int& Day, int& Hour, int& Minute, int& Second) {\n  int Temp1, Temp2, Temp3, Temp4;\n  char InString[20];\n  str.toCharArray(InString,20);\n  Temp1 = (int)InString[0] -48;\n  Temp2 = (int)InString[1] -48;\n  Day = Temp1*10 + Temp2;\n  Temp1 = (int)InString[3] -48;\n  Temp2 = (int)InString[4] -48;\n  Month = Temp1*10 + Temp2;\n  Temp1 = (int)InString[6] -48;\n  Temp2 = (int)InString[7] -48;\n  Temp3 = (int)InString[8] -48;\n  Temp4 = (int)InString[9] -48;\n  Year = Temp1*1000 + Temp2*100 + Temp3*10 + Temp4;\n  Temp1 = (int)InString[11] -48;\n  Temp2 = (int)InString[12] -48;\n  Hour = Temp1*10 + Temp2;\n  Temp1 = (int)InString[14] -48;\n  Temp2 = (int)InString[15] -48;\n  Minute = Temp1*10 + Temp2;\n  Temp1 = (int)InString[17] -48;\n  Temp2 = (int)InString[18] -48;\n  Second = Temp1*10 + Temp2;\n}\n';
			}
			return __p;
		};
		
		this["JST"]["resistance_gas_sensor"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float resistance_gas_sensor(int raw_adc)\n{\n  float adc=(float)raw_adc;\n return (1023.0-adc)/adc;\n}';
            }
        return __p
        };
		
		this["JST"]["calibrate_gas_sensor"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float calibrate_gas_sensor(int pin, float rs_r0_clean)\n{\n  int i;\n  float val=0;\n  for (i=0;i<50;i++) {\n    val += resistance_gas_sensor(analogRead(pin));\n    delay(500);\n  }\n  val = val/50;\n  val = val/rs_r0_clean;\n  return val;\n}\n';
            }
        return __p
        };
		
		this["JST"]["calibrated_gas_sensor"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float calibrated_gas_sensor(int pin, float *sensor, float r0)\n{\n  int i;\n  float rs=0;\n   for (i=0;i<5;i++) {\n     rs += resistance_gas_sensor(analogRead(pin));\n    delay(50);\n  }\n  rs = rs/5;\n  return (pow(10,( ((log(rs/r0)-sensor[1])/sensor[2]) + sensor[0])));\n}\n';
            }
			return __p
		};
		
		this["JST"]["compute_pid"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float computePID_'+obj.name+'(float input, float setpoint, float samplingTime, float Kp, float Ki, float Kd)\n{\n  static float _int_error=0.0;\n  static float _prev_error=0.0;\n  static unsigned long _prev_time=millis();\n  static float _prev_output=0.0;\n  unsigned long current_time=millis();\n  unsigned long dT=current_time-_prev_time;\n  if (dT>=samplingTime){\n    _prev_time=current_time;\n    float error=(setpoint-input);\n    _int_error += (error + _prev_error)/2*dT/1000.0;\n    float der_error = (error - _prev_error)/dT/1000.0;\n    _prev_error=error;\n    float output=Kp*error+Ki*_int_error+Kd*der_error;\n    _prev_output=output;\n    return output;\n}\n  else\n    return _prev_output;\n}\n';
            }
			return __p
		};
		
		this["JST"]["compute_lowpass_filter"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float computeLowPassFilter_'+obj.name+'(float input, float samplingTime, float W)\n{\n  static float _prev_output=0.0;\n  static float _prev_input=0.0;\n  static unsigned long _prev_time=millis();\n  unsigned long current_time=millis();\n  unsigned long dT=current_time-_prev_time;\n  if (dT>=samplingTime){\n    W=tan(M_PI*W/200);\n    float alpha=(1-W)/(1+W);\n    float beta=(1-alpha)/2;\n    _prev_time=current_time;\n    float output=beta*(input+_prev_input)+alpha*_prev_output;\n    _prev_output=output;\n  _prev_input=input;\n    return output;\n}\n  else\n    return _prev_output;\n}\n';
            }
			return __p
		};
		
		this["JST"]["compute_highpass_filter"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float computeHighPassFilter_'+obj.name+'(float input, float samplingTime, float W)\n{\n  static float _prev_output=0.0;\n  static float _prev_input=0.0;\n  static unsigned long _prev_time=millis();\n  unsigned long current_time=millis();\n  unsigned long dT=current_time-_prev_time;\n  if (dT>=samplingTime){\n    W=tan(M_PI*(100-W)/200);\n    float alpha=(1-W)/(1+W);\n    float beta=(1-alpha)/2;\n    _prev_time=current_time;\n    float output=beta*(input-_prev_input)-alpha*_prev_output;\n    _prev_output=output;\n    _prev_input=input;\n    return output;\n}\n  else\n    return _prev_output;\n}\n';
            }
			return __p
		};
		
		this["JST"]["compute_bandpass_filter"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float computeBandPassFilter_'+obj.name+'(float input, float samplingTime, float WLOW, float WHIGH)\n{\n  static float _prev_output=0.0;\n  static float _prev_output2=0.0;\n  static float _prev_input=0.0;\n  static float _prev_input2=0.0;\n  static unsigned long _prev_time=millis();\n  unsigned long current_time=millis();\n  unsigned long dT=current_time-_prev_time;\n  if (dT>=samplingTime){\n    WLOW=tan(M_PI*WLOW/200);\n    WHIGH=tan(M_PI*WHIGH/200);\n    float den=(WHIGH-WLOW+WHIGH*WLOW+1);\n    float a1=-((WHIGH-1)*(WLOW+1))/den;\n    float a2=2*sqrt(WHIGH*WLOW)/den;\n    float a4=-((WHIGH+1)*(WLOW-1))/den;\n    float alpha1=-(a1+a4);\n    float alpha2=a1*a4+a2*a2;\n    float beta=(1-alpha2)/2;\n    _prev_time=current_time;\n    float output=beta*(input-_prev_input2)-alpha1*_prev_output-alpha2*_prev_output2;\n    _prev_input2=_prev_input;\n    _prev_input=input;\n    _prev_output2=_prev_output;\n    _prev_output=output;\n    return output;\n}\n  else\n    return _prev_output;\n}\n';
            }
			return __p
		};
		
		this["JST"]["compute_bandstop_filter"] = function(obj) {
            obj || (obj = {});
            var __t, __p = '',
                __e = _.escape;
            with(obj) {
				__p += 'float computeBandStopFilter_'+obj.name+'(float input, float samplingTime, float WLOW, float WHIGH)\n{\n  static float _prev_output=0.0;\n  static float _prev_output2=0.0;\n  static float _prev_input=0.0;\n  static float _prev_input2=0.0;\n  static unsigned long _prev_time=millis();\n  unsigned long current_time=millis();\n  unsigned long dT=current_time-_prev_time;\n  if (dT>=samplingTime){\n    WLOW=tan(M_PI*WLOW/200);\n    WHIGH=tan(M_PI*WHIGH/200);\n    float den=(WHIGH-WLOW+WHIGH*WLOW+1);\n    float a1=-((WHIGH-1)*(WLOW+1))/den;\n    float a2=2*sqrt(WHIGH*WLOW)/den;\n    float a4=-((WHIGH+1)*(WLOW-1))/den;\n    float alpha1=-(a1+a4);\n    float alpha2=a1*a4+a2*a2;\n    float beta=(1+alpha2)/2;\n    _prev_time=current_time;\n    float output=beta*(input+_prev_input2)+alpha1*_prev_input-alpha1*_prev_output-alpha2*_prev_output2;\n    _prev_input2=_prev_input;\n    _prev_input=input;\n    _prev_output2=_prev_output;\n    _prev_output=output;\n    return output;\n}\n  else\n    return _prev_output;\n}\n';
            }
			return __p
		};
		
        var JST = this.JST;

        var indentSentences = function(sentences) {
            var splitted_sentences = sentences.split('\n');
            var final_sentences = '';
            for (var i in splitted_sentences) {
                final_sentences += '  ' + splitted_sentences[i] + '\n';
            }
            return final_sentences;
        };
        //DYOR
        Blockly.Arduino.dyor_task = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var n = 0;
        var argument;
	    var code = '';
        var branch = '';
		Blockly.Arduino.definitions_['define_task'] = 'SIGNAL (TIMER0_COMPA_vect){\n _currentTime=millis(); \n ';
		if (Blockly.Arduino.play_melody!=='')
		  Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_melody;
		if (Blockly.Arduino.play_led_matrix_stream!=='')
		  Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_led_matrix_stream;
		if (Blockly.Arduino.play_RGBstream!=='')
		  Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_RGBstream;
		Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
		Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.statementToCode(this, 'DO');
		
	    if (this.taskCount_>0) {
	      Blockly.Arduino.definitions_['declare_var_lastUpdate']='unsigned long _lastUpdate['+this.taskCount_+'];\n';
          Blockly.Arduino.setups_['setup_int0_'] = '//code for configuring int0\n for (int _myTask=0;_myTask<'+this.taskCount_+';_myTask++)\n  _lastUpdate[_myTask]=millis();\n';	    
          for (n = 0; n < this.taskCount_; n++) {
            //argument = Blockly.Arduino.valueToCode(this, 'TASK' + n, Blockly.Arduino.ORDER_NONE);
            branch = Blockly.Arduino.statementToCode(this, 'DO' + n);
            // branch=branch.replace(/&amp;/g, '');
			Blockly.Arduino.definitions_['define_task'+n] = JST['dyor_definitions_task']({'task_number': n,'branch': branch});
          }
	      for (n = 0; n < this.taskCount_; n++) {
		    argument = Blockly.Arduino.valueToCode(this, 'TASK' + n, Blockly.Arduino.ORDER_NONE);
            Blockly.Arduino.definitions_['define_task']+='if ((_currentTime-_lastUpdate['+n+'])>='+argument+') {\n  task'+n+'();\n  _lastUpdate['+n+']=_currentTime;\n  }\n';
          }
	      
	    }
		Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
		Blockly.Arduino.definitions_['define_task'] += '}\n';
        branch = branch.replace(/&quot;/g, '"');
        code = code.replace(/&quot;/g, '"');
            return code;
        };
		
        Blockly.Blocks.dyor_task = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INTERRUPTS'),
            helpUrl: Facilino.getHelpUrl('dyor_task'),
			examples: ['dyor_task_example.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_INTERRUPTS,
			keys: ['LANG_CONTROLS_TASK_MS','LANG_CONTROLS_ALWAYS_DO','LANG_CONTROLS_TASKS_TOOLTIP','LANG_CONTROLS_TASK','LANG_CONTROLS_DO'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_INTERRUPTS);
		this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_TASK_MS')).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('DO').appendField(Facilino.locales.getKey('LANG_CONTROLS_ALWAYS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                this.setPreviousStatement(false);
                this.setNextStatement(false);
                this.setMutator(new Blockly.Mutator(['dyor_task_item']));
				this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_TASKS_TOOLTIP'));
                this.taskCount_ = 0;
            },
            mutationToDom: function() {
                if (!this.taskCount_) {
                    return null;
                }
				var container = document.createElement('mutation');
				if (this.taskCount_) {
					container.setAttribute('item', this.taskCount_);
				}
                return container;
            },
            domToMutation: function(xmlElement) {
                this.taskCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 0; x < this.taskCount_; x++) {
                    this.appendValueInput('TASK' + x)
                        .setCheck(Number)
                        .appendField(Facilino.locales.getKey('LANG_CONTROLS_TASK'));
                    this.appendStatementInput('DO' + x).appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('dyor_task_task');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 0; x < this.taskCount_; x++) {
                    var taskBlock = workspace.newBlock('dyor_task_item');
                    taskBlock.initSvg();
                    connection.connect(taskBlock.previousConnection);
                    connection = taskBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the task input blocks and remove the inputs.
                for (var x = this.taskCount_-1; x >= 0; x--) {
                    this.removeInput('TASK' + x);
                    this.removeInput('DO' + x);
                }
                this.taskCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_task_item':
                            var taskInput = this.appendValueInput('TASK' + this.taskCount_)
                                .setCheck(Number)
                                .appendField(Facilino.locales.getKey('LANG_CONTROLS_TASK')+this.taskCount_+' (ms)').setAlign(Blockly.ALIGN_RIGHT);
                            var doInput = this.appendStatementInput('DO' + this.taskCount_);
                            doInput.appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
			    this.taskCount_++;
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                taskInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                doInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection &&
                        clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 0;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_task_item':
                            var inputTask = this.getInput('TASK' + x);
                            var inputDo = this.getInput('DO' + x);
                            clauseBlock.valueConnection_ =
                                inputTask && inputTask.connection.targetConnection;
                            clauseBlock.statementConnection_ =
                                inputDo && inputDo.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection &&
                        clauseBlock.nextConnection.targetBlock();
                }
            }
        };

        Blockly.Blocks.dyor_task_task = {
			colour: Facilino.LANG_COLOUR_CONTROL_INTERRUPTS,
			keys: ['LANG_CONTROLS_TASK_PERIODIC','LANG_CONTROLS_TASKS_TOOLTIP'],
            // Task.
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_INTERRUPTS);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_CONTROLS_TASK_PERIODIC'))
                    .setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('task');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_TASKS_TOOLTIP'));
                this.contextMenu = false;
            }
        };

	Blockly.Blocks.dyor_task_item = {
			colour: Facilino.LANG_COLOUR_CONTROL_INTERRUPTS,
            // Task item.
			keys: ['LANG_CONTROLS_TASK','LANG_CONTROLS_TASK_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_INTERRUPTS);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_CONTROLS_TASK'))
                    .setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'task');
                this.setNextStatement(true,'task');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_TASK_TOOLTIP'));
                this.contextMenu = false;
            }
        };
		
		Blockly.Arduino.controls_statemachine = function() {
           if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var x=0;
			if (this.stateCount_>0){
			  var init_states='{';
			  var false_states='{';
			  for (var x=0;x<(this.stateCount_-1);x++)
			  {
				init_states+=this.stateType_[x]+',';
				false_states+='false,';
			  }
			  init_states+=this.stateType_[this.stateCount_-1]+'}';
			  false_states+='false}';
			  Blockly.Arduino.definitions_['declare_var_state'] = 'bool _states['+this.stateCount_+']='+init_states+';\n';
			  Blockly.Arduino.definitions_['declare_var_condA'] = 'bool _condA['+this.stateCount_+']='+false_states+';\n';
			  Blockly.Arduino.definitions_['declare_var_condD'] = 'bool _condD['+this.stateCount_+']='+false_states+';\n';
			  code+='bool _next_states['+this.stateCount_+'];\n';
			  code+='int _stateCounter;\n';
			  code+='for (_stateCounter=0;_stateCounter<'+this.stateCount_+';_stateCounter++)\n';
			  code+='  _next_states[_stateCounter]=_condA[_stateCounter]|(!_condD[_stateCounter])&_states[_stateCounter];\n';
			  code+='for (_stateCounter=0;_stateCounter<'+this.stateCount_+';_stateCounter++){\n';
			  code+='  _states[_stateCounter]=_next_states[_stateCounter];\n';
			  code+='  _condA[_stateCounter]=false;\n';
			  code+='  _condD[_stateCounter]=false;\n';
			  code+='}\n';
			  for (x = 0; x < this.stateCount_; x++) {
					argument = Blockly.Arduino.statementToCode(this, 'DO' + x);
					code+='if (_states['+x+']){\n  '+argument+'\n}\n';
			  }
            }
			return code;
        };
	
	Blockly.Blocks.controls_statemachine = {
            // Setup statements.
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_STATEMACHINE'),
            helpUrl: Facilino.getHelpUrl('controls_statemachine'),
			examples: ['controls_statemachine_example1.bly','controls_statemachine_example2.bly','controls_statemachine_example3.bly','controls_statemachine_example4.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_STATE_MACHINE_TITLE','LANG_CONTROLS_STATE_MACHINE_TOOLTIP','LANG_CONTROLS_STATE_MACHINE_STATE','LANG_CONTROLS_STATE_MACHINE_INITIAL_STATE','LANG_CONTROLS_DO'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
		this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_TITLE')).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setMutator(new Blockly.Mutator(['controls_statemachine_initial_state','controls_statemachine_state']));
		this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_TOOLTIP'));
                this.stateCount_ = 0;
				this.stateType_ = [];
            },
			mutationToDom: function() {
                if (!this.stateCount_) {
                    return null;
                }
                var container = document.createElement('mutation');
				if (this.stateCount_) {
                    container.setAttribute('state', this.stateCount_);
                }
				if (this.stateType_) {
					for (var x = 0; x < +this.stateCount_; x++){
						container.setAttribute('type'+x, this.stateType_[x]);
					}
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.stateCount_ = window.parseInt(xmlElement.getAttribute('state'), 10);
                for (var x = 0; x < +this.stateCount_; x++) {
					this.stateType_.push(xmlElement.getAttribute('type'+x));
					if (this.stateType_[x]=='false')
                      this.appendDummyInput('STATE' + x).appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE')+' '+x).setAlign(Blockly.ALIGN_RIGHT);
				    else
					  this.appendDummyInput('STATE' + x).appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_INITIAL_STATE')+' '+x).setAlign(Blockly.ALIGN_RIGHT);
					this.appendStatementInput('DO' + x).appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                }
				Facilino.NumStates=this.stateCount_;
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('controls_statemachine_ss');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 0; x < this.stateCount_; x++) {
					if (this.stateType_[x]=='false')
                          var stateBlock = workspace.newBlock('controls_statemachine_state');
					  else
						  var stateBlock = workspace.newBlock('controls_statemachine_initial_state');
				      stateBlock.initSvg();
					  connection.connect(stateBlock.previousConnection);
                      connection = stateBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect and remove all the state input blocks.
                for (var x = (this.stateCount_)-1; x >= 0; x--) {
                    this.removeInput('STATE' + x);
					this.removeInput('DO' + x);
					delete this.stateType_[x];
                }
				//this.transitionCount_ = 0;
                this.stateCount_ = 0;
				this.stateType_= [];
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'controls_statemachine_state':
                            var stateInput = this.appendDummyInput('STATE' + this.stateCount_).appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE')+' '+this.stateCount_).setAlign(Blockly.ALIGN_RIGHT);
                            var doInput = this.appendStatementInput('DO' + this.stateCount_);
                            doInput.appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
							this.stateCount_++;
							this.stateType_.push('false');
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                stateInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                doInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
						case 'controls_statemachine_initial_state':
                            var stateInput = this.appendDummyInput('STATE' + this.stateCount_).appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_INITIAL_STATE')+' '+this.stateCount_).setAlign(Blockly.ALIGN_RIGHT);
                            var doInput = this.appendStatementInput('DO' + this.stateCount_);
                            doInput.appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
							this.stateCount_++;
							this.stateType_.push('true');
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                stateInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                doInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection &&
                        clauseBlock.nextConnection.targetBlock();
                }
				Facilino.NumStates= this.stateCount_;
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 0;
				//var y = 0;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'controls_statemachine_state':
                            var inputState = this.getInput('STATE' + x);
                            var inputDo = this.getInput('DO' + x);
                            //clauseBlock.valueConnection_ =
                            //    inputState && inputState.connection.targetConnection;
                            clauseBlock.statementConnection_ =
                                inputDo && inputDo.connection.targetConnection;
                            x++;
                            break;
						case 'controls_statemachine_initial_state':
                            var inputState = this.getInput('STATE' + x);
                            var inputDo = this.getInput('DO' + x);
                            //clauseBlock.valueConnection_ =
                            //    inputState && inputState.connection.targetConnection;
                            clauseBlock.statementConnection_ =
                                inputDo && inputDo.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection &&
                        clauseBlock.nextConnection.targetBlock();
                }
            }
        };
		
		Blockly.Blocks.controls_statemachine_ss = {
            // App
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_STATE_MACHINE_STATEMACHINE','LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATEMACHINE')).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('state');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'));
                this.contextMenu = false;
            }
        };
	
     Blockly.Blocks.controls_statemachine_initial_state = {
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_STATE_MACHINE_INITIAL_STATE','LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_INITIAL_STATE')).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'state');
                this.setNextStatement(true,'state');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'));
        this.contextMenu = false;
            }
        };
		
    Blockly.Blocks.controls_statemachine_state = {
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_STATE_MACHINE_STATE','LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE')).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'state');
                this.setNextStatement(true,'state');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'));
        this.contextMenu = false;
            }
        };
		
		Blockly.Arduino.controls_statemachine_transition_state_end = function () {
		var code= this.getFieldValue('TRANSITION_STATE');
			return [code, Blockly.Arduino.ORDER_NONE];
		};
		
		Blockly.Blocks.controls_statemachine_transition_state_end = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_STATEMACHINE'),
            helpUrl: Facilino.getHelpUrl('controls_statemachine_transition_state_end'),
			examples: ['controls_statemachine_example1.bly','controls_statemachine_example2.bly','controls_statemachine_example3.bly','controls_statemachine_example4.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_TRANSITION_STATE','LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
				this.appendDummyInput('TRANSITION_STATE').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_STATE');
                this.setPreviousStatement(false);
                this.setNextStatement(false);
				this.setInputsInline(true);
				this.setOutput(true,'STATE');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP'));
				this.last_state=-1;
			},
			getStates: function() {
				var states = [['','']];
				for (var x=0;x<Facilino.NumStates;x++)
				{
					var state = [x.toString(),x.toString()];
					states.push(state);
				}
				return states;
			},
			onchange: function() {
				if (!this.workspace) {
                     // Block has been deleted.
                     return;
                 }
				 force_update=0;
				 if (this.last_state!==this.getFieldValue('TRANSITION_STATE'))
					 force_update=1;
                 this.last_state=this.getFieldValue('TRANSITION_STATE');
                 if (!this.last_states){
                     this.last_states=Facilino.getStates();
                 }
				 var states=Facilino.getStates();
                 for (var i in states){
                     if (Facilino.getStates()[i]!==this.last_states[i]||force_update){
                         try{
                             this.removeInput('TRANSITION_STATE');
                         }catch(e){}
                         this.appendDummyInput('TRANSITION_STATE').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_STATE');
                         this.setFieldValue(this.last_state, 'TRANSITION_STATE');
						 this.last_states=Facilino.getStates();
                     }
                 }
			}
        };
		
		Blockly.Arduino.controls_statemachine_transition_state = function () {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code= Blockly.Arduino.valueToCode(this,'TRANSITION_INPUT',Blockly.Arduino.ORDER_NONE)+','+this.getFieldValue('TRANSITION_STATE');//+'}';
			return [code, Blockly.Arduino.ORDER_NONE];
		};
		
		Blockly.Blocks.controls_statemachine_transition_state = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_STATEMACHINE'),
            helpUrl: Facilino.getHelpUrl('controls_statemachine_transition_state'),
			examples: ['controls_statemachine_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_TRANSITION_AND','LANG_CONTROLS_TRANSITION_STATE','LANG_CONTROLS_STATE_MACHINE_STATE_AND_TOOLTIP'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
				this.appendValueInput('TRANSITION_INPUT').setCheck('STATE').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('TRANSITION_STATE').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_AND')+' '+Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_STATE');
                this.setPreviousStatement(false);
                this.setNextStatement(false);
				this.setInputsInline(true);
				this.setOutput(true,'STATE');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_STATE_AND_TOOLTIP'));
				this.last_state=-1;
			},
			getStates: function() {
				var states = [['','']];
				for (var x=0;x<Facilino.NumStates;x++)
				{
					var state = [x.toString(),x.toString()];
					states.push(state);
				}
				return states;
			},
			onchange: function() {
				if (!this.workspace) {
                     // Block has been deleted.
                     return;
                 }
				 force_update=0;
				 if (this.last_state!==this.getFieldValue('TRANSITION_STATE'))
					 force_update=1;
                 this.last_state=this.getFieldValue('TRANSITION_STATE');
                 if (!this.last_states){
                     this.last_states=Facilino.getStates();
                 }
				 var states=Facilino.getStates();
                 for (var i in states){
                     if (Facilino.getStates()[i]!==this.last_states[i]||force_update){
                         try{
                             this.removeInput('TRANSITION_STATE');
                         }catch(e){}
                         this.appendDummyInput('TRANSITION_STATE').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_AND')+' '+Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_STATE');
                         this.setFieldValue(this.last_state, 'TRANSITION_STATE');
						 this.last_states=Facilino.getStates();
                     }
                 }
			}
        };
		
		Blockly.Arduino.controls_statemachine_transition_to = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var cond = Blockly.Arduino.valueToCode(this, 'TRANSITION_COND', Blockly.Arduino.ORDER_ATOMIC);
			var str = Blockly.Arduino.valueToCode(this,'TRANSITION_TO', Blockly.Arduino.ORDER_NONE);
			var states = str.split(",");
			var numStates = states.length;
			var codeD='';
			for (var i = 0; i < numStates; i++) {
				code+='_condA['+states[i]+']|=_states['+this.getFieldValue('TRANSITION_FROM')+']&('+cond+');\n';
				codeD+='|_states['+states[i]+']|_condA['+states[i]+']';
			}
			code+='_condD['+this.getFieldValue('TRANSITION_FROM')+']|='+codeD.substring(1)+';\n';
			return code;
        };
		
		Blockly.Blocks.controls_statemachine_transition_to = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_STATEMACHINE'),
            helpUrl: Facilino.getHelpUrl('controls_statemachine_transition_to'),
			examples: ['controls_statemachine_example1.bly','controls_statemachine_example2.bly','controls_statemachine_example3.bly','controls_statemachine_example4.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_TRANSITION_COND','LANG_CONTROLS_TRANSITION_TO_STATE','LANG_CONTROLS_TRANSITION_FROM_STATE','LANG_CONTROLS_TRANSITION_STATE','LANG_CONTROLS_STATE_MACHINE_TRANSITION_TO_TOOLTIP'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
                this.appendValueInput('TRANSITION_COND').setCheck(Boolean).appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_COND')).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('TRANSITION_TO').setCheck('STATE').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_TO_STATE')).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('TRANSITION_FROM').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_FROM_STATE')+' '+Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_FROM');
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(true);
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_TRANSITION_TO_TOOLTIP'));
				this.last_from_state=-1;
				this.last_to_state=-1;
			},
			getStates: function() {
				var states = [['','']];
				for (var x=0;x<Facilino.NumStates;x++)
				{
					var state = [x.toString(),x.toString()];
					states.push(state);
				}
				return states;
			},
			onchange: function() {
				if (!this.workspace) {
                     // Block has been deleted.
                     return;
                 }
				 force_update=0;
				 if (this.last_from_state!==this.getFieldValue('TRANSITION_FROM'))
					 force_update=1;
				 this.last_from_state=this.getFieldValue('TRANSITION_FROM');
				 if (!this.last_states){
                     this.last_states=Facilino.getStates();
                 }
				 var states=Facilino.getStates();
                 for (var i in states){
                     if (Facilino.getStates()[i]!==this.last_states[i]||force_update){
                         try{
                             this.removeInput('TRANSITION_FROM');
                         }catch(e){}
                         this.appendDummyInput('TRANSITION_FROM').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_FROM_STATE')+' '+Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_FROM');
                         this.setFieldValue(this.last_from_state, 'TRANSITION_FROM');
						 this.last_states=Facilino.getStates();
                     }
                 }
			}
        };
		
		Blockly.Arduino.controls_statemachine_transition_from = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var cond = Blockly.Arduino.valueToCode(this, 'TRANSITION_COND', Blockly.Arduino.ORDER_ATOMIC);
			var str = Blockly.Arduino.valueToCode(this,'TRANSITION_FROM', Blockly.Arduino.ORDER_NONE);
			var states = str.split(",");
			var numStates = states.length;
			var codeA='';
			var codeD='';
			for (var i = 0; i < numStates; i++) {
				codeA+='_states['+states[i]+']&';
				codeD+='_condD['+states[i]+']=_states['+this.getFieldValue('TRANSITION_TO')+'|_condA['+this.getFieldValue('TRANSITION_TO')+'];\n';
			}
			code+='_condA['+this.getFieldValue('TRANSITION_TO')+']|='+codeA+'('+cond+');\n';
			code+=codeD;
			return code;
        };
		
		Blockly.Blocks.controls_statemachine_transition_from = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_STATEMACHINE'),
            helpUrl: Facilino.getHelpUrl('controls_statemachine_transition_from'),
			examples: ['controls_statemachine_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_STATEMACHINE,
			keys: ['LANG_CONTROLS_TRANSITION_COND','LANG_CONTROLS_TRANSITION_FROM_STATE','LANG_CONTROLS_TRANSITION_TO_STATE','LANG_CONTROLS_TRANSITION_STATE','LANG_CONTROLS_STATE_MACHINE_TRANSITION_FROM_TOOLTIP'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_STATEMACHINE);
                this.appendValueInput('TRANSITION_COND').setCheck(Boolean).appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_COND')).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('TRANSITION_FROM').setCheck('STATE').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_FROM_STATE')).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('TRANSITION_TO').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_TO_STATE')+' '+Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_TO');
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(true);
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_STATE_MACHINE_TRANSITION_FROM_TOOLTIP'));
				this.last_from_state=-1;
				this.last_to_state=-1;
			},
			getStates: function() {
				var states = [['','']];
				for (var x=0;x<Facilino.NumStates;x++)
				{
					var state = [x.toString(),x.toString()];
					states.push(state);
				}
				return states;
			},
			onchange: function() {
				if (!this.workspace) {
                     // Block has been deleted.
                     return;
                 }
				 force_update=0;
				 if (this.last_to_state!==this.getFieldValue('TRANSITION_TO'))
					 force_update=1;
                 this.last_to_state=this.getFieldValue('TRANSITION_TO');
                 if (!this.last_states){
                     this.last_states=Facilino.getStates();
                 }
				 var states=Facilino.getStates();
                 for (var i in states){
                     if (Facilino.getStates()[i]!==this.last_states[i]||force_update){
                         try{
							 this.removeInput('TRANSITION_TO');
                         }catch(e){}
						 this.appendDummyInput('TRANSITION_TO').appendField(Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_TO_STATE')+' '+Facilino.locales.getKey('LANG_CONTROLS_TRANSITION_STATE')).appendField(new Blockly.FieldDropdown(this.getStates()), 'TRANSITION_TO');
						 this.setFieldValue(this.last_to_state, 'TRANSITION_TO');
						 this.last_states=Facilino.getStates();
                     }
                 }
			}
        };
		
		Blockly.Arduino.attachInterrupt = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var interrupt = this.getFieldValue('PIN');
			var mode = this.getFieldValue('MODE');
			var branch = Blockly.Arduino.statementToCode(this, 'DO');
			Blockly.Arduino.definitions_['define_isr'+interrupt] = 'void _interruptISR'+interrupt+'(void){\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] += branch;
			Blockly.Arduino.definitions_['define_isr'+interrupt] += '}\n';
			Blockly.Arduino.setups_['setup_isr'+interrupt] = 'pinMode('+interrupt+',INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt('+interrupt+'),_interruptISR'+interrupt+','+mode+');\n';
			branch = branch.replace(/&quot;/g, '"');
			code = code.replace(/&quot;/g, '"');
            return code;
        };
		
		Blockly.Blocks.attachInterrupt = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INTERRUPTS'),
            helpUrl: Facilino.getHelpUrl('attachInterrupt'),
			examples: ['dyor_31_in_1_relay_example.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_INTERRUPTS,
			keys: ['LANG_CONTROLS_INTERRUPT','LANG_CONTROLS_INTERRUPT_PIN','LANG_CONTROLS_INTERRUPT_MODE','LANG_CONTROLS_INTERRUPT_LOW','LANG_CONTROLS_INTERRUPT_CHANGE','LANG_CONTROLS_INTERRUPT_RISING','LANG_CONTROLS_INTERRUPT_FALLING','LANG_CONTROLS_DO','LANG_CONTROLS_ATTACH_INTERRUPT_TOOLTIP'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_INTERRUPTS);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT')).appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_PIN')).appendField(new Blockly.FieldDropdown(profiles.default.interrupt), 'PIN').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_MODE')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_LOW'),'LOW'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_CHANGE'),'CHANGE'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_RISING'),'RISING'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_FALLING'),'FALLING']]), 'MODE').setAlign(Blockly.ALIGN_RIGHT);
				this.appendStatementInput('DO').appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
					//this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_FUNC')).appendField(new Blockly.FieldDropdown([['','']]), 'FUNCTION').setAlign(Blockly.ALIGN_RIGHT);
				//this.setPreviousStatement(true, null);
                //this.setNextStatement(true,null);
				this.setPreviousStatement(false);
				this.setNextStatement(false);
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_ATTACH_INTERRUPT_TOOLTIP'));
			}
        };
		
		Blockly.Arduino.controls_counterInterrupt = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var interrupt = this.getFieldValue('PIN');
			var mode = this.getFieldValue('MODE');
			Blockly.Arduino.definitions_['declare_var_interruptCounter'+interrupt] = 'volatile long _interruptCounter' + interrupt + '=0;\n';
			Blockly.Arduino.definitions_['declare_var_old_interruptCounter'+interrupt] = 'volatile long _old_interruptCounter' + interrupt + '=0;\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] = 'void _interruptISR'+interrupt+'(void){\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] += '_interruptCounter'+interrupt+'++;\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] += '}\n';
			Blockly.Arduino.setups_['setup_isr'+interrupt] = 'pinMode('+interrupt+',INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt('+interrupt+'),_interruptISR'+interrupt+','+mode+');\n';
            code+='if(_interruptCounter'+interrupt+'>_old_interruptCounter'+interrupt+'){\n';
			code+='  _old_interruptCounter'+interrupt+'=_interruptCounter'+interrupt+';\n';
			code+=Blockly.Arduino.statementToCode(this, 'DO');
			code+='}\n';
			return code;
        };
		
		Blockly.Blocks.controls_counterInterrupt = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INTERRUPTS'),
            helpUrl: Facilino.getHelpUrl('controls_counterInterrupt'),
			examples: [''],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_INTERRUPTS,
			keys: ['LANG_CONTROLS_INTERRUPT_COUNTER','LANG_CONTROLS_INTERRUPT_PIN','LANG_CONTROLS_INTERRUPT_MODE','LANG_CONTROLS_INTERRUPT_CHANGE','LANG_CONTROLS_INTERRUPT_RISING','LANG_CONTROLS_INTERRUPT_FALLING','LANG_CONTROLS_DO','LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_TOOLTIP'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_INTERRUPTS);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_COUNTER')).appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_PIN')).appendField(new Blockly.FieldDropdown(profiles.default.interrupt), 'PIN').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_MODE')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_CHANGE'),'CHANGE'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_RISING'),'RISING'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_FALLING'),'FALLING']]), 'MODE').setAlign(Blockly.ALIGN_RIGHT);
				this.appendStatementInput('DO').appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
					//this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_FUNC')).appendField(new Blockly.FieldDropdown([['','']]), 'FUNCTION').setAlign(Blockly.ALIGN_RIGHT);
				//this.setPreviousStatement(true, null);
                //this.setNextStatement(true,null);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_TOOLTIP'));
			}
        };
		
		Blockly.Arduino.controls_numberOfInterrupts = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var interrupt = this.getFieldValue('PIN');
			var mode = this.getFieldValue('MODE');
			Blockly.Arduino.definitions_['declare_var_interruptCounter'+interrupt] = 'volatile long _interruptCounter' + interrupt + '=0;\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] = 'void _interruptISR'+interrupt+'(void){\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] += '_interruptCounter'+interrupt+'++;\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt] += '}\n';
			Blockly.Arduino.setups_['setup_isr'+interrupt] = 'pinMode('+interrupt+',INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt('+interrupt+'),_interruptISR'+interrupt+','+mode+');\n';
			code+='_interruptCounter'+ interrupt;
			return [code,Blockly.Arduino.ORDER_ATOMIC];
        };
		
		Blockly.Blocks.controls_numberOfInterrupts = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INTERRUPTS'),
            helpUrl: Facilino.getHelpUrl('controls_numberOfInterrupts'),
			examples: [''],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL_INTERRUPTS,
			keys: ['LANG_CONTROLS_INTERRUPT_COUNTER','LANG_CONTROLS_INTERRUPT_PIN','LANG_CONTROLS_INTERRUPT_MODE','LANG_CONTROLS_INTERRUPT_CHANGE','LANG_CONTROLS_INTERRUPT_RISING','LANG_CONTROLS_INTERRUPT_FALLING','LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_TOOLTIP2'],
			init:  function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL_INTERRUPTS);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_COUNTER')).appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_PIN')).appendField(new Blockly.FieldDropdown(profiles.default.interrupt), 'PIN').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_MODE')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_CHANGE'),'CHANGE'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_RISING'),'RISING'],[Facilino.locales.getKey('LANG_CONTROLS_INTERRUPT_FALLING'),'FALLING']]), 'MODE').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(false);
                this.setNextStatement(false);
				this.setOutput(true,Number);
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_TOOLTIP2'));
			}
        };
		
	Blockly.Arduino.dyor_bluetooth_def = function() {
            var dropdown_pin, NextPIN;
            
            dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            NextPIN = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC);
            var a = Facilino.findPinMode(dropdown_pin);
            Blockly.Arduino.setups_['setup_softwareserial_pinmode'] = a['code'];
            dropdown_pin = a['pin'];
            a = Facilino.findPinMode(NextPIN);
            Blockly.Arduino.setups_['setup_softwareserial_pinmode2'] = a['code'];
            NextPIN = a['pin'];
            
			
            var baud_rate = Blockly.Arduino.valueToCode(this, 'BAUD_RATE', Blockly.Arduino.ORDER_ATOMIC);
            var b = Facilino.findPinMode(baud_rate);
            Blockly.Arduino.setups_['setup_softwareserial_pinmode3'] = b['code'];
            baud_rate = b['pin'];

			Blockly.Arduino.definitions_['declare_var_SoftwareSerial' + dropdown_pin] = 'SoftwareSerial _bt_softwareSerial(' + dropdown_pin + ',' + NextPIN + ');\n';
            Blockly.Arduino.definitions_['define_softwareserial'] = JST['softwareserial_def_definitions']({});
			
            //Blockly.Arduino.setups_['setup_softwareserial_'] = JST['dyor_bt_softwareserial_def_setups']({'baud_rate': baud_rate,'dropdown_pin': dropdown_pin,'NextPIN': NextPIN});
			Blockly.Arduino.setups_['setup_softwareserial_'] = JST['dyor_bt_softwareserial_def_setups']({'baud_rate': baud_rate});
            return '';
        };
		
        Blockly.Blocks.dyor_bluetooth_def = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_def'),
			examples: ['controls_switch_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_DEF','LANG_BLUETOOTH_DEF_BAUD_RATE','LANG_BLUETOOTH_DEF_PIN1','LANG_BLUETOOTH_DEF_PIN2','LANG_BLUETOOTH_DEF_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));
                this.appendValueInput('BAUD_RATE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_BAUD_RATE')).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('PIN2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_bluetooth_name = function() {
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var dropdown_pin, NextPIN;
			dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            NextPIN = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC);
            var a = Facilino.findPinMode(dropdown_pin);
            Blockly.Arduino.setups_['setup_softwareserial_pinmode'] = a['code'];
            dropdown_pin = a['pin'];
            a = Facilino.findPinMode(NextPIN);
            Blockly.Arduino.setups_['setup_softwareserial_pinmode2'] = a['code'];
            NextPIN = a['pin'];
			
            var name = Blockly.Arduino.valueToCode(this, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
            var baud_rate = Blockly.Arduino.valueToCode(this, 'BAUD_RATE', Blockly.Arduino.ORDER_ATOMIC);
            var b = Facilino.findPinMode(baud_rate);
            Blockly.Arduino.setups_['setup_softwareserial_pinmode3'] = b['code'];
            baud_rate = b['pin'];
			
			Blockly.Arduino.definitions_['declare_var_SoftwareSerial' + dropdown_pin] = 'SoftwareSerial _bt_softwareSerial(' + dropdown_pin + ',' + NextPIN + ');\n';
            Blockly.Arduino.definitions_['define_softwareserial'] = JST['softwareserial_def_definitions']({});
			
            //Blockly.Arduino.setups_['setup_softwareserial_'] = JST['dyor_bluetooth_name_setups']({'baud_rate': baud_rate,'dropdown_pin': dropdown_pin,'NextPIN': NextPIN,'name': name});
			Blockly.Arduino.setups_['setup_softwareserial_'] = JST['dyor_bluetooth_name_setups']({'baud_rate': baud_rate,'name': name});
            return '';
        };

        Blockly.Blocks.dyor_bluetooth_name = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_name'),
			examples: ['dyor_bluetooth_name_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_DEF_CONF_NAME','LANG_BLUETOOTH_DEF_BAUD_RATE','LANG_BLUETOOTH_DEF_PIN1','LANG_BLUETOOTH_DEF_PIN2','LANG_BLUETOOTH_DEF_NAME','LANG_BLUETOOTH_NAME_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_CONF_NAME')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));
                this.appendValueInput('BAUD_RATE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_BAUD_RATE')).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('PIN2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('NAME').setCheck(String).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_NAME')).setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_NAME_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_bluetooth_app = function() {
            // Bluetooth if's conditions.
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var n = 1;
            var argument, branch, loop, loop_code,case2_argument,case2_code;
			Blockly.Arduino.definitions_['declare_var_define_bt_pos'] = JST['dyor_bt_command_definitions_variables']({});
            var code = 'if (_bt_softwareSerial.available()>0  || _bt_cmd>0)\n{\n';
        code += '  int cmd=_bt_softwareSerial.read();\n';
        //code += '  if (cmd==0)\n    _bt_cmd=0;\n';
        for (n = 1; n <= this.itemCount_; n++) {
            argument = Blockly.Arduino.valueToCode(this, 'DATA' + n, Blockly.Arduino.ORDER_NONE);
            loop = this.getFieldValue('LOOP'+n);
            branch = Blockly.Arduino.statementToCode(this, 'ITEM' + n);
            branch = indentSentences(branch);
            branch = branch.substring(0, branch.length - 1);
            if (loop=='TRUE')
               loop_code='    _bt_cmd='+argument+';\n';
            else
               loop_code='';
            if (argument=='0')
                code += '     \n  if (cmd=='+argument+'){\n    _bt_cmd=0;\n'+branch+'  }';
            else
                code += '     \n  if ((cmd=='+argument+')||(_bt_cmd=='+argument+')){\n    '+loop_code+branch+'  }';
        }
        return code+'}\n';
        };

        Blockly.Blocks.dyor_bluetooth_app = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_app'),
			examples: ['dyor_bluetooth_app_example.bly','dyor_bluetooth_app_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_APP','LANG_BLUETOOTH_APP_TOOLTIP','LANG_BLUETOOTH_APP_DATA','LANG_BLUETOOTH_APP_ITEM_LOOP','LANG_BLUETOOTH_APP_ITEM','LANG_BLUETOOTH_DO'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));
                //this.appendValueInput('BAUD_RATE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_BAUD_RATE')).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.setMutator(new Blockly.Mutator(['dyor_bluetooth_app_item']));
        this.itemCount_ = 0;
        this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_APP_TOOLTIP'));
            },
        mutationToDom: function() {
                if (!this.itemCount_ ) {
                    return null;
                }
                var container = document.createElement('mutation');
                if (this.itemCount_) {
                    container.setAttribute('item', this.itemCount_);
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.itemCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 1; x <= this.itemCount_; x++) {
            this.appendValueInput('DATA' + x).setCheck('DATA').appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_DATA')).setAlign(Blockly.ALIGN_RIGHT);
            this.appendDummyInput('LOOP' + x).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_ITEM_LOOP')).appendField(new Blockly.FieldCheckbox('FALSE'), 'LOOP'+x).setAlign(Blockly.ALIGN_RIGHT);
                    this.setInputsInline(false);
            this.appendStatementInput('ITEM' + x).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('dyor_bluetooth_app_app');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 1; x <= this.itemCount_; x++) {
                    var itemBlock = workspace.newBlock('dyor_bluetooth_app_item');
                    itemBlock.initSvg();
                    connection.connect(itemBlock.previousConnection);
                    connection = itemBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the items input blocks and remove the inputs.
                for (var x = this.itemCount_; x > 0; x--) {
                    this.removeInput('DATA' + x);
					this.removeInput('LOOP' + x);
                    this.removeInput('ITEM' + x);
                }
                this.itemCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_bluetooth_app_item':
                            this.itemCount_++;
							this.setInputsInline(false);
                            var dataInput = this.appendValueInput('DATA' + this.itemCount_).setCheck('DATA').appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_ITEM')).appendField(new Blockly.FieldImage("img/blocks/smartphoneC.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
							var loopInput = this.appendDummyInput('LOOP' + this.itemCount_).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_ITEM_LOOP')).appendField(new Blockly.FieldCheckbox('FALSE'), 'LOOP'+this.itemCount_).setAlign(Blockly.ALIGN_RIGHT);
							var itemInput = this.appendStatementInput('ITEM' + this.itemCount_).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                dataInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                itemInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 1;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_bluetooth_app_item':
                            var inputData = this.getInput('DATA' + x);
                //var loop = this.getFieldValue('LOOP' + x);
                            var inputItem = this.getInput('ITEM' + x);
                            clauseBlock.valueConnection_ =
                                inputData && inputData.connection.targetConnection;
                            clauseBlock.statementConnection_ =
                                inputItem && inputItem.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            }
        };

    Blockly.Arduino.dyor_bluetooth_command = function() {
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = this.getFieldValue('DATA');
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    }
	
	

    Blockly.Blocks.dyor_bluetooth_command = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_command'),
			examples: ['dyor_bluetooth_app_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_BREAKLOOP','LANG_LED_MATRIX_ANGRY','LANG_LED_MATRIX_HAPPY','LANG_LED_MATRIX_SAD','LANG_LED_MATRIX_HEART','LANG_LED_MATRIX_STUNNED','LANG_PIEZO_BUZZER_DO','LANG_PIEZO_BUZZER_RE','LANG_PIEZO_BUZZER_MI','LANG_PIEZO_BUZZER_FA','LANG_PIEZO_BUZZER_SOL','LANG_PIEZO_BUZZER_LA','LANG_PIEZO_BUZZER_SI','LANG_MOVE_FORWARD','LANG_MOVE_BACKWARD','LANG_MOVE_RIGHT','LANG_MOVE_LEFT','LANG_MOVE_STOP','LANG_MOVE_LEFT_ARM_GRIP','LANG_MOVE_LEFT_ARM_RELEASE','LANG_MOVE_RIGHT_ARM_GRIP','LANG_MOVE_RIGHT_ARM_RELEASE','LANG_MOVE_GRIP','LANG_MOVE_RELEASE','LANG_OBSTACLE','LANG_LINE_FOLLOWING','LANG_BLACK','LANG_WHITE','LANG_MOVE_LEFT_ARM_UP','LANG_MOVE_LEFT_ARM_DOWN','LANG_MOVE_ARMS_UP','LANG_MOVE_ARMS_DOWN','LANG_BLUETOOTH_COMMAND_PREDEF_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/smartphoneC.svg", 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_DATA')).appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_BLUETOOTH_BREAKLOOP')||'BREAK LOOP','0'],
        [Facilino.locales.getKey('LANG_LED_MATRIX_ANGRY')||'ANGRY','1'],
        [Facilino.locales.getKey('LANG_LED_MATRIX_HAPPY')||'HAPPY','2'],
        [Facilino.locales.getKey('LANG_LED_MATRIX_SAD')||'SAD','3'],
        [Facilino.locales.getKey('LANG_LED_MATRIX_HEART')||'LOVE','4'],
        [Facilino.locales.getKey('LANG_LED_MATRIX_STUNNED')||'STUNNED','5'],
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_DO') ||'C4','11'], 
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_RE') ||'D4','12'],
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_MI') ||'E4','13'],
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_FA') ||'F4','14'],
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SOL')||'G4','15'],
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_LA') || 'A4','16'],
        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SI') || 'B4','17'],
        [Facilino.locales.getKey('LANG_MOVE_FORWARD') || 'FORWARD','21'],
        [Facilino.locales.getKey('LANG_MOVE_BACKWARD') ||'BACKWARD','22'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT') || 'RIGHT','23'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT') || 'LEFT','24'],
        [Facilino.locales.getKey('LANG_MOVE_STOP') || 'STOP','25'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_GRIP') || 'LEFT GRIP','31'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_RELEASE') || 'LEFT RELEASE','32'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_GRIP') || 'RIGHT GRIP','33'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_RELEASE') || 'RIGHT RELEASE','34'],
        [Facilino.locales.getKey('LANG_MOVE_GRIP') || 'GRIP','35'],
        [Facilino.locales.getKey('LANG_MOVE_RELEASE') || 'RELEASE','36'],
        [Facilino.locales.getKey('LANG_OBSTACLE') || 'OBSTACLE','41'],
        [Facilino.locales.getKey('LANG_LINE_FOLLOWING') || 'LINE FOLLOWING','42'],
        [Facilino.locales.getKey('LANG_BLACK') || 'BLACK','43'],
        [Facilino.locales.getKey('LANG_WHITE') || 'WHITE','44'],
		[Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_UP') || 'LEFT HAND UP','51'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_DOWN') || 'LEFT HAND DOWN','52'],
		[Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_UP') || 'RIGHT HAND UP','53'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_DOWN') || 'RIGHT HAND DOWN','54'],
		[Facilino.locales.getKey('LANG_MOVE_ARMS_UP') || 'HANDS UP','55'],
        [Facilino.locales.getKey('LANG_MOVE_ARMS_DOWN') || 'HANDS DOWN','56'],
        ]),'DATA').setAlign(Blockly.ALIGN_RIGHT);
        this.setOutput(true,'DATA');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_COMMAND_PREDEF_TOOLTIP'));
            }
    };

    Blockly.Arduino.dyor_bluetooth_command_num = function() {
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = Blockly.Arduino.valueToCode(this, 'DATA', Blockly.Arduino.ORDER_ATOMIC);
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    }

    Blockly.Blocks.dyor_bluetooth_command_num = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_command_num'),
			examples: ['dyor_bluetooth_app_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_APP_DATA','LANG_BLUETOOTH_COMMAND_NUM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendValueInput('DATA').appendField(new Blockly.FieldImage("img/blocks/smartphoneC.svg", 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_DATA')).setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
        this.setOutput(true,'DATA');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_COMMAND_NUM_TOOLTIP'));
            }
    };

    Blockly.Blocks.dyor_bluetooth_app_app = {
            // App
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_RECV','LANG_BLUETOOTH_APP_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_RECV')).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('bt_item');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_APP_TOOLTIP'));
                this.contextMenu = false;
            }
        };
    
    Blockly.Blocks.dyor_bluetooth_app_item = {
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_APP_ITEM','LANG_BLUETOOTH_COMMAND_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_APP_ITEM')).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'bt_item');
                this.setNextStatement(true,'bt_item');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_COMMAND_TOOLTIP'));
        this.contextMenu = false;
            }
        };

    Blockly.Blocks.dyor_bluetooth_telegram_item = {
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_TELEGRAM_ITEM','LANG_BLUETOOTH_TELEGRAM_ITEM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_ITEM')).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'bt_item');
                this.setNextStatement(true,'bt_item');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_ITEM_TOOLTIP'));
        this.contextMenu = false;
            }
        };

    
    Blockly.Arduino.dyor_bluetooth_recv_telegram = function() {
            // Bluetooth if's conditions.
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var n = 0;
            var argument, branch, loop, loop_code,case2_argument,case2_code;
			Blockly.Arduino.definitions_['declare_var_define_bt_pos'] = JST['dyor_bt_telegram_definitions_variables']({});
            var code = 'if (_bt_softwareSerial.available()>0)\n{\n';
            code += '  unsigned char c;\n  _bt_softwareSerial.readBytes(&c,1);\n';
	    code += '  if ((c==\'@\')&&(_bt_pos==0)) {\n    _bt_pos++;\n';
            code += '  } else if (_bt_pos==1) {\n    _bt_pos++;\n    _bt_cmd=c;\n';
	    code += '  } else if (_bt_pos==2) {\n    _bt_pos++;\n    _bt_length=c;\n';
            code += '  } else if ((_bt_pos>=3)&&(_bt_pos<=(_bt_length+2))) {\n    _bt_pos++;\n    _bt_data[_bt_pos-3]=c;\n';
	    code += '  } else if ((_bt_pos==(_bt_length+3))&&(c==\'*\')){\n';
		var duplicate=false;
		var arguments =[];
		for (n = 0; n < this.itemCount_; n++) {
			argument = Blockly.Arduino.valueToCode(this, 'TELEGRAM' + n, Blockly.Arduino.ORDER_NONE);
			arguments.push(argument);
		}
		//var unique = arguments.filter((v, i, a) => a.indexOf(v) === i);		
		var unique = [];
		this.uniqueVariables = [];
		$.each(arguments, function(i, el){
			if($.inArray(el, unique) === -1) unique.push(el);
		});
				
		if (unique.length!==arguments.length)
			this.setWarningText('Duplicated telegram!');
		else
			this.setWarningText(null);

	    for (n = 0; n < unique.length; n++) {
	      argument = unique[n];
		  branch = '';
		if ((argument==='0')||(argument==='2')||(argument==='3')||(argument==='5')||(argument==='10')||(argument==='11')||(argument==='20')||(argument==='21'))
			branch += '      int pin = _bt_data[0];\n';
		if (argument==='2')
			branch += '      boolean value = _bt_data[1]==1? HIGH: LOW;\n';
		if ((argument==='5')||(argument==='10')||(argument==='11'))
			branch += '      byte value = _bt_data[1];\n';
		if ((argument==='12'))
		{
			branch += '      int ECHO_pin = _bt_data[0];\n';
			branch += '      int TRIGGER_pin = _bt_data[1];\n';
		}
		if ((argument==='14'))
		{
			branch += '      int analog_pin = _bt_data[0];\n';
			branch += '      int digital_pin = _bt_data[1];\n';
		}
		if ((argument==='20'))
		{
			branch += '      int frequency = ((((int)_bt_data[1])<<8)|(_bt_data[2]));\n';
			branch += '      int duration = ((((int)_bt_data[3])<<8)|(_bt_data[4]));\n';
		}
		if ((argument==='21'))
		{
			branch += '      uint16_t *melody = (uint16_t*)&_bt_data[1];\n';
			branch += '      int melody_length = _bt_length-1;\n';
		}
		  branch += Blockly.Arduino.statementToCode(this, 'ITEM' + n);
            branch = indentSentences(branch);
            branch = branch.substring(0, branch.length - 1);
	      code += '     \n      if (_bt_cmd=='+argument+') {\n'+branch+'      }';
	    }
	    code += '\n    }  else{\n     _bt_pos=0;\n    _bt_length=0;\n';

            code += '  }\n';
            
            return code+'}\n';
        };

        Blockly.Blocks.dyor_bluetooth_recv_telegram = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_recv_telegram'),
			examples: ['dyor_bluetooth_recv_telegram_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_RECV_TELEGRAM','LANG_BLUETOOTH_TELEGRAM_RECV_TOOLTIP','LANG_BLUETOOTH_TELEGRAM_TYPE','LANG_BLUETOOTH_DATA','LANG_BLUETOOTH_DO'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_RECV_TELEGRAM')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));
				//this.setMutator(new Blockly.Mutator(['dyor_bluetooth_telegram_item','dyor_bluetooth_telegram_digital_read_item']));
				this.setMutator(new Blockly.Mutator(['dyor_bluetooth_telegram_item']));
				this.itemCount_ = 0;
				this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.variables = [];
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_RECV_TOOLTIP'));
            },
        mutationToDom: function() {
                if (!this.itemCount_ ) {
                    return null;
                }
                var container = document.createElement('mutation');
                if (this.itemCount_) {
                    container.setAttribute('item', this.itemCount_);
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.itemCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 0; x < this.itemCount_; x++) {
					this.appendValueInput('TELEGRAM' + x).setCheck('TELEGRAM_TYPE').appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_TYPE')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('DATA'+x).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DATA'));
					this.appendStatementInput('ITEM' + x).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('dyor_bluetooth_app_app');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 0; x < this.itemCount_; x++) {
                    var itemBlock = workspace.newBlock('dyor_bluetooth_telegram_item');
                    //var itemBlock = workspace.newBlock('dyor_bluetooth_telegram_digital_read_item');
					itemBlock.initSvg();
                    connection.connect(itemBlock.previousConnection);
                    connection = itemBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the items input blocks and remove the inputs.
		for (var x = (this.itemCount_-1); x >= 0; x--) {
                    this.removeInput('TELEGRAM' + x);
					this.removeInput('DATA'+x);
					this.removeInput('ITEM' + x);
                }
                this.itemCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_bluetooth_telegram_item':
							this.setInputsInline(false);
							var dataInput = this.appendValueInput('TELEGRAM' + this.itemCount_).setCheck('TELEGRAM_TYPE').appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_TYPE')).appendField(new Blockly.FieldImage("img/blocks/smartphoneT.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                            if (clauseBlock.valueConnection_) {
                                dataInput.connection.connect(clauseBlock.valueConnection_);
                            }
							this.appendDummyInput('DATA'+this.itemCount_).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DATA'));
							var itemInput = this.appendStatementInput('ITEM' + this.itemCount_).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
							// Reconnect any child blocks.
                            
							if (clauseBlock.statementConnection_) {
                                itemInput.connection.connect(clauseBlock.statementConnection_);
                            }
							this.itemCount_++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 0;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_bluetooth_telegram_item':
                            var inputData = this.getInput('TELEGRAM' + x);
                            var inputItem = this.getInput('ITEM' + x);
                            clauseBlock.valueConnection_ =
                                inputData && inputData.connection.targetConnection;
                            clauseBlock.statementConnection_ =
                                inputItem && inputItem.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
			getVars: function() {
				return this.variables;
			},
			onchange: function() {
				this.variables = [];
				for (var x = 0; x < this.itemCount_; x++)
				{
					var input = this.getInputTargetBlock('TELEGRAM' + x);
					if (input){
						var telegram = input.getFieldValue('TELEGRAM');
						if ((telegram==='0')||(telegram==='3'))
						{
							this.variables.push('pin');
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['pin']]),'VARIABLES');
						}
						else if ((telegram==='2')||(telegram==='5')||(telegram==='10')||(telegram==='11'))
						{
							this.variables.push('pin');
							this.variables.push('value');
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['pin'],['value']]),'VARIABLES');
						}
						else if ((telegram==='12'))
						{
							this.variables.push('ECHO_pin');
							this.variables.push('TRIGGER_pin');
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['ECHO_pin'],['TRIGGER_pin']]),'VARIABLES');
						}
						else if ((telegram==='14'))
						{
							this.variables.push('analog_pin');
							this.variables.push('digital_pin');
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['analog_pin'],['digital_pin']]),'VARIABLES');
						}
						else if ((telegram==='20'))
						{
							this.variables.push('pin');
							this.variables.push('frequency');
							this.variables.push('duration');
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['pin'],['frequency'],['duration']]),'VARIABLES');
						}
						else if ((telegram==='21'))
						{
							this.variables.push('pin');
							this.variables.push('melody');
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['pin'],['melody']]),'VARIABLES');
						}
						else
						{
							try{ this.getInput('DATA'+x).removeField('VARIABLES') } catch (e) {}
							this.getInput('DATA'+x).appendField(new Blockly.FieldDropdown([['']]),'VARIABLES');
						}
					}
				}
				//this.variables = this.variables.filter((v, i, a) => a.indexOf(v) === i);
				var uniqueVariables = [];
				$.each(this.variables, function(i, el){
					if($.inArray(el, uniqueVariables) === -1) uniqueVariables.push(el);
				});
				this.variables = uniqueVariables;
				//console.log(this.variables);
			}
        };

    Blockly.Arduino.dyor_bluetooth_telegram_type = function() {
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = this.getFieldValue('TELEGRAM');
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    }

,    Blockly.Blocks.dyor_bluetooth_telegram_type = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_telegram_type'),
			examples: ['dyor_bluetooth_recv_telegram_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_TELEGRAM','LANG_BLUETOOTH_DIGITAL_READ','LANG_BLUETOOTH_DIGITAL_WRITE','LANG_BLUETOOTH_ANALOG_READ','LANG_BLUETOOTH_ANALOG_WRITE','LANG_BLUETOOTH_SERVO','LANG_BLUETOOTH_SONAR_READ','LANG_BLUETOOTH_TCRT5000_READ','LANG_BLUETOOTH_BUZZER_TONE','LANG_BLUETOOTH_BUZZER_MELODY','LANG_BLUETOOTH_TELEGRAM_PREDEF_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/smartphoneT.svg", 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM')).appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_DIGITAL_READ')||'Digital Read','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_DIGITAL_WRITE')||'Digital Write','2'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_ANALOG_READ')||'Analog Read','3'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_ANALOG_WRITE')||'Analog Write','5'],
				[Facilino.locales.getKey('LANG_BLUETOOTH_SERVO')||'Servo','10'],
				[Facilino.locales.getKey('LANG_BLUETOOTH_SERVO360')||'Servo 360º','11'],
				[Facilino.locales.getKey('LANG_BLUETOOTH_SONAR_READ')||'Sonar','12'],
				[Facilino.locales.getKey('LANG_BLUETOOTH_TCRT5000_READ')||'Sonar','14'],
				[Facilino.locales.getKey('LANG_BLUETOOTH_BUZZER_TONE')||'Buzzer Tone','20'],
				[Facilino.locales.getKey('LANG_BLUETOOTH_BUZZER_MELODY')||'Buzzer Melody','22'],
        		]),'TELEGRAM').setAlign(Blockly.ALIGN_RIGHT);
        	this.setInputsInline(false);
        	this.setOutput(true,'TELEGRAM_TYPE');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_PREDEF_TOOLTIP'));
	    }            
    };

    Blockly.Arduino.dyor_bluetooth_telegram_num = function() {
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = Blockly.Arduino.valueToCode(this, 'TELEGRAM_TYPE', Blockly.Arduino.ORDER_ATOMIC);
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    }

    Blockly.Blocks.dyor_bluetooth_telegram_num = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_telegram_num'),
			examples: [''],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_TELEGRAM','LANG_BLUETOOTH_TELEGRAM_NUM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendValueInput('TELEGRAM_TYPE').appendField(new Blockly.FieldImage("img/blocks/smartphoneT.svg", 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM')).setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
        this.setOutput(true,'TELEGRAM_TYPE');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_NUM_TOOLTIP'));
            }
    };

   Blockly.Arduino.dyor_bluetooth_decode_telegram = function() {
      if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
      var telegram_type = this.getFieldValue('TELEGRAM');
      var data = this.getFieldValue('DATA_POS');
      var code = '';
      if (telegram_type=='0') {
        code += '_bt_data['+data+']';
      }
      else if (telegram_type=='1') {
	code += '_bt_data['+data+']';
      }
      else if (telegram_type=='2') {
	code += '_bt_data['+data+']';
      }
      else if (telegram_type=='3') {
	code += '_bt_data['+data+']';
      }
      else if (telegram_type=='4') {
        if (data=='1') {
	  code += '(((int)(_bt_data[1]))<<8)+_bt_data[2]';
        }
        else if (data=='3') {
	  code += '(((int)(_bt_data[2]))<<8)+_bt_data[4]';
        }
      }
      else if (telegram_type=='5') {
        if (data=='3') {
	  code += '_bt_data[3],_bt_data[4],_bt_data[5],_bt_data[6],_bt_data[7],_bt_data[8],_bt_data[9],_bt_data[10]';
        }
        else{
	  code += '_bt_data['+data+']';;
        }
      }
      
      
      return [code,Blockly.Arduino.ORDER_NONE];
    }

    Blockly.Blocks.dyor_bluetooth_decode_telegram = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_decode_telegram'),
			examples: ['dyor_bluetooth_recv_telegram_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_DIGITAL_WRITE','LANG_BLUETOOTH_ANALOG_WRITE','LANG_BLUETOOTH_SERVO','LANG_BLUETOOTH_SERVO360','LANG_BLUETOOTH_BUZZER_TONE','LANG_BLUETOOTH_LED_MATRIX','LANG_BLUETOOTH_DECODE_TELEGRAM','LANG_BLUETOOTH_TELEGRAM_DECODE_TOOLTIP','LANG_BLUETOOTH_PIN','LANG_BLUETOOTH_VALUE','LANG_BLUETOOTH_ANGLE','LANG_BLUETOOTH_SPEED','LANG_BLUETOOTH_FREQ','LANG_BLUETOOTH_DURATION','LANG_BLUETOOTH_PIN_CS','LANG_BLUETOOTH_PIN_DIN','LANG_BLUETOOTH_PIN_CLK','LANG_BLUETOOTH_DATA'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                var telegram = new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_DIGITAL_WRITE')||'Digital Output','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_ANALOG_WRITE')||'Analog Output','1'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_SERVO')||'Servo','2'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_SERVO360')||'Servo360','3'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_BUZZER_TONE')||'Sound','4'],
		        [Facilino.locales.getKey('LANG_BLUETOOTH_LED_MATRIX')||'Led Matrix','5']
        		]);
		this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DECODE_TELEGRAM'));
                this.appendDummyInput('').appendField(telegram,'TELEGRAM').setAlign(Blockly.ALIGN_RIGHT);
        	this.checkTelegram();
        	this.last_telegram = this.getFieldValue('TELEGRAM');
        	this.setInputsInline(true);
		this.setOutput(true);
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_DECODE_TOOLTIP'));
            },
        checkTelegram: function() {
        	    var _telegram = this.getFieldValue('TELEGRAM');
                    try {
                        this.removeInput('DATA_POS');
                    } catch (e) {}
		    if (_telegram === '0')
		    {
                      this.appendDummyInput('DATA_POS').appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_PIN')||'Pin','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_VALUE')||'Value','1']
        		]),'DATA_POS').setAlign(Blockly.ALIGN_RIGHT);
		    }
		    else if ( _telegram === '1')
                    {
                      this.appendDummyInput('DATA_POS').appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_PIN')||'Pin','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_VALUE')||'Value','1']
        		]),'DATA_POS').setAlign(Blockly.ALIGN_RIGHT);
                    }
		    else if ( _telegram === '2')
                    {
                      this.appendDummyInput('DATA_POS').appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_PIN')||'Pin','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_ANGLE')||'Angle','1']
        		]),'DATA_POS').setAlign(Blockly.ALIGN_RIGHT);
                    }
		    else if ( _telegram === '3')
                    {
                      this.appendDummyInput('DATA_POS').appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_PIN')||'Pin','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_SPEED')||'Speed','1']
        		]),'DATA_POS').setAlign(Blockly.ALIGN_RIGHT);
                    }
		    else if ( _telegram === '4')
                    {
                      this.appendDummyInput('DATA_POS').appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_PIN')||'Pin','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_FREQ')||'Freq','1'],
			[Facilino.locales.getKey('LANG_BLUETOOTH_DURATION')||'Duration (ms)','3']
        		]),'DATA_POS').setAlign(Blockly.ALIGN_RIGHT);
                    }
		    else if ( _telegram === '5')
                    {
                      this.appendDummyInput('DATA_POS').appendField(new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_PIN_CS')||'Pin CS','0'],
			[Facilino.locales.getKey('LANG_BLUETOOTH_PIN_DIN')||'Pin DIN','1'],
			[Facilino.locales.getKey('LANG_BLUETOOTH_PIN_CLK')||'Pin CLK','2'],
			[Facilino.locales.getKey('LANG_BLUETOOTH_DATA')||'Data','3']
        		]),'DATA_POS').setAlign(Blockly.ALIGN_RIGHT);
                    }
            },
            onchange: function() {
                if (this.getFieldValue('TELEGRAM') !== this.last_telegram) {
                    this.checkTelegram();
                    this.last_telegram = this.getFieldValue('TELEGRAM');
                }
            }
    };


   Blockly.Arduino.dyor_bluetooth_decode_telegram_num = function() {
      if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
      var data = Blockly.Arduino.valueToCode(this, 'DATA_POS', Blockly.Arduino.ORDER_ATOMIC);
      var code = '';
      code += '_bt_data['+data+'-1]';
          
      return [code,Blockly.Arduino.ORDER_NONE];
    }

    Blockly.Blocks.dyor_bluetooth_decode_telegram_num = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_decode_telegram_num'),
			examples: [''],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_DECODE_TELEGRAM','LANG_BLUETOOTH_DECODE_TELEGRAM_DATA','LANG_BLUETOOTH_TELEGRAM_DECODE_NUM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendValueInput('DATA_POS').appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DECODE_TELEGRAM')).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DECODE_TELEGRAM_DATA')).setAlign(Blockly.ALIGN_RIGHT);
        	this.setInputsInline(true);
			this.setOutput(true);
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_DECODE_NUM_TOOLTIP'));
            }
    };

    Blockly.Arduino.dyor_bluetooth_send_telegram = function() {
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var code='';
		var inp1 = Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '0';
		var in1 = Facilino.findPinMode(inp1);
	
        code += '_bt_softwareSerial.write(\'@\');\n';//this.getFieldValue('TELEGRAM');
		//@ cmd length data *
		code += '_bt_softwareSerial.write((byte)'+this.getFieldValue('TELEGRAM')+');\n';
		if (this.getFieldValue('TELEGRAM')==0)
		{
			code +='_bt_softwareSerial.write((byte)2);\n';
			code +='_bt_softwareSerial.write((byte)'+in1['code']+in1['pin']+');\n';
			code +='_bt_softwareSerial.write((byte)'+Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC)+');\n';
		}
		else if (this.getFieldValue('TELEGRAM')==1)
		{
			code +='_bt_softwareSerial.write((byte)3);\n';
			code +='_bt_softwareSerial.write((byte)'+in1['code']+in1['pin']+');\n';
			code +='int _temp_analog='+Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC)+';\n';
			code +='_bt_softwareSerial.write((byte)((_temp_analog&0xFF00)>>8));\n';
			code +='_bt_softwareSerial.write((byte)(_temp_analog&0x00FF));\n';
		}
		else if (this.getFieldValue('TELEGRAM')==2)
		{
			code +='_bt_softwareSerial.write((byte)3);\n';
			code +='_bt_softwareSerial.write((byte)'+in1['code']+in1['pin']+');\n';
			code +='int _temp_sonar='+Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC)+';\n';
			code +='_bt_softwareSerial.write((byte)((_temp_sonar&0xFF00)>>8));\n';
			code +='_bt_softwareSerial.write((byte)(_temp_sonar&0x00FF));\n';
		}
		else if (this.getFieldValue('TELEGRAM')==3)
		{
			code +='String _temp_str='+Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC)+';\n';
			code +='_bt_softwareSerial.write(String(_temp_str.length());\n';
			code +='_bt_softwareSerial.write(_temp_str);\n';
		}
		else if (this.getFieldValue('TELEGRAM')==4)
		{
			code +='_bt_softwareSerial.write((byte)4);\n';
			code +='_bt_softwareSerial.write((byte)'+in1['code']+in1['pin']+');\n';
			code +='_bt_softwareSerial.write((byte)'+Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC)+');\n';
			code +='_bt_softwareSerial.write((byte)'+Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC)+');\n';
			code +='_bt_softwareSerial.write((byte)'+Blockly.Arduino.valueToCode(this, 'INP4', Blockly.Arduino.ORDER_ATOMIC)+');\n';
		}
		code +='_bt_softwareSerial.write(\'*\');\n';
        return code;
    }

    Blockly.Blocks.dyor_bluetooth_send_telegram = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_send_telegram'),
			examples: ['dyor_bluetooth_send_telegram_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_DIGITAL_READ','LANG_BLUETOOTH_ANALOG_READ','LANG_BLUETOOTH_SONAR_READ','LANG_BLUETOOTH_TEXT_READ','LANG_BLUETOOTH_COLOR_READ','LANG_BLUETOOTH_SEND_TELEGRAM','LANG_BLUETOOTH_TELEGRAM_TYPE','LANG_BLUETOOTH_TELEGRAM_SEND_TOOLTIP','LANG_BLUETOOTH_PIN','LANG_BLUETOOTH_VALUE','LANG_BLUETOOTH_SENSOR','LANG_BLUETOOTH_DISTANCE','LANG_BLUETOOTH_TEXT1','LANG_BLUETOOTH_SENSOR','LANG_BLUETOOTH_R','LANG_BLUETOOTH_G','LANG_BLUETOOTH_B'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                var telegram = new Blockly.FieldDropdown([
        		[Facilino.locales.getKey('LANG_BLUETOOTH_DIGITAL_READ')||'Digital Input','0'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_ANALOG_READ')||'Analog Input','1'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_SONAR_READ')||'Sonar','2'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_TEXT_READ')||'Text','3'],
        		[Facilino.locales.getKey('LANG_BLUETOOTH_COLOR_READ')||'Colour','4']
        		]);
		this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_BLUETOOTH_SEND_TELEGRAM')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));
                //this.appendValueInput('PIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DEF_PIN2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        	this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_TYPE')).appendField(telegram,'TELEGRAM').setAlign(Blockly.ALIGN_RIGHT);
        	this.last_telegram = -1;
			this.checkTelegram();
        	this.last_telegram = this.getFieldValue('TELEGRAM');
        	this.setInputsInline(false);
		this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
        	this.setOutput(false);
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_TELEGRAM_SEND_TOOLTIP'));
            },
        checkTelegram: function() {
        var _telegram = this.getFieldValue('TELEGRAM');
				try {
					    if (this.last_telegram>=0) {
                          this.removeInput('TEL');
						  this.removeInput('INP1');
						}
						if (this.last_telegram==0 || this.last_telegram==1 || this.last_telegram==2 || this.last_telegram==4)
						  this.removeInput('INP2');
					    if (this.last_telegram==4)
						{
						  this.removeInput('INP3');
						  this.removeInput('INP4');
						}
                    } catch (e) {}
                if ( _telegram === '0') {
                    this.appendDummyInput('TEL').appendField(new Blockly.FieldImage('img/blocks/digital_signal.svg', 20*options.zoom, 20*options.zoom) ).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_PIN')).setAlign(Blockly.ALIGN_RIGHT);
                    this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_VALUE')).setAlign(Blockly.ALIGN_RIGHT);
		} else if ( _telegram === '1') {
            this.appendDummyInput('TEL').appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_PIN')).setAlign(Blockly.ALIGN_RIGHT);
                    this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_VALUE')).setAlign(Blockly.ALIGN_RIGHT);
                } else if ( _telegram === '2') {
            this.appendDummyInput('TEL').appendField(new Blockly.FieldImage('img/blocks/hearing.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_SENSOR')).setAlign(Blockly.ALIGN_RIGHT);
            this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_DISTANCE')).setAlign(Blockly.ALIGN_RIGHT);
                }
        else if ( _telegram === '3') {
            this.appendDummyInput('TEL').appendField(new Blockly.FieldImage('img/blocks/text.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('INP1').setCheck(String).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_TEXT1')).setAlign(Blockly.ALIGN_RIGHT);
                }
        else if ( _telegram === '4') {
            this.appendDummyInput('TEL').appendField(new Blockly.FieldImage('img/blocks/color.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
	    this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_SENSOR')).setAlign(Blockly.ALIGN_RIGHT);
            this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_R')).setAlign(Blockly.ALIGN_RIGHT);
	    this.appendValueInput('INP3').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_G')).setAlign(Blockly.ALIGN_RIGHT);
	    this.appendValueInput('INP4').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BLUETOOTH_B')).setAlign(Blockly.ALIGN_RIGHT);
                }
            },
            onchange: function() {
                if (this.getFieldValue('TELEGRAM') !== this.last_telegram) {
                    this.checkTelegram();
                    this.last_telegram = this.getFieldValue('TELEGRAM');
                }
            }
    };

    // Source: src/blocks/bq_bluetooth_receive/dyor_bluetooth_receive.js
        Blockly.Arduino.dyor_bluetooth_receive = function() {
            var code = JST['dyor_bluetooth_receive']({});
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };
        Blockly.Blocks.dyor_bluetooth_receive = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_receive'),
			examples: ['dyor_bluetooth_loopback_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_RECEIVE','LANG_BLUETOOTH_RECEIVE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_BLUETOOTH_RECEIVE')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));

                this.setInputsInline(false);


                this.setOutput(true, null);
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_RECEIVE_TOOLTIP'));
            }
        };

        // Source: src/blocks/bq_bluetooth_send/dyor_bluetooth_send.js
        Blockly.Arduino.dyor_bluetooth_send = function() {
            var statement_send = Blockly.Arduino.valueToCode(this, 'SNT', Blockly.Arduino.ORDER_ATOMIC) || '';

            var code = '';
            var a = Facilino.findPinMode(statement_send);
            code += a['code'];
            statement_send = a['pin'];

            code += JST['dyor_bluetooth_send']({
                'statement_send': statement_send
            });

            return code;
        };

        Blockly.Blocks.dyor_bluetooth_send = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            tags: ['bluetooth','communication'],
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_send'),
			examples: ['dyor_bluetooth_loopback_example.bly'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_SEND','LANG_BLUETOOTH_SEND_SEND','LANG_BLUETOOTH_SEND_TOOLTIP'],
            //bq_bluetooth_send initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_BLUETOOTH_SEND')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));

                this.appendValueInput('SNT')
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField(Facilino.locales.getKey('LANG_BLUETOOTH_SEND_SEND'));

                this.setInputsInline(false);


                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_SEND_TOOLTIP'));
            }
        };
		
        Blockly.Arduino.dyor_bluetooth_available = function() {
            var branch = Blockly.Arduino.statementToCode(this, 'DO');
            branch = branch.replace(/&quot;/g, '"');

            var code = JST['dyor_bluetooth_available']({
                'branch': branch
            });
            return code;
        };

        Blockly.Blocks.dyor_bluetooth_available = {
            category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BLUETOOTH'),
            helpUrl: Facilino.getHelpUrl('dyor_bluetooth_available'),
			examples: ['dyor_bluetooth_loopback_example.bly'],
            tags: ['bluetooth','communication'],
			category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
			colour: Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH,
			keys: ['LANG_BLUETOOTH_SERIAL_AVAILABLE','LANG_CONTROLS_REPEAT_INPUT_DO','LANG_BLUETOOTH_SERIAL_AVAILABLE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_BLUETOOTH);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_BLUETOOTH_SERIAL_AVAILABLE')).appendField(new Blockly.FieldImage('img/blocks/bluetooth.svg', 52*options.zoom, 24*options.zoom));
                this.appendStatementInput('DO').appendField(Facilino.locales.getKey('LANG_CONTROLS_REPEAT_INPUT_DO')).setCheck('code');
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_BLUETOOTH_SERIAL_AVAILABLE_TOOLTIP'));
            }
        };
		
		
		
		if ((Facilino.locales.processor==='ArduinoNano') || (Facilino.locales.processor==='ArduinoUno') || (Facilino.locales.processor===null))
		{
			
			Blockly.Arduino.communications_wifi_def = function() {
				var SSID, Password;
				SSID = Blockly.Arduino.valueToCode(this, 'SSID', Blockly.Arduino.ORDER_ATOMIC);
				Password = Blockly.Arduino.valueToCode(this, 'PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
				var dropdown_pin, NextPIN
				dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
				NextPIN = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC);
			
				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_softwareserial_pinmode'] = a['code'];
				dropdown_pin = a['pin'];
				a = Facilino.findPinMode(NextPIN);
				Blockly.Arduino.setups_['setup_softwareserial_pinmode2'] = a['code'];
				NextPIN = a['pin'];

				var baud_rate = Blockly.Arduino.valueToCode(this, 'BAUD_RATE', Blockly.Arduino.ORDER_ATOMIC);
				var b = Facilino.findPinMode(baud_rate);
				Blockly.Arduino.setups_['setup_softwareserial_pinmode3'] = b['code'];
				baud_rate = b['pin'];

				Blockly.Arduino.definitions_['declare_var_SoftwareSerial' + dropdown_pin] = 'SoftwareSerial _wifi_softwareSerial(' + dropdown_pin + ',' + NextPIN + ');\n';
				Blockly.Arduino.definitions_['declare_var_wifi' + dropdown_pin] = 'ESP8266 _wifi(_wifi_softwareSerial);\n';			
				Blockly.Arduino.definitions_['define_softwareserial'] = JST['softwareserial_def_definitions']({});
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions']({});
			
				Blockly.Arduino.setups_['setup_softwareserial_'] = JST['communications_wifi_softwareserial_def_setups']({
				'baud_rate': baud_rate,
				'dropdown_pin': dropdown_pin,
				'NextPIN': NextPIN
				});
			
				Blockly.Arduino.setups_['setup_wifi_'] = '_wifi.setOprToStationSoftAP();\n  _wifi.joinAP('+SSID+','+Password+');\n';
				return '';
			}
            
		
			Blockly.Blocks.communications_wifi_def = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_def'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_DEF','LANG_WIFI_ESP8266_DEF_SSID','LANG_WIFI_ESP8266_DEF_PASSWORD','LANG_WIFI_ESP8266_DEF_BAUD_RATE','LANG_WIFI_ESP8266_DEF_PIN1','LANG_WIFI_ESP8266_DEF_PIN2','LANG_WIFI_ESP8266_DEF_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SSID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_SSID')).appendField(new Blockly.FieldImage("img/blocks/SSID.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PASSWORD').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PASSWORD')).appendField(new Blockly.FieldImage("img/blocks/lock.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('BAUD_RATE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_BAUD_RATE')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PIN1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PIN2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PIN2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_TOOLTIP'));
					
				}
			};
		
			Blockly.Arduino.communications_wifi_tcp_open = function() {
				var IP, Port;
				IP = Blockly.Arduino.valueToCode(this, 'IP', Blockly.Arduino.ORDER_ATOMIC) || '""';
				Port = Blockly.Arduino.valueToCode(this, 'PORT', Blockly.Arduino.ORDER_ATOMIC) ||80;
				var code = '';
				Blockly.Arduino.setups_['setup_wifi_tcp_udp_'] = '_wifi.disableMUX();\n';
				code = '_wifi.createTCP('+IP+','+Port+');\n';

				return code;
			}
		
			Blockly.Blocks.communications_wifi_tcp_open = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_tcp_open'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_TCP_OPEN','LANG_WIFI_ESP8266_IP','LANG_WIFI_ESP8266_PORT','LANG_WIFI_ESP8266_TCP_OPEN_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_OPEN')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('IP').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_IP')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PORT').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_PORT')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_OPEN_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.communications_wifi_tcp_close = function() {
				var code = '';
				Blockly.Arduino.setups_['setup_wifi_tcp_udp_'] = '_wifi.disableMUX();\n';
				code = '_wifi.releaseTCP();\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_tcp_close = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_tcp_close'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_TCP_CLOSE','LANG_WIFI_ESP8266_TCP_CLOSE_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_CLOSE')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_CLOSE_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.communications_wifi_recv = function() {
				var code = '';
				Blockly.Arduino.definitions_['define_wifi_definitions_recv'] = JST['communications_wifi_definitions_recv']({});
				code = '_wifi_recv()';
				return [code,Blockly.Arduino.ORDER_NONE];
			}
		
			Blockly.Blocks.communications_wifi_recv = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_recv'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_RECV','LANG_WIFI_ESP8266_RECV_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_RECV')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(true,String);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_RECV_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_send = function() {
				var send_text = Blockly.Arduino.valueToCode(this, 'TEXT', Blockly.Arduino.ORDER_NONE) ||'""';
				var version = this.getFieldValue('VERSION');
				var code = '';
				try{
					if (this.getInputTargetBlock('TEXT').type==='text')
						code = '_wifi.send((uint8_t*)'+send_text+','+(send_text.length-2)+');\n';
					else if (this.getInputTargetBlock('TEXT').type==='variables_get')
						code = '_wifi.send((uint8_t*)'+send_text+'.c_str(),'+send_text+'.length());\n';
					else
						code = 'String __str='+send_text+';\n_wifi.send((uint8_t*)__str.c_str(),__str.length());\n';
				}
				catch(e) {}

				return code;
			}
		
			Blockly.Blocks.communications_wifi_send = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_send'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_SEND','LANG_WIFI_ESP8266_TEXT','LANG_WIFI_ESP8266_SEND_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_SEND')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('TEXT').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TEXT')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_SEND_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.communications_wifi_html_server = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var SSID, Password, Port;
				var code = '';
				SSID = Blockly.Arduino.valueToCode(this, 'SSID', Blockly.Arduino.ORDER_ATOMIC);
				Password = Blockly.Arduino.valueToCode(this, 'PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
				var html = Blockly.Arduino.valueToCode(this, 'HTML', Blockly.Arduino.ORDER_NONE) ||'""';
				Port = Blockly.Arduino.valueToCode(this, 'PORT', Blockly.Arduino.ORDER_ATOMIC) ||'80';
				
				var dropdown_pin, NextPIN;
				dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
				NextPIN = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC);


				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_softwareserial_pinmode'] = a['code'];
				dropdown_pin = a['pin'];
				a = Facilino.findPinMode(NextPIN);
				Blockly.Arduino.setups_['setup_softwareserial_pinmode2'] = a['code'];
				NextPIN = a['pin'];

				var baud_rate = Blockly.Arduino.valueToCode(this, 'BAUD_RATE', Blockly.Arduino.ORDER_ATOMIC);
				var b = Facilino.findPinMode(baud_rate);
				Blockly.Arduino.setups_['setup_softwareserial_pinmode3'] = b['code'];
				baud_rate = b['pin'];

				Blockly.Arduino.definitions_['declare_var_SoftwareSerial' + dropdown_pin] = 'SoftwareSerial _wifi_softwareSerial(' + dropdown_pin + ',' + NextPIN + ');\n';
				Blockly.Arduino.definitions_['declare_var_wifi' + dropdown_pin] = 'ESP8266 _wifi(_wifi_softwareSerial);\n';	
				Blockly.Arduino.definitions_['declare_var_muxID'] = 'uint8_t _muxID;\n';
				Blockly.Arduino.definitions_['define_softwareserial'] = JST['softwareserial_def_definitions']({});
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions']({});

				Blockly.Arduino.setups_['setup_softwareserial_'] = JST['communications_wifi_softwareserial_def_setups']({
				'baud_rate': baud_rate,
				'dropdown_pin': dropdown_pin,
				'NextPIN': NextPIN
				});

				Blockly.Arduino.setups_['setup_wifi_'] = '_wifi.setOprToStationSoftAP();\n  _wifi.joinAP('+SSID+','+Password+');\n'
				Blockly.Arduino.setups_['setup_wifi_tcp_udp_enable'] = '_wifi.enableMUX();\n';
				Blockly.Arduino.setups_['setup_wifi_tcp_udp_server'] = '_wifi.startTCPServer('+Port+');\n_wifi.setTCPServerTimeout(10);\n';
				Blockly.Arduino.definitions_['define_wifi_definitions_server_recv'] = JST['communications_wifi_definitions_server_recv']({});
				code += 'if (_wifi_server_recv(&_muxID,100)>0)\n{\n';
				code += '  String str_http = String("HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n");\n';
				code += '  str_http+='+html+'+String("Client disconnected\\r\\n\\r\\n");\n';
				code += '  _wifi.send(_muxID,(uint8_t*)str_http.c_str(),str_http.length());  _wifi.releaseTCP();\n}\n';
				return code;
			}
			Blockly.Blocks.communications_wifi_html_server = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_html_server'),
				examples: ['communications_wifi_html_server_example.bly','communications_wifi_html_server_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_HTTP_SERVER','LANG_WIFI_ESP8266_DEF_SSID','LANG_WIFI_ESP8266_DEF_PASSWORD','LANG_WIFI_ESP8266_PORT','LANG_WIFI_ESP8266_DEF_BAUD_RATE','LANG_WIFI_ESP8266_DEF_PIN1','LANG_WIFI_ESP8266_DEF_PIN2','LANG_WIFI_ESP8266_HTML','LANG_WIFI_ESP8266_HTTP_SERVER_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTTP_SERVER')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SSID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_SSID')).appendField(new Blockly.FieldImage("img/blocks/SSID.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PASSWORD').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PASSWORD')).appendField(new Blockly.FieldImage("img/blocks/lock.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PORT').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_PORT')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('BAUD_RATE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_BAUD_RATE')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PIN1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PIN2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PIN2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('HTML').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML')).appendField(new Blockly.FieldImage('img/blocks/html.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTTP_SERVER_TOOLTIP'));
					
				}
			};
			
			/*Blockly.Arduino.communications_wifi_iot_open_devicehub2 = function() {
				var project_id = Blockly.Arduino.valueToCode(this, 'PROJECT_ID', Blockly.Arduino.ORDER_NONE) ||'""';
				var device_id = Blockly.Arduino.valueToCode(this, 'DEVICE_UUID', Blockly.Arduino.ORDER_NONE) ||'""';
				var api_key = Blockly.Arduino.valueToCode(this, 'API_KEY', Blockly.Arduino.ORDER_NONE) ||'""';
				var code = '';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';
				Blockly.Arduino.definitions_['declare_var_project_id'] = 'String _project_id='+project_id+';\n';
				Blockly.Arduino.definitions_['declare_var_device_id'] = 'String _device_id='+device_id+';\n';
				Blockly.Arduino.definitions_['declare_var_api_key'] = 'String _api_key='+api_key+';\n';
				code += '_client.connect("api.devicehub.net",80);\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_open_devicehub2 = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_open_devicehub2'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_DEVICEHUB_OPEN','LANG_WIFI_ESP8266_PROJECT_ID','LANG_WIFI_ESP8266_DEVICE_UUID','LANG_WIFI_ESP8266_API_KEY','LANG_WIFI_IOT_DEVICEHUB_OPEN_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_OPEN')).appendField(new Blockly.FieldImage('img/blocks/devicehub.png', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('PROJECT_ID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_PROJECT_ID')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('DEVICE_UUID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEVICE_UUID')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('API_KEY').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_API_KEY')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_OPEN_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_iot_devicehub_post2= function() {	
				var sensor_name = Blockly.Arduino.valueToCode(this, 'SENSOR_NAME', Blockly.Arduino.ORDER_NONE) ||'""';
				var sensor_value = Blockly.Arduino.valueToCode(this, 'SENSOR_VALUE', Blockly.Arduino.ORDER_NONE) ||'0';
				var code = '';
				code = '  _client.println(String("POST /v2/project/")+_project_id+"/device/"+_device_id+"/sensor/"+'+sensor_name+'+"/data HTTP/1.1");\n';
				code+='  _client.println("Host: api.devicehub.net");\n';
				code+='  _client.print(String("X-ApiKey: ")+_api_key+"\\r\\n");\n';
				code+='  _client.println("Content-Type: application/json");\n';
				code+='  _client.println("Connection: close");\n';
				code+='  _client.print("Content-Length: ");\n';
				code+='  _client.println(String(String("{\\"value\\": " + String('+sensor_value+') + "}").length(), DEC));\n';
				code+='  _client.println();\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_devicehub_post2 = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_devicehub_post2'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_DEVICEHUB_SEND','LANG_WIFI_ESP8266_SENSOR_NAME','LANG_WIFI_ESP8266_SENSOR_VALUE','LANG_WIFI_IOT_DEVICEHUB_SEND_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_SEND')).appendField(new Blockly.FieldImage('img/blocks/devicehub.png', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SENSOR_NAME').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_SENSOR_NAME')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('SENSOR_VALUE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_SENSOR_VALUE')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_SEND_TOOLTIP'));
				}
			};*/
			
			
		}
		if ((Facilino.locales.processor==='ESP32') || (Facilino.locales.processor==='NodeMCU')|| (Facilino.locales.processor===null))
		{	
			Blockly.Arduino.communications_wifi_def = function() {
				var SSID, Password;
				SSID = Blockly.Arduino.valueToCode(this, 'SSID', Blockly.Arduino.ORDER_ATOMIC);
				Password = Blockly.Arduino.valueToCode(this, 'PASSWORD', Blockly.Arduino.ORDER_ATOMIC);

				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.setups_['setup_wifi_'] = JST['communications_wifi_def_setups2']({
				'ssid': SSID,
				'password': Password
				});
				return '';
			}
            
		
			Blockly.Blocks.communications_wifi_def = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_def2'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_DEF','LANG_WIFI_ESP8266_DEF_SSID','LANG_WIFI_ESP8266_DEF_PASSWORD','LANG_WIFI_ESP8266_DEF_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SSID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_SSID')).appendField(new Blockly.FieldImage("img/blocks/SSID.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PASSWORD').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PASSWORD')).appendField(new Blockly.FieldImage("img/blocks/lock.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_TOOLTIP'));
					
				}
			};
			
			Blockly.Arduino.communications_wifi_localIP = function() {
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				code ='WiFi.localIP()';
				return [code,Blockly.Arduino.ORDER_ATOMIC];
			}
            
		
			Blockly.Blocks.communications_wifi_localIP = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_localIP'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_LOCALIP','LANG_WIFI_ESP8266_LOCALIP_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_LOCALIP')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.setInputsInline(false);
					this.setPreviousStatement(false);
					this.setNextStatement(false);
					this.setOutput(true,String);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_LOCALIP_TOOLTIP'));
					
				}
			};
			
			Blockly.Arduino.communications_wifi_MAC = function() {
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				code ='WiFi.macAddress()';
				return [code,Blockly.Arduino.ORDER_ATOMIC];
			}
            
		
			Blockly.Blocks.communications_wifi_MAC = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_MAC'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_MAC','LANG_WIFI_ESP8266_MAC_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_MAC')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.setInputsInline(false);
					this.setPreviousStatement(false);
					this.setNextStatement(false);
					this.setOutput(true,String);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_MAC_TOOLTIP'));
					
				}
			};
			
			Blockly.Arduino.communications_wifi_isconnected = function() {
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				code ='WiFi.status()==WL_CONNECTED';
				return [code,Blockly.Arduino.ORDER_ATOMIC];
			}
            
		
			Blockly.Blocks.communications_wifi_isconnected = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_isconnected'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_ISCONNECTED','LANG_WIFI_ESP8266_ISCONNECTED_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_ISCONNECTED')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.setInputsInline(false);
					this.setPreviousStatement(false);
					this.setNextStatement(false);
					this.setOutput(true,Boolean);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_ISCONNECTED_TOOLTIP'));
					
				}
			};
		
			Blockly.Arduino.communications_wifi_tcp_open = function() {
				var IP, Port;
				IP = Blockly.Arduino.valueToCode(this, 'IP', Blockly.Arduino.ORDER_ATOMIC) || '""';
				Port = Blockly.Arduino.valueToCode(this, 'PORT', Blockly.Arduino.ORDER_ATOMIC) ||80;
				var code = '';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';
				code += '_client.connect('+IP+','+Port+');\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_tcp_open = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_tcp_open'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_TCP_OPEN','LANG_WIFI_ESP8266_IP','LANG_WIFI_ESP8266_PORT','LANG_WIFI_ESP8266_TCP_OPEN_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_OPEN')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('IP').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_IP')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PORT').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_PORT')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_OPEN_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.communications_wifi_tcp_close = function() {
				var code = '';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';
				code += _client = '_client.stop();\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_tcp_close = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_tcp_close'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_TCP_CLOSE','LANG_WIFI_ESP8266_TCP_CLOSE_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_CLOSE')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_TCP_CLOSE_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.communications_wifi_recv = function() {
				var code = '';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';
				Blockly.Arduino.definitions_['define_wifi_definitions_recv2'] = JST['communications_wifi_definitions_recv2']({});
				 code = '_wifi_recv2()';
				return [code,Blockly.Arduino.ORDER_NONE];
			}
		
			Blockly.Blocks.communications_wifi_recv = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_recv'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_RECV','LANG_WIFI_ESP8266_RECV_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_RECV')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					//this.appendValueInput('TIMEOUT').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TIMEOUT')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(true,String);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_RECV_TOOLTIP'));
				}
			};
	
			Blockly.Arduino.communications_wifi_send = function() {
				var send_text = Blockly.Arduino.valueToCode(this, 'TEXT', Blockly.Arduino.ORDER_NONE) ||'""';
				var code = '';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';
				code = '_client.print('+send_text+');\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_send = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_send'),
				examples: ['communications_wifi_def_example.bly','communications_wifi_def_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_SEND','LANG_WIFI_ESP8266_TEXT','LANG_WIFI_ESP8266_SEND_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_SEND')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('TEXT').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_TEXT')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_SEND_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.communications_wifi_html_server = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var SSID, Password, Port;
				var code = '';
				SSID = Blockly.Arduino.valueToCode(this, 'SSID', Blockly.Arduino.ORDER_ATOMIC);
				Password = Blockly.Arduino.valueToCode(this, 'PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
				var html = Blockly.Arduino.valueToCode(this, 'HTML', Blockly.Arduino.ORDER_NONE) ||'""';
				Port = Blockly.Arduino.valueToCode(this, 'PORT', Blockly.Arduino.ORDER_ATOMIC) ||'80';
				Blockly.Arduino.definitions_['declare_var_wifi_server'] = 'WiFiServer _server('+Port+');\n';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';

				Blockly.Arduino.setups_['setup_wifi_'] = JST['communications_wifi_def_setups2']({
				'ssid': SSID,
				'password': Password
				});
				Blockly.Arduino.setups_['setup_wifi_server'] = '_server.begin();\n';
				code += '_client = _server.available();\n  if (!_client) {\n    return;\n  }\n';
				code += 'while(!_client.available()){\n     delay(1);\n  }\n';
				code += 'String _request = _client.readStringUntil(\'\\r\');\n';
				code += '_client.flush();\n';
				code += 'String str_http = String("HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n");\n';
				code += ' _client.println('+html+');\n';
				return code;
			}
			Blockly.Blocks.communications_wifi_html_server = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WIFI'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_html_server'),
				examples: ['communications_wifi_html_server_example.bly','communications_wifi_html_server_example1.bly'],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_WIFI,
				keys: ['LANG_WIFI_ESP8266_HTTP_SERVER','LANG_WIFI_ESP8266_DEF_SSID','LANG_WIFI_ESP8266_DEF_PASSWORD','LANG_WIFI_ESP8266_PORT','LANG_WIFI_ESP8266_HTML','LANG_WIFI_ESP8266_HTTP_SERVER_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_WIFI);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTTP_SERVER')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SSID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_SSID')).appendField(new Blockly.FieldImage("img/blocks/SSID.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PASSWORD').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEF_PASSWORD')).appendField(new Blockly.FieldImage("img/blocks/lock.svg", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PORT').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_PORT')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('HTML').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML')).appendField(new Blockly.FieldImage('img/blocks/html.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTTP_SERVER_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_iot_open_devicehub2 = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var project_id = Blockly.Arduino.valueToCode(this, 'PROJECT_ID', Blockly.Arduino.ORDER_NONE) ||'""';
				var device_id = Blockly.Arduino.valueToCode(this, 'DEVICE_UUID', Blockly.Arduino.ORDER_NONE) ||'""';
				var api_key = Blockly.Arduino.valueToCode(this, 'API_KEY', Blockly.Arduino.ORDER_NONE) ||'""';
				var code = '';
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['define_wifisecure'] = '#include <WiFiClientSecure.h>\n';
				//Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClient _client;\n';
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClientSecure _client;\n';
				Blockly.Arduino.definitions_['declare_var_project_id'] = 'String _project_id='+project_id+';\n';
				Blockly.Arduino.definitions_['declare_var_device_id'] = 'String _device_id='+device_id+';\n';
				Blockly.Arduino.definitions_['declare_var_api_key'] = 'String _api_key='+api_key+';\n';
				if (this.getFieldValue('CERT')==='TRUE')
				{
					//DEVICEHUB ROOT CERTIFICATE
					//https://holtstrom.com/michael/tools/hextopem.php
					//With Root Certificate 
					var cert_hex='3082034A30820232A003020102021044AFB080D6A327BA893039862EF8406B300D06092A864886F70D0101050500303F31243022060355040A131B4469676974616C205369676E617475726520547275737420436F2E311730150603550403130E44535420526F6F74204341205833301E170D3030303933303231313231395A170D3231303933303134303131355A303F31243022060355040A131B4469676974616C205369676E617475726520547275737420436F2E311730150603550403130E44535420526F6F7420434120583330820122300D06092A864886F70D01010105000382010F003082010A0282010100DFAFE99750088357B4CC6265F69082ECC7D32C6B30CA5BECD9C37DC740C118148BE0E83376492AE33F214993AC4E0EAF3E48CB65EEFCD3210F65D22AD9328F8CE5F777B0127BB595C089A3A9BAED732E7A0C063283A27E8A1430CD11A0E12A38B9790A31FD50BD8065DFB7516383C8E28861EA4B6181EC526BB9A2E24B1A289F48A39E0CDA098E3E172E1EDD20DF5BC62A8AAB2EBD70ADC50B1A25907472C57B6AAB34D63089FFE568137B540BC8D6AEEC5A9C921E3D64B38CC6DFBFC94170EC1672D526EC38553943D0FCFD185C40F197EBD59A9B8D1DBADA25B9C6D8DFC115023AABDA6EF13E2EF55C089C3CD68369E4109B192AB62957E3E53D9B9FF0025D0203010001A3423040300F0603551D130101FF040530030101FF300E0603551D0F0101FF040403020106301D0603551D0E04160414C4A7B1A47B2C71FADBE14B9075FFC41560858910300D06092A864886F70D01010505000382010100A31A2C9B17005CA91EEE2866373ABF83C73F4BC309A095205DE3D95944D23E0D3EBD8A4BA0741FCE10829C741A1D7E981ADDCB134BB32044E491E9CCFC7DA5DB6AE5FEE6FDE04EDDB7003AB57049AFF2E5EB02F1D1028B19CB943A5E48C4181E58195F1E025AF00CF1B1ADA9DC59868B6EE991F586CAFAB96633AA595BCEE2A7167347CB2BCC99B03748CFE3564BF5CF0F0C723287C6F044BB53726D43F526489A5267B758ABFE67767178DB0DA256141339243185A2A8025A3047E1DD5007BC02099000EB6463609B16BC88C912E6D27D918BF93D328D65B4E97CB15776EAC5B62839BF15651CC8F677966A0A8D770BD8910B048E07DB29B60AEE9D82353510';
					var cert='const unsigned char caCert[] PROGMEM = {';
					var cert_count = 0;
					while(cert_hex.length>0)
					{
						cert+='0x'+cert_hex.substring(0,2)+',';
						cert_hex=cert_hex.substring(2);
						cert_count++;
					}
					cert=cert.substring(0,cert.length-1);
					cert+='};\n';
					Blockly.Arduino.definitions_['declare_var_cert'] = cert;
					Blockly.Arduino.definitions_['declare_var_cert_count'] = 'const unsigned int caCertLen = '+cert_count+';\n';
					code+='_client.setCACert_P(caCert, caCertLen);\n';
				}
				code += '_client.connect("api.devicehub.net",443);\n';
				if (this.getFieldValue('CERT')==='TRUE')
					code +='_client.verifyCertChain("api.devicehub.net");\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_open_devicehub2 = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_open_devicehub2'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_DEVICEHUB_OPEN','LANG_WIFI_ESP8266_PROJECT_ID','LANG_WIFI_ESP8266_DEVICE_UUID','LANG_WIFI_ESP8266_API_KEY','LANG_WIFI_ESP8266_CERT','LANG_WIFI_IOT_DEVICEHUB_OPEN_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_OPEN')).appendField(new Blockly.FieldImage('img/blocks/devicehub.png', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('PROJECT_ID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_PROJECT_ID')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('DEVICE_UUID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_DEVICE_UUID')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('API_KEY').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_API_KEY')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_CERT')).appendField(new Blockly.FieldCheckbox('FALSE'),'CERT').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_OPEN_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_iot_devicehub_post2= function() {	
			    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var sensor_name = Blockly.Arduino.valueToCode(this, 'SENSOR_NAME', Blockly.Arduino.ORDER_NONE) ||'""';
				var sensor_value = Blockly.Arduino.valueToCode(this, 'SENSOR_VALUE', Blockly.Arduino.ORDER_NONE) ||'0';
				var code = 'DeviceHubSend('+sensor_name+','+sensor_value+');\n';
				Blockly.Arduino.definitions_['define_devicehub_post2']='void DeviceHubSend(String sensor_name,int sensor_value){\n  String _pubString = "{\\"value\\": " + String(sensor_value) + "}";\n  String _pubStringLength = String(_pubString.length(), DEC);\n  _client.println(String("POST /v2/project/")+_project_id+"/device/"+_device_id+"/sensor/"+sensor_name+"/data HTTP/1.1");\n  _client.println("Host: api.devicehub.net");\n  _client.print(String("X-ApiKey: ")+_api_key+"\\r\\n");\n  _client.println("Content-Type: application/json");\n  _client.println("Connection: keep-alive");\n  _client.print("Content-Length: ");\n  _client.println(_pubStringLength);\n  _client.println();\n  _client.print(_pubString);\n  _client.println();\n  delay(300);\n  while (_client.available()) {\n    String _line = _client.readStringUntil(\'\\r\');\n  }\n}\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_devicehub_post2 = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_devicehub_post2'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_DEVICEHUB_SEND','LANG_WIFI_ESP8266_SENSOR_NAME','LANG_WIFI_ESP8266_SENSOR_VALUE','LANG_WIFI_IOT_DEVICEHUB_SEND_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_SEND')).appendField(new Blockly.FieldImage('img/blocks/devicehub.png', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SENSOR_NAME').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_SENSOR_NAME')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('SENSOR_VALUE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_SENSOR_VALUE')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_SEND_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_iot_devicehub_get2= function() {	
			    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var actuator_name = Blockly.Arduino.valueToCode(this, 'ACTUATOR_NAME', Blockly.Arduino.ORDER_NONE);
				//console.log(actuator_name);
				var code = 'DeviceHubGet('+actuator_name+')';
				Blockly.Arduino.definitions_['define_devicehub_get2']='int DeviceHubGet(String actuator_name){\n  String _state;\n  _client.println(String("GET /v2/project/")+_project_id+"/device/"+_device_id+"/actuator/"+actuator_name+"/state?limit=1 HTTP/1.1");\n  _client.println("Host: api.devicehub.net");\n  _client.print(String("X-ApiKey: ")+_api_key+"\\r\\n");\n  _client.println("Content-Type: application/json");\n  _client.println("Connection: keep-alive");\n  _client.println();\n  delay(300);\n  while (_client.available()) {\n    String _line = _client.readStringUntil(\'\\r\');\n    int _state_pos = _line.indexOf("state");\n    if (_state_pos > 0){\n      _state = _line.substring(_state_pos+7,_line.length()-1);\n      break;\n    }\n  }\n  return _state.toInt();\n}\n';
				return [code,Blockly.Arduino.ORDER_ATOMIC];
			}
		
			Blockly.Blocks.communications_wifi_iot_devicehub_get2 = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_devicehub_get2'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_DEVICEHUB_GET','LANG_WIFI_ESP8266_ACTUATOR_NAME','LANG_WIFI_IOT_DEVICEHUB_GET_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_GET')).appendField(new Blockly.FieldImage('img/blocks/devicehub.png', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('ACTUATOR_NAME').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_ACTUATOR_NAME')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(false);
					this.setNextStatement(false);
					this.setOutput(true,Number);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_DEVICEHUB_GET_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_iot_setup_mail= function() {	
			    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var login = Blockly.Arduino.valueToCode(this, 'LOGIN', Blockly.Arduino.ORDER_NONE);
				var password = Blockly.Arduino.valueToCode(this, 'PASSWORD', Blockly.Arduino.ORDER_NONE);
				login=login.substr(1);
				login=login.substr(0,login.length-1);
				password=password.substr(1);
				password=password.substr(0,password.length-1);
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['define_wifisecure'] = '#include <WiFiClientSecure.h>\n';
				Blockly.Arduino.definitions_['declare_var_wifi'] = 'WiFiClientSecure _client;\n';
				
				Blockly.Arduino.definitions_['declare_var_GMail_login'] = 'const char* _GMailLogin = "'+btoa(login)+'";\n';
				Blockly.Arduino.definitions_['declare_var_GMail_password'] = 'const char* _GMailPassword = "'+btoa(password)+'";\n';
				Blockly.Arduino.definitions_['declare_var_GMail_from'] = 'const char* _GMailFrom = "'+login+'";\n';
				var code='';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_setup_mail = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_setup_mail'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_SETUP_MAIL','LANG_WIFI_IOT_SEND_MAIL_LOGIN','LANG_WIFI_IOT_SEND_MAIL_PASSWORD','LANG_WIFI_IOT_SETUP_MAIL_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SETUP_MAIL')).appendField(new Blockly.FieldImage('img/blocks/gmail-logo.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('LOGIN').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL_LOGIN')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('PASSWORD').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL_PASSWORD')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_SETUP_MAIL_TOOLTIP'));
				}
			};
			
			
			Blockly.Arduino.communications_wifi_iot_send_mail= function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var to = Blockly.Arduino.valueToCode(this, 'TO', Blockly.Arduino.ORDER_NONE);
				var subject = Blockly.Arduino.valueToCode(this, 'SUBJECT', Blockly.Arduino.ORDER_NONE);
				var message = Blockly.Arduino.valueToCode(this, 'MESSAGE', Blockly.Arduino.ORDER_NONE);
				var code = 'GMailSend('+to+','+subject+','+message+');\n';
				Blockly.Arduino.definitions_['define_GMailWaitSMTPResponse']='bool GMailWaitSMTPResponse(const String &resp)\n{\n  uint16_t timeOut=10000;\n  uint32_t ts = millis();\n  String _serverResponse;\n  while (!_client.available())\n  {\n    if(millis() > (ts + timeOut)) {\n      return false;\n    }\n  }\n  _serverResponse = _client.readStringUntil(\'\\n\');\n  if (resp && _serverResponse.indexOf(resp) == -1) return false;\n  return true;\n}\n';
				Blockly.Arduino.definitions_['define_GMailSend']='void GMailSend(const String &to, const String &subject, const String &message)\n{\n  if(!_client.connect("smtp.gmail.com",465)) {\n     return;\n  }\n  if(!GMailWaitSMTPResponse("220")){\n    return;\n  }\n  _client.println("HELO friend");\n  if(!GMailWaitSMTPResponse("250")){\n    return;\n  }\n  _client.println("AUTH LOGIN");\n  GMailWaitSMTPResponse("234");\n  _client.println(_GMailLogin);\n  GMailWaitSMTPResponse("234");\n  _client.println(_GMailPassword);\n  if (!GMailWaitSMTPResponse("235")) {\n    return;\n  }\n  String mailFrom = "MAIL FROM: <" + String(_GMailFrom) + \'>\';\n  _client.println(mailFrom);\n  GMailWaitSMTPResponse("");\n  String rcpt = "RCPT TO: <" + to + \'>\';\n  _client.println(rcpt);\n  GMailWaitSMTPResponse("");\n  _client.println("DATA");\n  if(!GMailWaitSMTPResponse("354")) {\n    return;\n  }\n  _client.println("From: <" + String(_GMailFrom) + \'>\');\n  _client.println("To: <" + to + \'>\');\n    _client.print("Subject: ");\n  _client.println(subject);\n    _client.println("Mime-Version: 1.0");\n  _client.println("Content-Type: text/html; charset=\\"UTF-8\\"");\n  _client.println("Content-Transfer-Encoding: 7bit");\n  _client.println();\n  String body = "<!DOCTYPE html><html lang=\\"en\\">" + message + "</html>";\n  _client.println(body);\n  _client.println(".");\n  if (!GMailWaitSMTPResponse("250")) {\n    return;\n  }\n  _client.println("QUIT");\n  if (!GMailWaitSMTPResponse("221")) {\n    return;\n  }\n}\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_send_mail = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_send_mail'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_SEND_MAIL','LANG_WIFI_IOT_SEND_MAIL_TO','LANG_WIFI_IOT_SEND_MAIL_SUBJECT','LANG_WIFI_IOT_SEND_MAIL_MESSAGE','LANG_WIFI_IOT_SEND_MAIL_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL')).appendField(new Blockly.FieldImage('img/blocks/gmail-logo.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('TO').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL_TO')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('SUBJECT').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL_SUBJECT')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('MESSAGE').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL_MESSAGE')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_SEND_MAIL_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.communications_wifi_iot_gsheets_setup = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var code = '';
				var gscripts = Blockly.Arduino.valueToCode(this, 'SCRIPTS_ID', Blockly.Arduino.ORDER_NONE);
				gscripts=gscripts.substr(1,gscripts.length-2);
				Blockly.Arduino.definitions_['define_wifi'] = JST['communications_wifi_def_definitions2']({});
				Blockly.Arduino.definitions_['define_httpsredirect'] = '#include <HTTPSRedirect.h>\n';
				Blockly.Arduino.definitions_['declare_var_wifi_httpsredirect'] = 'HTTPSRedirect _clientHTTPS;\n';
				Blockly.Arduino.definitions_['declare_var_gscripts_url'] = 'const char *url = "/macros/s/'+gscripts+'/exec";\n';
				Blockly.Arduino.definitions_['declare_var_host'] = 'const char* host = "script.google.com";\n';
				code ='_clientHTTPS.setPrintResponseBody(false);\n  _clientHTTPS.setContentTypeHeader("application/json");\n  if (!_clientHTTPS.connect("accounts.google.com", 443)) {\n    return;\n  }\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_gsheets_setup = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266','communications'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_gsheets_setup'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_GSHEETS_SETUP','LANG_WIFI_IOT_GSCRIPTS_ID','LANG_WIFI_ESP8266_CERT','LANG_WIFI_IOT_GSHEETS_SETUP_TOOPTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_SETUP')).appendField(new Blockly.FieldImage('img/blocks/google-sheets.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SCRIPTS_ID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSCRIPTS_ID')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_CERT')).appendField(new Blockly.FieldCheckbox('FALSE'),'CERT').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_SETUP_TOOPTIP'));
				}
			};
			
			/*Blockly.Arduino.communications_wifi_iot_gsheets_update= function() {	
				var code='';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_gsheets_update = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_gsheets_update'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_GSHEETS_UPDATE','LANG_WIFI_IOT_GSHEETS_ID','LANG_WIFI_IOT_GSHEETS_ACCESS_TOKEN','LANG_WIFI_IOT_GSHEETS_RANGE','LANG_WIFI_IOT_GSHEETS_VALUE','LANG_WIFI_IOT_GSHEETS_UPDATE_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_UPDATE')).appendField(new Blockly.FieldImage('img/blocks/google-sheets.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('ID').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_ID')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('ACCESS_TOKEN').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_ACCESS_TOKEN')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('RANGE').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_RANGE')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('VALUE').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_VALUE')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_UPDATE_TOOLTIP'));
				}
			};*/
			
			Blockly.Arduino.communications_wifi_iot_gsheets_append= function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var sheetname = Blockly.Arduino.valueToCode(this, 'SHEETNAME', Blockly.Arduino.ORDER_NONE);
				var code='';
				var input = this.getInputTargetBlock('VALUES');
				if (input!==null)
				{
					if (input.type==='math_1DArray_constructor')
					{
						if (input.itemCount_>0)
						{
							code='{\n  float data['+input.itemCount_+']={'+Blockly.Arduino.valueToCode(input,'ITEM0', Blockly.Arduino.ORDER_NONE);
							for (var i=1;i<input.itemCount_;i++)
							{
								code+=','+Blockly.Arduino.valueToCode(input,'ITEM'+i, Blockly.Arduino.ORDER_NONE);
							}
							code+='};\n'
							code+='  GSheets_appendData('+sheetname+',data,'+input.itemCount_+');\n}\n';
						}
					}
					else if (input.type==='variables_get')
					{
						var value = Blockly.Arduino.valueToCode(this, 'VALUES', Blockly.Arduino.ORDER_NONE);
						if (RoboBlocks.variables[value][2]==='variable')
						  code+='GSheets_appendData('+sheetname+',&'+value+',0);\n';
					    else if (RoboBlocks.variables[value][2]==='1DArray')
						  code+='GSheets_appendData('+sheetname+','+value+',0);\n';
					}
					else
					{
						var value = Blockly.Arduino.valueToCode(this, 'VALUES', Blockly.Arduino.ORDER_NONE);
						code+='{\n  float data='+value+';\n';
						code+='  GSheets_appendData('+sheetname+',&data,0);\n}\n';
					}
				}
				Blockly.Arduino.definitions_['define_GSheets_appendData']='void GSheets_appendData(String sheetname, const float data[], int dataLength){\n  const char* payload_close = "\\"}";\n  String payload = "{\\"command\\": \\"appendRow\\", \\"sheet_name\\": ";\n  payload+="\""+sheetname+"\", \\"values\\": \\"";\n  payload+=data[0];\n  for (int i=1;i<dataLength;i++)\n    payload+= "," + String(data[i]);\n  payload+=payload_close;\n  _clientHTTPS.POST(url, host, payload,false);\n}\n';
				return code;
			}
		
			Blockly.Blocks.communications_wifi_iot_gsheets_append = {
				category: Facilino.locales.getKey('LANG_CATEGORY_COMMUNICATION'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_IOT'),
				tags: ['wifi','esp8266'],
				helpUrl: Facilino.getHelpUrl('communications_wifi_iot_gsheets_append'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_COMMUNICATION,
				colour: Facilino.LANG_COLOUR_COMMUNICATION_IOT,
				keys: ['LANG_WIFI_IOT_GSHEETS_APPEND','LANG_WIFI_IOT_GSHEETS_SHEETNAME','LANG_WIFI_IOT_GSHEETS_VALUES','LANG_WIFI_IOT_GSHEETS_APPEND_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_COMMUNICATION_IOT);
					this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_APPEND')).appendField(new Blockly.FieldImage('img/blocks/google-sheets.svg', 20*options.zoom, 20*options.zoom));
					this.appendValueInput('SHEETNAME').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_SHEETNAME')).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('VALUES').appendField(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_VALUES')).setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_WIFI_IOT_GSHEETS_APPEND_TOOLTIP'));
				}
			};
		}

    Blockly.Arduino.dyor_us = function() {
            var echo_pin = Blockly.Arduino.valueToCode(this, 'RED PIN', Blockly.Arduino.ORDER_ATOMIC);
            var trigger_pin = Blockly.Arduino.valueToCode(this, 'BLUE PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a = Facilino.findPinMode(echo_pin);
            code += a['code'];
            echo_pin = a['pin'];

            a = Facilino.findPinMode(trigger_pin);
            code += a['code'];
            trigger_pin = a['pin'];
			if ((Facilino.locales.processor==='ArduinoNano') || (Facilino.locales.processor==='ArduinoUno')){
				Blockly.Arduino.definitions_['include_us'] = JST['dyor_us_definitions_include']({});
				Blockly.Arduino.definitions_['define_us_pulseIn'] = JST['dyor_us_definitions_pulseIn']({});
			}
            Blockly.Arduino.definitions_['define_us_init'] = JST['dyor_us_definitions_us_init']({});
            Blockly.Arduino.definitions_['define_us_distance'] = JST['dyor_us_definitions_distance']({});
            if (Facilino.isVariable(echo_pin)) {
                code += JST['dyor_us_setups_echo']({
                    'echo_pin': echo_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_us_' + echo_pin + trigger_pin] = JST['dyor_us_setups_echo']({
                    'echo_pin': echo_pin
                });
            }
            if (Facilino.isVariable(trigger_pin)) {
                code += JST['dyor_us_setups_trigger']({
                    'trigger_pin': trigger_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_us_2' + trigger_pin + echo_pin] = JST['dyor_us_setups_trigger']({
                    'trigger_pin': trigger_pin
                });
            }
            code += JST['dyor_us']({
                'trigger_pin': trigger_pin,
                'echo_pin': echo_pin
            });
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

        Blockly.Blocks.dyor_us = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DISTANCE'),
			//subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ULTRASOUND'),
            tags: ['us','distance'],
            helpUrl: Facilino.getHelpUrl('dyor_us'),
			examples: ['dyor_us_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DISTANCE,
			colour: Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND,
			keys: ['LANG_US','LANG_US_ECHO_PIN','LANG_US_TRIGGER_PIN','LANG_US_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_US')).appendField(new Blockly.FieldImage('img/blocks/hc_sr04.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('RED PIN').appendField(Facilino.locales.getKey('LANG_US_ECHO_PIN')).appendField(new Blockly.FieldImage('img/blocks/hearing.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('BLUE PIN').appendField(Facilino.locales.getKey('LANG_US_TRIGGER_PIN')).appendField(new Blockly.FieldImage('img/blocks/speaking.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_US_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_us_collision = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var echo_pin = Blockly.Arduino.valueToCode(this, 'RED PIN', Blockly.Arduino.ORDER_ATOMIC);
            var trigger_pin = Blockly.Arduino.valueToCode(this, 'BLUE PIN', Blockly.Arduino.ORDER_ATOMIC);
        var distance = Blockly.Arduino.valueToCode(this, 'DISTANCE', Blockly.Arduino.ORDER_ATOMIC);
        var collision = Blockly.Arduino.statementToCode(this,'COLLISION') || '';
            var not_collision = Blockly.Arduino.statementToCode(this,'NOT_COLLISION') || '';
        var code = '';
            var a = Facilino.findPinMode(echo_pin);
            code += a['code'];
            echo_pin = a['pin'];

            a = Facilino.findPinMode(trigger_pin);
            code += a['code'];
            trigger_pin = a['pin'];
			if ((Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='ArduinoUno')){
				Blockly.Arduino.definitions_['include_us'] = JST['dyor_us_definitions_include']({});
				Blockly.Arduino.definitions_['define_us_pulseIn'] = JST['dyor_us_definitions_pulseIn']({});
			}
            Blockly.Arduino.definitions_['define_us_init'] = JST['dyor_us_definitions_us_init']({});
            Blockly.Arduino.definitions_['define_us_distance'] = JST['dyor_us_definitions_distance']({});
            if (Facilino.isVariable(echo_pin)) {
                code += JST['dyor_us_setups_echo']({
                    'echo_pin': echo_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_us_' + echo_pin + trigger_pin] = JST['dyor_us_setups_echo']({
                    'echo_pin': echo_pin
                });
            }
            if (Facilino.isVariable(trigger_pin)) {
                code += JST['dyor_us_setups_trigger']({
                    'trigger_pin': trigger_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_us_2' + trigger_pin + echo_pin] = JST['dyor_us_setups_trigger']({
                    'trigger_pin': trigger_pin
                });
            }
            code += JST['dyor_us_collision']({
                'trigger_pin': trigger_pin,
                'echo_pin': echo_pin,
        'distance': distance,
        'collision': collision,
        'not_collision': not_collision
            });
            return code;
        };

    Blockly.Blocks.dyor_us_collision = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DISTANCE'),
			//subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ULTRASOUND'),
            tags: ['us','distance'],
            helpUrl: Facilino.getHelpUrl('dyor_us_collision'),
			examples: ['dyor_us_collision_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DISTANCE,
			colour: Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND,
			keys: ['LANG_US_DETECT_COLLISION','LANG_US_ECHO_PIN','LANG_US_TRIGGER_PIN','LANG_US_DISTANCE','LANG_US_COLLISION','LANG_US_NOT_COLLISION','LANG_US_COLLISION_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_US_DETECT_COLLISION')).appendField(new Blockly.FieldImage('img/blocks/hc_sr04.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('RED PIN').appendField(Facilino.locales.getKey('LANG_US_ECHO_PIN')).appendField(new Blockly.FieldImage('img/blocks/hearing.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('BLUE PIN').appendField(Facilino.locales.getKey('LANG_US_TRIGGER_PIN')).appendField(new Blockly.FieldImage('img/blocks/speaking.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('DISTANCE').appendField(Facilino.locales.getKey('LANG_US_DISTANCE')).appendField(new Blockly.FieldImage('img/blocks/distance.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('COLLISION').appendField(Facilino.locales.getKey('LANG_US_COLLISION')).appendField(new Blockly.FieldImage('img/blocks/rear-end-collision.svg',24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
        this.appendStatementInput('NOT_COLLISION').appendField(Facilino.locales.getKey('LANG_US_NOT_COLLISION')).appendField(new Blockly.FieldImage('img/blocks/no-collision.svg',24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
        this.setInputsInline(false);
                //this.setOutput(true, Number);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_US_COLLISION_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_us_keep_distance = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
            var distance = Blockly.Arduino.valueToCode(this, 'Distance', Blockly.Arduino.ORDER_ATOMIC);
            var ref_distance = Blockly.Arduino.valueToCode(this, 'RefDistance', Blockly.Arduino.ORDER_ATOMIC);
        var gain = Blockly.Arduino.valueToCode(this,'Gain', Blockly.Arduino.ORDER_ATOMIC);
            var code = '(int)((((float)'+gain+')/100.0)*(('+distance+')-('+ref_distance+')))';

            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

        Blockly.Blocks.dyor_us_keep_distance = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DISTANCE'),
			//subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ULTRASOUND'),
            tags: ['us','distance'],
            helpUrl: Facilino.getHelpUrl('dyor_us_keep_distance'),
			examples: ['dyor_us_keep_distance_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DISTANCE,
			colour: Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND,
			keys: ['LANG_US_DISTANCE','LANG_US_REF_DISTANCE','LANG_LINE_FOLLOWING_GAIN','LANG_US_KEEPDISTANCE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND);
                this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/vertical-resize.svg",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_US_KEEP')).appendField(new Blockly.FieldImage('img/blocks/hc_sr04.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('Distance').appendField(Facilino.locales.getKey('LANG_US_DISTANCE')).appendField(new Blockly.FieldImage('img/blocks/distance.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('RefDistance').appendField(Facilino.locales.getKey('LANG_US_REF_DISTANCE')).appendField(new Blockly.FieldImage('img/blocks/distance.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('Gain').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_GAIN')).appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_US_KEEPDISTANCE_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_us_regulate_speed = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
            var distance = Blockly.Arduino.valueToCode(this, 'Distance', Blockly.Arduino.ORDER_ATOMIC);
            var ref_distance = Blockly.Arduino.valueToCode(this, 'RefDistance', Blockly.Arduino.ORDER_ATOMIC);
        var gain = Blockly.Arduino.valueToCode(this,'Gain', Blockly.Arduino.ORDER_ATOMIC);
            var code = '((('+gain+')*('+distance+')/100))';

            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

        Blockly.Blocks.dyor_us_regulate_speed = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DISTANCE'),
			//subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ULTRASOUND'),
            tags: ['us'],
            helpUrl: Facilino.getHelpUrl('dyor_us_regulate_speed'),
			examples: ['dyor_us_regulate_speed_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DISTANCE,
			colour: Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND,
			keys: ['LANG_US_DISTANCE','LANG_LINE_FOLLOWING_GAIN','LANG_US_SPEED_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_DISTANCE_ULTRASOUND);
                this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/vertical-resize.svg",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_US_REGULATE')).appendField(new Blockly.FieldImage('img/blocks/hc_sr04.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('Distance').appendField(Facilino.locales.getKey('LANG_US_DISTANCE')).appendField(new Blockly.FieldImage('img/blocks/distance.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('Gain').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_GAIN')).appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_US_SPEED_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_generic_expression1 = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
		var cs_pin = Blockly.Arduino.valueToCode(this, 'CS_PIN', Blockly.Arduino.ORDER_NONE);
		var din_pin = Blockly.Arduino.valueToCode(this, 'DIN_PIN', Blockly.Arduino.ORDER_NONE);
		var clk_pin = Blockly.Arduino.valueToCode(this, 'CLK_PIN', Blockly.Arduino.ORDER_NONE);
		var expr_str = Blockly.Arduino.valueToCode(this, 'EXPRESSION', Blockly.Arduino.ORDER_NONE);
		var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
	
		var code = '';
		var a = Facilino.findPinMode(cs_pin);
		code += a['code'];
		cs_pin = a['pin'];

		a = Facilino.findPinMode(din_pin);
		code += a['code'];
		din_pin = a['pin'];

		a = Facilino.findPinMode(clk_pin);
		code += a['code'];
		clk_pin = a['pin'];

		Blockly.Arduino.definitions_['define_LEDMatrix_init'] = JST['dyor_definitions_LEDMatrix_init']({});
		Blockly.Arduino.definitions_['define_writeRow'] = JST['dyor_definitions_writeRow']({});
		Blockly.Arduino.definitions_['define_maxAll'] = JST['dyor_definitions_maxAll']({});
		Blockly.Arduino.definitions_['define_putByte'] = JST['dyor_definitions_putByte']({});
		Blockly.Arduino.definitions_['define_expression'] = JST['dyor_definitions_expression']({});
		if (Facilino.isVariable(cs_pin)) {
			code += JST['LED_matrix_setups_cs']({
				'cs_pin': cs_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_cs_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_cs']({
				'cs_pin': cs_pin
			});
		}
		if (Facilino.isVariable(din_pin)) {
			code += JST['LED_matrix_setups_din']({
				'din_pin': din_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_din_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_din']({
				'din_pin': din_pin
			});
		}
		if (Facilino.isVariable(clk_pin)) {
			code += JST['LED_matrix_setups_clk']({
				'clk_pin': clk_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_clk_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_clk']({
				'clk_pin': clk_pin
			});
		}
		if (Facilino.isVariable(cs_pin)||Facilino.isVariable(din_pin)||Facilino.isVariable(clk_pin)){
		code += JST['LED_matrix_setups_LEDMatrix']({
				'cs_pin' : cs_pin,
				'din_pin' : din_pin,
				'clk_pin': clk_pin
			});
		}
		else
		{
			Blockly.Arduino.setups_['setup_LEDMatrix_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_LEDMatrix']({
					'cs_pin' : cs_pin,
					'din_pin' : din_pin,
					'clk_pin': clk_pin
				});
		}
		var expr ='';
		var row = expr_str.split(',');
		var col = [];
		if (dropdown_configuration=='V1')
		{
			expr = row[7] + ',' + row[6] + ','+ row[5] + ','+ row[4] + ','+ row[3] + ','+ row[2] + ','+ row[1] + ','+ row[0];
		}
		else if (dropdown_configuration=='H')
		{
			col[0] = ((row[0]%2)<1? 0 : 128) + ((row[1]%2)<1? 0 : 64) + ((row[2]%2)<1? 0 : 32) + ((row[3]%2)<1? 0 : 16) + ((row[4]%2)<1? 0 : 8) + ((row[5]%2)<1? 0 : 4) + ((row[6]%2)<1? 0 : 2) + ((row[7]%2)<1? 0 : 1);
			col[1] = ((row[0]%4)<2? 0 : 128) + ((row[1]%4)<2? 0 : 64) + ((row[2]%4)<2? 0 : 32) + ((row[3]%4)<2? 0 : 16) + ((row[4]%4)<2? 0 : 8) + ((row[5]%4)<2? 0 : 4) + ((row[6]%4)<2? 0 : 2) + ((row[7]%4)<2? 0 : 1);
			col[2] = ((row[0]%8)<4? 0 : 128) + ((row[1]%8)<4? 0 : 64) + ((row[2]%8)<4? 0 : 32) + ((row[3]%8)<4? 0 : 16) + ((row[4]%8)<4? 0 : 8) + ((row[5]%8)<4? 0 : 4) + ((row[6]%8)<4? 0 : 2) + ((row[7]%8)<4? 0 : 1);
			col[3] = ((row[0]%16)<8? 0 : 128) + ((row[1]%16)<8? 0 : 64) + ((row[2]%16)<8? 0 : 32) + ((row[3]%16)<8? 0 : 16) + ((row[4]%16)<8? 0 : 8) + ((row[5]%16)<8? 0 : 4) + ((row[6]%16)<8? 0 : 2) + ((row[7]%16)<8? 0 : 1);
			col[4] = ((row[0]%32)<16? 0 : 128) + ((row[1]%32)<16? 0 : 64) + ((row[2]%32)<16? 0 : 32) + ((row[3]%32)<16? 0 : 16) + ((row[4]%32)<16? 0 : 8) + ((row[5]%32)<16? 0 : 4) + ((row[6]%32)<16? 0 : 2) + ((row[7]%32)<16? 0 : 1);
			col[5] = ((row[0]%64)<32? 0 : 128) + ((row[1]%64)<32? 0 : 64) + ((row[2]%64)<32? 0 : 32) + ((row[3]%64)<32? 0 : 16) + ((row[4]%64)<32? 0 : 8) + ((row[5]%64)<32? 0 : 4) + ((row[6]%64)<32? 0 : 2) + ((row[7]%64)<32? 0 : 1);
			col[6] = ((row[0]%128)<64? 0 : 128) + ((row[1]%128)<64? 0 : 64) + ((row[2]%128)<64? 0 : 32) + ((row[3]%128)<64? 0 : 16) + ((row[4]%128)<64? 0 : 8) + ((row[5]%128)<64? 0 : 4) + ((row[6]%128)<64? 0 : 2) + ((row[7]%128)<64? 0 : 1);
			col[7] = (row[0]<128? 0 : 128) + (row[1]<128? 0 : 64) + (row[2]<128? 0 : 32) + (row[3]<128? 0 : 16) + (row[4]<128? 0 : 8) + (row[5]<128? 0 : 4) + (row[6]<128? 0 : 2) + (row[7]<128? 0 : 1);
			expr = col[7] + ',' + col[6] + ','+ col[5] + ','+ col[4] + ','+ col[3] + ','+ col[2] + ','+ col[1] + ','+ col[0];
		}
		else if (dropdown_configuration=='V') {
			row[0] = ((row[0]%2)<1? 0 : 128) + ((row[0]%4)<2? 0 : 64) + ((row[0]%8)<4? 0 : 32) + ((row[0]%16)<8? 0 : 16) + ((row[0]%32)<16? 0 : 8) + ((row[0]%64)<32? 0 : 4) + ((row[0]%128)<64? 0 : 2) + (row[0]<128? 0 : 1);
			row[1] = ((row[1]%2)<1? 0 : 128) + ((row[1]%4)<2? 0 : 64) + ((row[1]%8)<4? 0 : 32) + ((row[1]%16)<8? 0 : 16) + ((row[1]%32)<16? 0 : 8) + ((row[1]%64)<32? 0 : 4) + ((row[1]%128)<64? 0 : 2) + (row[1]<128? 0 : 1);
			row[2] = ((row[2]%2)<1? 0 : 128) + ((row[2]%4)<2? 0 : 64) + ((row[2]%8)<4? 0 : 32) + ((row[2]%16)<8? 0 : 16) + ((row[2]%32)<16? 0 : 8) + ((row[2]%64)<32? 0 : 4) + ((row[2]%128)<64? 0 : 2) + (row[2]<128? 0 : 1);
			row[3] = ((row[3]%2)<1? 0 : 128) + ((row[3]%4)<2? 0 : 64) + ((row[3]%8)<4? 0 : 32) + ((row[3]%16)<8? 0 : 16) + ((row[3]%32)<16? 0 : 8) + ((row[3]%64)<32? 0 : 4) + ((row[3]%128)<64? 0 : 2) + (row[3]<128? 0 : 1);
			row[4] = ((row[4]%2)<1? 0 : 128) + ((row[4]%4)<2? 0 : 64) + ((row[4]%8)<4? 0 : 32) + ((row[4]%16)<8? 0 : 16) + ((row[4]%32)<16? 0 : 8) + ((row[4]%64)<32? 0 : 4) + ((row[4]%128)<64? 0 : 2) + (row[4]<128? 0 : 1);
			row[5] = ((row[5]%2)<1? 0 : 128) + ((row[5]%4)<2? 0 : 64) + ((row[5]%8)<4? 0 : 32) + ((row[5]%16)<8? 0 : 16) + ((row[5]%32)<16? 0 : 8) + ((row[5]%64)<32? 0 : 4) + ((row[5]%128)<64? 0 : 2) + (row[5]<128? 0 : 1);
			row[6] = ((row[6]%2)<1? 0 : 128) + ((row[6]%4)<2? 0 : 64) + ((row[6]%8)<4? 0 : 32) + ((row[6]%16)<8? 0 : 16) + ((row[6]%32)<16? 0 : 8) + ((row[6]%64)<32? 0 : 4) + ((row[6]%128)<64? 0 : 2) + (row[6]<128? 0 : 1);
			row[7] = ((row[7]%2)<1? 0 : 128) + ((row[7]%4)<2? 0 : 64) + ((row[7]%8)<4? 0 : 32) + ((row[7]%16)<8? 0 : 16) + ((row[7]%32)<16? 0 : 8) + ((row[7]%64)<32? 0 : 4) + ((row[7]%128)<64? 0 : 2) + (row[7]<128? 0 : 1);
			expr = row[0] + ',' + row[1] + ','+ row[2] + ','+ row[3] + ','+ row[4] + ','+ row[5] + ','+ row[6] + ','+ row[7];
		}
		else if (dropdown_configuration=='H1')
		{
			col[0] = ((row[0]%2)<1? 0 : 1) + ((row[1]%2)<1? 0 : 2) + ((row[2]%2)<1? 0 : 4) + ((row[3]%2)<1? 0 : 8) + ((row[4]%2)<1? 0 : 16) + ((row[5]%2)<1? 0 : 32) + ((row[6]%2)<1? 0 : 64) + ((row[7]%2)<1? 0 : 128);
			col[1] = ((row[0]%4)<2? 0 : 1) + ((row[1]%4)<2? 0 : 2) + ((row[2]%4)<2? 0 : 4) + ((row[3]%4)<2? 0 : 8) + ((row[4]%4)<2? 0 : 16) + ((row[5]%4)<2? 0 : 32) + ((row[6]%4)<2? 0 : 64) + ((row[7]%4)<2? 0 : 128);
			col[2] = ((row[0]%8)<4? 0 : 1) + ((row[1]%8)<4? 0 : 2) + ((row[2]%8)<4? 0 : 4) + ((row[3]%8)<4? 0 : 8) + ((row[4]%8)<4? 0 : 16) + ((row[5]%8)<4? 0 : 32) + ((row[6]%8)<4? 0 : 64) + ((row[7]%8)<4? 0 : 128);
			col[3] = ((row[0]%16)<8? 0 : 1) + ((row[1]%16)<8? 0 : 2) + ((row[2]%16)<8? 0 : 4) + ((row[3]%16)<8? 0 : 8) + ((row[4]%16)<8? 0 : 16) + ((row[5]%16)<8? 0 : 32) + ((row[6]%16)<8? 0 : 64) + ((row[7]%16)<8? 0 : 128);
			col[4] = ((row[0]%32)<16? 0 : 1) + ((row[1]%32)<16? 0 : 2) + ((row[2]%32)<16? 0 : 4) + ((row[3]%32)<16? 0 : 8) + ((row[4]%32)<16? 0 : 16) + ((row[5]%32)<16? 0 : 32) + ((row[6]%32)<16? 0 : 64) + ((row[7]%32)<16? 0 : 128);
			col[5] = ((row[0]%64)<32? 0 : 1) + ((row[1]%64)<32? 0 : 2) + ((row[2]%64)<32? 0 : 4) + ((row[3]%64)<32? 0 : 8) + ((row[4]%64)<32? 0 : 16) + ((row[5]%64)<32? 0 : 32) + ((row[6]%64)<32? 0 : 64) + ((row[7]%64)<32? 0 : 128);
			col[6] = ((row[0]%128)<64? 0 : 1) + ((row[1]%128)<64? 0 : 2) + ((row[2]%128)<64? 0 : 4) + ((row[3]%128)<64? 0 : 8) + ((row[4]%128)<64? 0 : 16) + ((row[5]%128)<64? 0 : 32) + ((row[6]%128)<64? 0 : 64) + ((row[7]%128)<64? 0 : 128);
			col[7] = (row[0]<128? 0 : 1) + (row[1]<128? 0 : 2) + (row[2]<128? 0 : 4) + (row[3]<128? 0 : 8) + (row[4]<128? 0 : 16) + (row[5]<128? 0 : 32) + (row[6]<128? 0 : 64) + (row[7]<128? 0 : 128);
			expr = col[0] + ',' + col[1] + ','+ col[2] + ','+ col[3] + ','+ col[4] + ','+ col[5] + ','+ col[6] + ','+ col[7];
		}

		code += 'expression('+
			((__t = (cs_pin)) == null ? '' : __t) +
					',' +
					((__t = (din_pin)) == null ? '' : __t) +
			',' +
			((__t = (clk_pin)) == null ? '' : __t) +
			',' + expr + ');\n';
		return code;
		};

    Blockly.Blocks.dyor_generic_expression1 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_generic_expression1'),
			examples: ['dyor_generic_expression_example.bly','dyor_generic_expression_icons_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX','LANG_LED_MATRIX_CS_PIN','LANG_LED_MATRIX_DIN_PIN','LANG_LED_MATRIX_CLK_PIN','LANG_LED_MATRIX_VERTICAL','LANG_LED_MATRIX_HORIZONTAL','LANG_LED_MATRIX_VERTICAL_180','LANG_LED_MATRIX_HORIZONTAL_180','LANG_LED_MATRIX_GENERIC_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LED_MATRIX')).appendField(new Blockly.FieldImage('img/blocks/LED_matrix.svg', 57*options.zoom, 33*options.zoom));
                this.appendValueInput('CS_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('DIN_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_DIN_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('CLK_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CLK_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL'), 'V'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL'), 'H'] ,
			[Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL_180'), 'V1'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL_180'), 'H1'] 
                ]), "CONFIGURATION").setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('EXPRESSION').appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 24*options.zoom, 24*options.zoom, "*")).setCheck('Expression').setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_GENERIC_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_predef_expression1 = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            //var cs_pin = Blockly.Arduino.valueToCode(this, 'CS_PIN', Blockly.Arduino.ORDER_ATOMIC);
            //var din_pin = Blockly.Arduino.valueToCode(this, 'DIN_PIN', Blockly.Arduino.ORDER_ATOMIC);
			//var clk_pin = Blockly.Arduino.valueToCode(this, 'CLK_PIN', Blockly.Arduino.ORDER_ATOMIC);
			//var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
			var dropdown_expr = this.getFieldValue('EXPRESSION');
            var code = '';
			if (dropdown_expr==='1')
				code = '64,34,36,8,8,36,34,64';
            else if (dropdown_expr==='2')
				code = '48,24,12,12,12,12,24,48';
            else if (dropdown_expr==='3')
				code = '12,24,48,48,48,48,24,12';
            else if (dropdown_expr==='4')
				code = '48,120,124,62,62,124,120,48';
            else if (dropdown_expr==='5')
				code = '0,0,0,24,24,0,0,0';
			else if (dropdown_expr==='6')
				code = '60,102,195,153,153,195,102,60';
			else if (dropdown_expr==='7')
				code = '0,44,43,254,170,168,128,64';
			else if (dropdown_expr==='8')
				code = '32,96,48,248,248,48,96,32';
			else if (dropdown_expr==='9')
				code = '124,242,18,45,45,18,242,124';
			else if (dropdown_expr==='10')
				code = '60,78,207,255,255,255,86,20';
			else if (dropdown_expr==='11')
				code = '2,7,6,8,16,32,64,128';
			else if (dropdown_expr==='12')
				code = '112,60,30,56,56,30,60,112';
			else if (dropdown_expr==='13')
				code = '24,27,62,252,252,62,27,24';
			else if (dropdown_expr==='14')
				code = '224,231,230,30,30,230,231,224';
			else if (dropdown_expr==='15')
				code = '19,31,14,30,59,112,224,192';
			else if (dropdown_expr==='16')
				code = '24,60,66,153,153,66,60,24';
			else if (dropdown_expr==='17')
				code = '21,213,46,255,255,46,213,21';
			else if (dropdown_expr==='18')
				code = '28,42,73,85,73,42,28,0';
            return [code,Blockly.Arduino.ORDER_ATOMIC];
        };
    
        Blockly.Blocks.dyor_predef_expression1 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_predef_expression1'),
			examples: ['dyor_predef_expression_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_ANGRY','LANG_LED_MATRIX_HAPPY','LANG_LED_MATRIX_SAD','LANG_LED_MATRIX_HEART','LANG_LED_MATRIX_STUNNED','LANG_LED_MATRIX_DRAGONBALL','LANG_LED_MATRIX_TURTLE_SCHOOL','LANG_LED_MATRIX_BAT','LANG_LED_MATRIX_MASK','LANG_LED_MATRIX_DEATH_STAR','LANG_LED_MATRIX_LIGHT_SABER','LANG_LED_MATRIX_WONDER_WOMAN','LANG_LED_MATRIX_STAR','LANG_LED_MATRIX_CREEPER','LANG_LED_MATRIX_SWORD','LANG_LED_MATRIX_MINION_EYE','LANG_LED_MATRIX_POKEBALL','LANG_LED_MATRIX_SPIDER','LANG_LED_MATRIX_PREDEF_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				var expr = new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_LED_MATRIX_ANGRY') || 'ANGRY', '1'],[Facilino.locales.getKey('LANG_LED_MATRIX_HAPPY') || 'HAPPY', '2'],[Facilino.locales.getKey('LANG_LED_MATRIX_SAD') || 'SAD', '3'],[Facilino.locales.getKey('LANG_LED_MATRIX_HEART') || 'HEART', '4'],[Facilino.locales.getKey('LANG_LED_MATRIX_STUNNED') || 'STUNNED', '5'],[Facilino.locales.getKey('LANG_LED_MATRIX_DRAGONBALL') || 'Dragonball', '6'],[Facilino.locales.getKey('LANG_LED_MATRIX_TURTLE_SCHOOL') || 'Turtle School', '7'],[Facilino.locales.getKey('LANG_LED_MATRIX_BAT') || 'Bat', '8'],[Facilino.locales.getKey('LANG_LED_MATRIX_MASK') || 'BatMask', '9'],[Facilino.locales.getKey('LANG_LED_MATRIX_DEATH_STAR') || 'Death Star', '10'],[Facilino.locales.getKey('LANG_LED_MATRIX_LIGHT_SABER') || 'Light saber', '11'],[Facilino.locales.getKey('LANG_LED_MATRIX_WONDER_WOMAN') || 'Wonder Woman', '12'],[Facilino.locales.getKey('LANG_LED_MATRIX_STAR') || 'Star', '13'],[Facilino.locales.getKey('LANG_LED_MATRIX_CREEPER') || 'Creeper', '14'],[Facilino.locales.getKey('LANG_LED_MATRIX_SWORD') || 'Sword', '15'],[Facilino.locales.getKey('LANG_LED_MATRIX_MINION_EYE') || 'Minion Eye', '16'],[Facilino.locales.getKey('LANG_LED_MATRIX_SPIDER') || 'Spider', '17'],[Facilino.locales.getKey('LANG_LED_MATRIX_POKEBALL') || 'Pokeball', '18']]);
                this.appendDummyInput('EXPR_INPUT').appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 24*options.zoom, 24*options.zoom, "*")).appendField(expr, 'EXPRESSION').appendField(new Blockly.FieldImage('img/blocks/angry.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
				this.checkExpr();
				this.last_expr = this.getFieldValue('EXPRESSION');
        //this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/angry.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/happy.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/dissapointment.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/love.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/shocked.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);        
                this.setInputsInline(false);
				this.setOutput(true,'Expression');
				this.setPreviousStatement(false);
				this.setNextStatement(false);
                this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_PREDEF_TOOLTIP'));
            },
        checkExpr: function() {
        var _expr = this.getFieldValue('EXPRESSION');
                if ( _expr === '1') {
                    this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/angry.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                } else if ( _expr === '2') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/happy.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                } else if ( _expr === '3') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/dissapointment.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '4') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/love.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '5') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/shocked.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '6') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/Dragonball.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '7') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/Turtle_School_Symbol.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '8') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/batman-logo.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '9') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/batman-mask.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '10') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/death-star.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '11') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/light-saber.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '12') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/wonder-woman.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '13') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/star.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '14') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/minecraft.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '15') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/sword.png', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '16') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/minion.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '17') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/spiderman.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
				else if ( _expr === '18') {
					this.getInput('EXPR_INPUT').removeField('EXPR');
					this.getInput('EXPR_INPUT').appendField(new Blockly.FieldImage('img/blocks/pokeball.svg', 20*options.zoom, 20*options.zoom),'EXPR').setAlign(Blockly.ALIGN_RIGHT);
                }
            },
            onchange: function() {
                if (this.getFieldValue('EXPRESSION') !== this.last_expr) {
                    this.checkExpr();
                    this.last_expr = this.getFieldValue('EXPRESSION');
                }
            }
        };
		
		Blockly.Arduino.dyor_drawing_icons1 = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var str = this.getFieldValue('ICON');
		//var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
		var row1,row2,row3,row4,row5,row6,row7,row8;
		var col1,col2,col3,col4,col5,col6,col7,col8;
		var code='';
		row1=parseInt(str.substr(0,2) || '00',16);
		row2=parseInt(str.substr(2,2) || '00',16);
		row3=parseInt(str.substr(4,2) || '00',16);
		row4=parseInt(str.substr(6,2) || '00',16);
		row5=parseInt(str.substr(8,2) || '00',16);
		row6=parseInt(str.substr(10,2) || '00',16);
		row7=parseInt(str.substr(12,2) || '00',16);
		row8=parseInt(str.substr(14,2) || '00',16);
		col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
		col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
		col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
		col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
		col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
		col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
		col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
		col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
		col1 = Facilino.pad(col1.toString(16),0,2);
		col2 = Facilino.pad(col2.toString(16),0,2);
		col3 = Facilino.pad(col3.toString(16),0,2);
		col4 = Facilino.pad(col4.toString(16),0,2);
		col5 = Facilino.pad(col5.toString(16),0,2);
		col6 = Facilino.pad(col6.toString(16),0,2);
		col7 = Facilino.pad(col7.toString(16),0,2);
		col8 = Facilino.pad(col8.toString(16),0,2);
		str = col1+col2+col3+col4+col5+col6+col7+col8;
		row1=parseInt(str.substr(0,2) || '00',16);
		row2=parseInt(str.substr(2,2) || '00',16);
		row3=parseInt(str.substr(4,2) || '00',16);
		row4=parseInt(str.substr(6,2) || '00',16);
		row5=parseInt(str.substr(8,2) || '00',16);
		row6=parseInt(str.substr(10,2) || '00',16);
		row7=parseInt(str.substr(12,2) || '00',16);
		row8=parseInt(str.substr(14,2) || '00',16);
		code = row1 + ',' + row2 + ','+ row3 + ','+ row4 + ','+ row5 + ','+ row6 + ','+ row7 + ','+ row8;
		
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    };
	
	Blockly.Blocks.dyor_drawing_icons1 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_drawing_icons1'),
			examples: ['dyor_generic_expression_icons_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_DRAWING_NO_CONNECTION','LANG_LED_MATRIX_DRAWING_POOR_CONNECTION','LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION','LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION','LANG_LED_MATRIX_DRAWING_NO_BATTERY','LANG_LED_MATRIX_DRAWING_LOW_BATTERY','LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY','LANG_LED_MATRIX_DRAWING_FULL_BATTERY','LANG_LED_MATRIX_DRAWING_CORRECT','LANG_LED_MATRIX_DRAWING_WRONG','LANG_LED_MATRIX_DRAWING_ARROW_UP','LANG_LED_MATRIX_DRAWING_ARROW_DOWN','LANG_LED_MATRIX_DRAWING_ARROW_RIGHT','LANG_LED_MATRIX_DRAWING_ARROW_LEFT','LANG_LED_MATRIX_DRAWING_TRIANGLE_UP','LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN','LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT','LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT','LANG_LED_MATRIX_DRAWING_SMILE','LANG_LED_MATRIX_DRAWING_DIAMOND','LANG_LED_MATRIX_DRAWING_CROSS','LANG_LED_MATRIX_DRAWING_SPADE','LANG_LED_MATRIX_DRAWING_CIRCLE_FULL','LANG_LED_MATRIX_DRAWING_CIRCLE','LANG_LED_MATRIX_DRAWING_MALE','LANG_LED_MATRIX_DRAWING_FEMALE','LANG_LED_MATRIX_DRAWING_NOTE','LANG_LED_MATRIX_DRAWING_NOTES','LANG_LED_MATRIX_DRAWING_SNOW','LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN','LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT','LANG_LED_MATRIX_DRAWING_ICONS_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 24*options.zoom, 24*options.zoom, "*")).appendField(new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NO_CONNECTION'),'0100000000000000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_POOR_CONNECTION'),'0504040000000000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION'),'1514141010000000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION'),'5554545050404000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NO_BATTERY'),'3f21212121212121'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_LOW_BATTERY'),'3f212d2121212121'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY'),'3f212d212d212121'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_FULL_BATTERY'),'3f212d212d212d21'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CORRECT'),'00040a1120408000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_WRONG'),'0042241818244200'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_UP'),'383838fe7c381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_DOWN'),'10387cfe38383800'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_RIGHT'),'10307efe7e301000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_LEFT'),'1018fcfefc181000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_UP'),'fefe7c7c38381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN'),'1038387c7cfefe00'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT'),'061e7efe7e1e0600'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT'),'c0f0fcfefcf0c000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SMILE'),'7c92aa82aa827c00'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_DIAMOND'),'183c7effff7e3c18'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CROSS'),'3c185aff5a183c18'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SPADE'),'38107cfe7c381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CIRCLE_FULL'),'3c7effffffff7e3c'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CIRCLE'),'3c4281818181423c'], 
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_MALE'),'0c12129ca0c0f000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_FEMALE'),'081c08081c22221c'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NOTE'),'060e0c0808281800'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NOTES'),'066eecc88898f000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SNOW'),'105438ee38541000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN'),'1038541054381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT'),'002844fe44280000']
                ]), 'ICON').setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('NEXT').setCheck('Expression').setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
        this.setOutput(true,'Expression');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ICONS_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_drawing1 = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = '';
		var data = [];
		for (i=0;i<8;i++)
		{
			data[i]=0;
			for (j=0;j<8;j++)
			{
				var field_name = 'COL'+(j)+(i);
				if (this.getFieldValue(field_name)==='#ff0000')
					data[i]+=Math.pow(2,(7-j));
			}
		}
		code = data[0]+','+data[1]+','+data[2]+','+data[3]+','+data[4]+','+data[5]+','+data[6]+','+data[7];
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    };

    Blockly.Blocks.dyor_drawing1 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_drawing1'),
			examples: ['dyor_generic_expression_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_DRAWING_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				var colours = [];
				for (i=0;i<8;i++)
				{
					for (j=0;j<8;j++)
					{
						var col_num=''+i+j;
						colours[col_num]=new Blockly.FieldColour('#000000');
						colours[col_num].setColours(['#000000','#FF0000']).setColumns(2);
					}
				}
				this.appendDummyInput('').appendField(' ').appendField(colours['00'],'COL00').appendField(colours['01'],'COL01').appendField(colours['02'],'COL02').appendField(colours['03'],'COL03').appendField(colours['04'],'COL04').appendField(colours['05'],'COL05').appendField(colours['06'],'COL06').appendField(colours['07'],'COL07').setAlign(Blockly.ALIGN_RIGHT);
				
				this.appendDummyInput('').appendField(colours['10'],'COL10').appendField(colours['11'],'COL11').appendField(colours['12'],'COL12').appendField(colours['13'],'COL13').appendField(colours['14'],'COL14').appendField(colours['15'],'COL15').appendField(colours['16'],'COL16').appendField(colours['17'],'COL17').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(colours['20'],'COL20').appendField(colours['21'],'COL21').appendField(colours['22'],'COL22').appendField(colours['23'],'COL23').appendField(colours['24'],'COL24').appendField(colours['25'],'COL25').appendField(colours['26'],'COL26').appendField(colours['27'],'COL27').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(colours['30'],'COL30').appendField(colours['31'],'COL31').appendField(colours['32'],'COL32').appendField(colours['33'],'COL33').appendField(colours['34'],'COL34').appendField(colours['35'],'COL35').appendField(colours['36'],'COL36').appendField(colours['37'],'COL37').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(colours['40'],'COL40').appendField(colours['41'],'COL41').appendField(colours['42'],'COL42').appendField(colours['43'],'COL43').appendField(colours['44'],'COL44').appendField(colours['45'],'COL45').appendField(colours['46'],'COL46').appendField(colours['47'],'COL47').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(colours['50'],'COL50').appendField(colours['51'],'COL51').appendField(colours['52'],'COL52').appendField(colours['53'],'COL53').appendField(colours['54'],'COL54').appendField(colours['55'],'COL55').appendField(colours['56'],'COL56').appendField(colours['57'],'COL57').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(colours['60'],'COL60').appendField(colours['61'],'COL61').appendField(colours['62'],'COL62').appendField(colours['63'],'COL63').appendField(colours['64'],'COL64').appendField(colours['65'],'COL65').appendField(colours['66'],'COL66').appendField(colours['67'],'COL67').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(colours['70'],'COL70').appendField(colours['71'],'COL71').appendField(colours['72'],'COL72').appendField(colours['73'],'COL73').appendField(colours['74'],'COL74').appendField(colours['75'],'COL75').appendField(colours['76'],'COL76').appendField(colours['77'],'COL77').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setOutput(true,'Expression');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TOOLTIP'));
            }
        };
	
	Blockly.Arduino.dyor_drawing_stream = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var cs_pin = Blockly.Arduino.valueToCode(this, 'CS_PIN', Blockly.Arduino.ORDER_NONE);
        var din_pin = Blockly.Arduino.valueToCode(this, 'DIN_PIN', Blockly.Arduino.ORDER_NONE);
        var clk_pin = Blockly.Arduino.valueToCode(this, 'CLK_PIN', Blockly.Arduino.ORDER_NONE);
		var smooth_shift = this.getFieldValue('SHIFT');
		var background = this.getFieldValue('BACKGROUND');
		var delay = Blockly.Arduino.valueToCode(this, 'DELAY', Blockly.Arduino.ORDER_ATOMIC);
        var message = '';
		var input = this.getInputTargetBlock('STREAM');
		var row1,row2,row3,row4,row5,row6,row7,row8;
		var col1,col2,col3,col4,col5,col6,col7,col8;
		var code = '';
		var a = Facilino.findPinMode(cs_pin);
		code += a['code'];
		cs_pin = a['pin'];

		a = Facilino.findPinMode(din_pin);
		code += a['code'];
		din_pin = a['pin'];

		a = Facilino.findPinMode(clk_pin);
		code += a['code'];
		clk_pin = a['pin'];

		Blockly.Arduino.definitions_['define_LEDMatrix_init'] = JST['dyor_definitions_LEDMatrix_init']({});
		Blockly.Arduino.definitions_['define_writeRow'] = JST['dyor_definitions_writeRow']({});
		Blockly.Arduino.definitions_['define_maxAll'] = JST['dyor_definitions_maxAll']({});
		Blockly.Arduino.definitions_['define_putByte'] = JST['dyor_definitions_putByte']({});
		Blockly.Arduino.definitions_['define_expression'] = JST['dyor_definitions_expression']({});
		
		if (Facilino.isVariable(cs_pin)) {
			code += JST['LED_matrix_setups_cs']({
				'cs_pin': cs_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_cs_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_cs']({
				'cs_pin': cs_pin
			});
		}
		if (Facilino.isVariable(din_pin)) {
			code += JST['LED_matrix_setups_din']({
				'din_pin': din_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_din_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_din']({
				'din_pin': din_pin
			});
		}
		if (Facilino.isVariable(clk_pin)) {
			code += JST['LED_matrix_setups_clk']({
				'clk_pin': clk_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_clk_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_clk']({
				'clk_pin': clk_pin
			});
		}
		if (Facilino.isVariable(cs_pin)||Facilino.isVariable(din_pin)||Facilino.isVariable(clk_pin)){
			code += JST['LED_matrix_setups_LEDMatrix']({
					'cs_pin' : cs_pin,
					'din_pin' : din_pin,
					'clk_pin': clk_pin
				});
		}
		else
		{
			Blockly.Arduino.setups_['setup_LEDMatrix_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_LEDMatrix']({
					'cs_pin' : cs_pin,
					'din_pin' : din_pin,
					'clk_pin': clk_pin
				});
		}
		if (input!=null)
		{
			message = Blockly.Arduino.valueToCode(this, 'STREAM', Blockly.Arduino.ORDER_ATOMIC);
			if (input.type=='dyor_drawing_text')
			{
				message = Blockly.Arduino.valueToCode(this, 'STREAM', Blockly.Arduino.ORDER_ATOMIC);
			}
			else if (input.type=='dyor_drawing_icons1')
			{
				while (input)
				{
					var str = input.getFieldValue('IMAGE');
					row1=parseInt(str.substr(0,2) || '00',16);
					row2=parseInt(str.substr(2,2) || '00',16);
					row3=parseInt(str.substr(4,2) || '00',16);
					row4=parseInt(str.substr(6,2) || '00',16);
					row5=parseInt(str.substr(8,2) || '00',16);
					row6=parseInt(str.substr(10,2) || '00',16);
					row7=parseInt(str.substr(12,2) || '00',16);
					row8=parseInt(str.substr(14,2) || '00',16);
					col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
					col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
					col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
					col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
					col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
					col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
					col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
					col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
					col1 = Facilino.pad(col1.toString(16),0,2);
					col2 = Facilino.pad(col2.toString(16),0,2);
					col3 = Facilino.pad(col3.toString(16),0,2);
					col4 = Facilino.pad(col4.toString(16),0,2);
					col5 = Facilino.pad(col5.toString(16),0,2);
					col6 = Facilino.pad(col6.toString(16),0,2);
					col7 = Facilino.pad(col7.toString(16),0,2);
					col8 = Facilino.pad(col8.toString(16),0,2);
					str = col1+col2+col3+col4+col5+col6+col7+col8;
					if (str=='0000000000000000')
						str='0000';
					message += str;
					input = input.getInputTargetBlock('STREAM');
				}
			}
			var expr='';
			var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
			//if (background==='TRUE')
			//{
				var stream='{';
			//}
			while(message!=='')
			{
				row1=parseInt(message.substr(0,2) || '00',16);
				row2=parseInt(message.substr(2,2) || '00',16);
				row3=parseInt(message.substr(4,2) || '00',16);
				row4=parseInt(message.substr(6,2) || '00',16);
				row5=parseInt(message.substr(8,2) || '00',16);
				row6=parseInt(message.substr(10,2) || '00',16);
				row7=parseInt(message.substr(12,2) || '00',16);
				row8=parseInt(message.substr(14,2) || '00',16);
				if (dropdown_configuration=='V1')
				{
					expr = row1 + ',' + row2 + ','+ row3 + ','+ row4 + ','+ row5 + ','+ row6 + ','+ row7 + ','+ row8;
				}
				else if (dropdown_configuration=='H')
				{
					col1 = ((row1%2)<1? 0 : 128) + ((row2%2)<1? 0 : 64) + ((row3%2)<1? 0 : 32) + ((row4%2)<1? 0 : 16) + ((row5%2)<1? 0 : 8) + ((row6%2)<1? 0 : 4) + ((row7%2)<1? 0 : 2) + ((row8%2)<1? 0 : 1);
					col2 = ((row1%4)<2? 0 : 128) + ((row2%4)<2? 0 : 64) + ((row3%4)<2? 0 : 32) + ((row4%4)<2? 0 : 16) + ((row5%4)<2? 0 : 8) + ((row6%4)<2? 0 : 4) + ((row7%4)<2? 0 : 2) + ((row8%4)<2? 0 : 1);
					col3 = ((row1%8)<4? 0 : 128) + ((row2%8)<4? 0 : 64) + ((row3%8)<4? 0 : 32) + ((row4%8)<4? 0 : 16) + ((row5%8)<4? 0 : 8) + ((row6%8)<4? 0 : 4) + ((row7%8)<4? 0 : 2) + ((row8%8)<4? 0 : 1);
					col4 = ((row1%16)<8? 0 : 128) + ((row2%16)<8? 0 : 64) + ((row3%16)<8? 0 : 32) + ((row4%16)<8? 0 : 16) + ((row5%16)<8? 0 : 8) + ((row6%16)<8? 0 : 4) + ((row7%16)<8? 0 : 2) + ((row8%16)<8? 0 : 1);
					col5 = ((row1%32)<16? 0 : 128) + ((row2%32)<16? 0 : 64) + ((row3%32)<16? 0 : 32) + ((row4%32)<16? 0 : 16) + ((row5%32)<16? 0 : 8) + ((row6%32)<16? 0 : 4) + ((row7%32)<16? 0 : 2) + ((row8%32)<16? 0 : 1);
					col6 = ((row1%64)<32? 0 : 128) + ((row2%64)<32? 0 : 64) + ((row3%64)<32? 0 : 32) + ((row4%64)<32? 0 : 16) + ((row5%64)<32? 0 : 8) + ((row6%64)<32? 0 : 4) + ((row7%64)<32? 0 : 2) + ((row8%64)<32? 0 : 1);
					col7 = ((row1%128)<64? 0 : 128) + ((row2%128)<64? 0 : 64) + ((row3%128)<64? 0 : 32) + ((row4%128)<64? 0 : 16) + ((row5%128)<64? 0 : 8) + ((row6%128)<64? 0 : 4) + ((row7%128)<64? 0 : 2) + ((row8%128)<64? 0 : 1);
					col8 = (row1<128? 0 : 128) + (row2<128? 0 : 64) + (row3<128? 0 : 32) + (row4<128? 0 : 16) + (row5<128? 0 : 8) + (row6<128? 0 : 4) + (row7<128? 0 : 2) + (row8<128? 0 : 1);
					expr = col8 + ',' + col7 + ','+ col6 + ','+ col5 + ','+ col4 + ','+ col3 + ','+ col2 + ','+ col1;
				}
				else if (dropdown_configuration=='V') {
					row1 = ((row1%2)<1? 0 : 128) + ((row1%4)<2? 0 : 64) + ((row1%8)<4? 0 : 32) + ((row1%16)<8? 0 : 16) + ((row1%32)<16? 0 : 8) + ((row1%64)<32? 0 : 4) + ((row1%128)<64? 0 : 2) + (row1<128? 0 : 1);
					row2 = ((row2%2)<1? 0 : 128) + ((row2%4)<2? 0 : 64) + ((row2%8)<4? 0 : 32) + ((row2%16)<8? 0 : 16) + ((row2%32)<16? 0 : 8) + ((row2%64)<32? 0 : 4) + ((row2%128)<64? 0 : 2) + (row2<128? 0 : 1);
					row3 = ((row3%2)<1? 0 : 128) + ((row3%4)<2? 0 : 64) + ((row3%8)<4? 0 : 32) + ((row3%16)<8? 0 : 16) + ((row3%32)<16? 0 : 8) + ((row3%64)<32? 0 : 4) + ((row3%128)<64? 0 : 2) + (row3<128? 0 : 1);
					row4 = ((row4%2)<1? 0 : 128) + ((row4%4)<2? 0 : 64) + ((row4%8)<4? 0 : 32) + ((row4%16)<8? 0 : 16) + ((row4%32)<16? 0 : 8) + ((row4%64)<32? 0 : 4) + ((row4%128)<64? 0 : 2) + (row4<128? 0 : 1);
					row5 = ((row5%2)<1? 0 : 128) + ((row5%4)<2? 0 : 64) + ((row5%8)<4? 0 : 32) + ((row5%16)<8? 0 : 16) + ((row5%32)<16? 0 : 8) + ((row5%64)<32? 0 : 4) + ((row5%128)<64? 0 : 2) + (row5<128? 0 : 1);
					row6 = ((row6%2)<1? 0 : 128) + ((row6%4)<2? 0 : 64) + ((row6%8)<4? 0 : 32) + ((row6%16)<8? 0 : 16) + ((row6%32)<16? 0 : 8) + ((row6%64)<32? 0 : 4) + ((row6%128)<64? 0 : 2) + (row6<128? 0 : 1);
					row7 = ((row7%2)<1? 0 : 128) + ((row7%4)<2? 0 : 64) + ((row7%8)<4? 0 : 32) + ((row7%16)<8? 0 : 16) + ((row7%32)<16? 0 : 8) + ((row7%64)<32? 0 : 4) + ((row7%128)<64? 0 : 2) + (row7<128? 0 : 1);
					row8 = ((row8%2)<1? 0 : 128) + ((row8%4)<2? 0 : 64) + ((row8%8)<4? 0 : 32) + ((row8%16)<8? 0 : 16) + ((row8%32)<16? 0 : 8) + ((row8%64)<32? 0 : 4) + ((row8%128)<64? 0 : 2) + (row8<128? 0 : 1);
					expr = row1 + ',' + row2 + ','+ row3 + ','+ row4 + ','+ row5 + ','+ row6 + ','+ row7 + ','+ row8;
				}
				else if (dropdown_configuration=='H1')
				{
					col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
					col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
					col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
					col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
					col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
					col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
					col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
					col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
					expr = col1 + ',' + col2 + ','+ col3 + ','+ col4 + ','+ col5 + ','+ col6 + ','+ col7 + ','+ col8;
				}
				//if (smooth_shift==='TRUE')
				//	message=message.substr(2);
				//else
				message=message.substr(16);
				//if (background==='TRUE')
				//{
					stream+='{'+expr+'},';
				//}
				//else
				//{
				//	code += 'expression('+((__t = (cs_pin)) == null ? '' : __t) +',' +((__t = (din_pin)) == null ? '' : __t) +',' +((__t = (clk_pin)) == null ? '' : __t) +',' + expr + ');\n';
				//	code += 'delay('+delay+');\n';
				//}
			}
			if (smooth_shift==='TRUE')
			{
				expr='0,0,0,0,0,0,0,0';
				//if (background==='TRUE')
					stream+='{'+expr+'}};'
				//else
				//{
				//	code += 'expression('+((__t = (cs_pin)) == null ? '' : __t) +',' +((__t = (din_pin)) == null ? '' : __t) +',' +((__t = (clk_pin)) == null ? '' : __t) +',' + expr + ');\n';
				//	code += 'delay('+delay+');\n';
				//}
			}
			else
			{
				//if (background==='TRUE')
					stream=stream.substr(0,stream.length-1)+'};';
			}
			var stream_name='_stream'+this.NumLEDMatrixStreams;
			Blockly.Arduino.definitions_['declare_var'+stream_name]='const uint8_t '+stream_name+'[][8]='+stream+'\n';
			if (background==='TRUE')
			{
				Blockly.Arduino.definitions_['define_prepare_led_matrix_stream'] = JST['dyor_led_matrix_definitions_prepare_stream']({});
				Blockly.Arduino.definitions_['declare_var_current_led_matrix_stream_ptr']='volatile uint8_t* _current_led_matrix_stream_ptr[8];\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_CS_pin']='volatile int _led_matrix_stream_CS_pin=0;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_DIN_pin']='volatile int _led_matrix_stream_DIN_pin=0;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_CLK_pin']='volatile int _led_matrix_stream_CLK_pin=0;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_counter']='volatile int _led_matrix_stream_counter=0;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_length']='volatile int _led_matrix_stream_length=0;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_status']='volatile uint8_t _led_matrix_stream_status=-1;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_next']='volatile uint8_t _led_matrix_stream_next=8;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_duration']='volatile int _led_matrix_stream_duration=0;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_forward_dir']='volatile bool _led_matrix_stream_forward_dir=true;\n';
				Blockly.Arduino.definitions_['declare_var_led_matrix_stream_next_time']='volatile unsigned long _led_matrix_stream_next_time=0;\n';
				
				Blockly.Arduino.definitions_['define_play_led_matrix_stream_interrupt'] = JST['dyor_led_matrix_definitions_play_stream_interrupt']({});
				Blockly.Arduino.play_led_matrix_stream = 'playLEDMatrixStreamInterrupt();\n';
				//Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER1_COMPA_vect){\n';
				var Blocks=Blockly.getMainWorkspace().getAllBlocks();
				var block_found = Blocks.find(function (block){return (block.type=='dyor_task');});
				if (block_found===undefined)
				{
					Blockly.Arduino.definitions_['define_task'] = 'SIGNAL (TIMER0_COMPA_vect){\n';
					Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
					Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_melody;	
					Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_led_matrix_stream;	
					Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_RGBstream;				
					//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
					Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
					//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
					Blockly.Arduino.definitions_['define_task'] += '}\n';
				}				
				if (smooth_shift==='TRUE')
					if ((input.type==='dyor_drawing_text')&&(dropdown_configuration=='V1'))
					{
						code += JST['dyor_led_matrix_prepare_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 1,
						'duration' : delay,
						'dir' : 'false'
					});
					}
					else
					{
					code += JST['dyor_led_matrix_prepare_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 1,
						'duration' : delay,
						'dir' : 'true'
					});
					}
				else
					code += JST['dyor_led_matrix_prepare_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 8,
						'duration' : delay,
						'dir': 'true'
					});
					
					
					
					/*
					if ((input.type==='dyor_drawing_text')&&(dropdown_configuration=='V1'))
					{
						code += JST['dyor_led_matrix_play_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 1,
						'duration' : delay,
						'dir': 'false'
					
					});
					}
					else
					{		
					code += JST['dyor_led_matrix_play_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 1,
						'duration' : delay,
						'dir': 'true'
					
					});
					}*/
					
					
			}
			else
			{
				Blockly.Arduino.definitions_['define_play_led_matrix_stream'] = JST['dyor_led_matrix_definitions_play_stream']({});
				Blockly.Arduino.play_led_matrix_stream='';
				if (smooth_shift==='TRUE')
				{
					if ((input.type==='dyor_drawing_text')&&(dropdown_configuration=='V1'))
					{
						code += JST['dyor_led_matrix_play_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 1,
						'duration' : delay,
						'dir': 'false'
					
					});
					}
					else
					{		
					code += JST['dyor_led_matrix_play_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 1,
						'duration' : delay,
						'dir': 'true'
					
					});
					}
				}
				else
				{
					code += JST['dyor_led_matrix_play_stream']({
						'pinCS': cs_pin,
						'pinDIN': din_pin,
						'pinCLK': clk_pin,
						'stream': stream_name,
						'next' : 8,
						'duration' : delay,
						'dir': 'true'
					});
				}
			}
		}
		return code;
    };
	
	Blockly.Blocks.dyor_drawing_stream = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_drawing_stream'),
			examples: ['dyor_generic_expression_stream_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX','LANG_LED_MATRIX_CS_PIN','LANG_LED_MATRIX_DIN_PIN','LANG_LED_MATRIX_CLK_PIN','LANG_LED_MATRIX_VERTICAL','LANG_LED_MATRIX_HORIZONTAL','LANG_LED_MATRIX_VERTICAL_180','LANG_LED_MATRIX_HORIZONTAL_180','LANG_LED_MATRIX_DELAY_WAIT','LANG_LED_MATRIX_DELAY_SHIFT','LANG_LED_MATRIX_WAIT','LANG_LED_MATRIX_DRAWING_STREAM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LED_MATRIX')).appendField(new Blockly.FieldImage('img/blocks/LED_matrix.svg', 57*options.zoom, 33*options.zoom));
                this.appendValueInput('CS_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('DIN_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_DIN_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('CLK_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CLK_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL'), 'V'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL'), 'H'] ,
			[Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL_180'), 'V1'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL_180'), 'H1'] 
                ]), "CONFIGURATION").setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('STREAM').appendField(new Blockly.FieldImage("img/blocks/dot-matrix_stream.png", 48*options.zoom, 24*options.zoom, "*")).setCheck('StreamExpression').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('DELAY').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_DELAY_WAIT')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_DELAY_SHIFT')).appendField(new Blockly.FieldCheckbox('TRUE'),'SHIFT').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_WAIT')).appendField(new Blockly.FieldCheckbox('FALSE'),'BACKGROUND').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
				Facilino.NumLEDMatrixStreams=Facilino.NumLEDMatrixStreams+1;
				this.NumLEDMatrixStreams=Facilino.NumLEDMatrixStreams;
        //this.setOutput(true,'Expression');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_STREAM_TOOLTIP'));
            }
        };
		
	
		
		Blockly.Arduino.dyor_drawing_text = function() {
            // Text value.
			var text_to_show = Blockly.Arduino.quote_(this.getFieldValue('TEXT'));
			var dictionary = { 'sp':'0000000000000000',0: '3c66666e76663c00',1: '7e1818181c181800',2: '7e060c3060663c00',3:'3c66603860663c00',4:'30307e3234383000',5:'3c6660603e067e00',6:'3c66663e06663c00',7:'1818183030667e00',8:'3c66663c66663c00',9:'3c66607c66663c00',A:'66667e7e66667e3c',B:'3e7e663e3e667e3e',C:'3c7e060606067e3c',D:'1e7e666666663e1e',E:'7e7e061e1e067e7e',F:'0606061e1e067e7e',G:'3c7e667636067e3c',H:'6666667e7e666666',I:'7e7e181818187e7e',J:'1c3e363030307c7c',K:'66361e0e0e1e3666',L:'7e7e060606060606',M:'666666667e7e6642',N:'6676767e7e6e6e66',O:'3c7e666666667e3c',P:'0606063e7e667e3e',Q:'703c7e6666667e3c',R:'66361e3e7e667e3e',S:'3c7e60381c067e3c',T:'1818181818187e7e',U:'3c7e666666666666',V:'183c3c6666666666',W:'143e7f6b63636363',X:'66663c18183c6666',Y:'181818183c3c6666',Z:'7e7e061c38607e7e',a:'7c667c603c000000',b:'3e66663e06060600',c:'3c6606663c000000',d:'7c66667c60606000',e:'3c067e663c000000',f:'0c0c3e0c0c6c3800',g:'3c607c66667c0000',h:'6666663e06060600',i:'3c18181800180000',j:'1c36363030003000',k:'66361e3666060600',l:'1818181818181800',m:'d6d6feeec6000000',n:'6666667e3e000000',o:'3c6666663c000000',p:'06063e66663e0000',q:'f0b03c36363c0000',r:'060666663e000000',s:'3e403c027c000000',t:'3818187e18180000',u:'7c66666666000000',v:'183c666600000000',w:'7cd6d6d6c6000000',x:'663c183c66000000',y:'3c607c6666000000',z:'3c0c18303c000000','+':'0010107c10100000','-':'0000003c00000000','*':'006c38fe386c0000','/':'00060c1830600000','%':'60660c1830660600','=':'00003c003c000000','~':'000000365c000000','^':'0000008244281000','<':'6030180c18306000','>':'060c1830180c0600','(':'6030181818306000',')':'060c1818180c0600','[':'7818181818187800',']':'1e18181818181e00','{':'7018180c18187000','}':'0e18183018180e00','.':'0606000000000000',':':'0018180018180000',';':'0c18180018180000',',':'060c0c0c00000000','!':'180018183c3c1800','?':'1800183860663c00','@':'003c421a3a221c00','&':'fc66a6143c663c00','$':'103c403804781000','#':'6c6cfe6cfe6c6c00','"':'00000000286c6c00','\\':'006030180c060000','`':'0000000060303000','´':'0000000c18181800'};
			var code ='';
			var row1,row2,row3,row4,row5,row6,row7,row8;
			var col1,col2,col3,col4,col5,col6,col7,col8;
			text_to_show=text_to_show.substr(1);
			text_to_show=text_to_show.substr(0,text_to_show.length-1);
			while (text_to_show!='')
			{
				var _char = text_to_show.substr(0,1);
				if (_char==' ')
				{
					str=dictionary['sp'];
				}
				else
					str=dictionary[_char];
				if (str==null)
				{
					text_to_show=text_to_show.substr(1);
					continue;
				}
				row1=parseInt(str.substr(0,2) || '00',16);
				row2=parseInt(str.substr(2,2) || '00',16);
				row3=parseInt(str.substr(4,2) || '00',16);
				row4=parseInt(str.substr(6,2) || '00',16);
				row5=parseInt(str.substr(8,2) || '00',16);
				row6=parseInt(str.substr(10,2) || '00',16);
				row7=parseInt(str.substr(12,2) || '00',16);
				row8=parseInt(str.substr(14,2) || '00',16);
				col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
				col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
				col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
				col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
				col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
				col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
				col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
				col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
				col1 = Facilino.pad(col1.toString(16),0,2);
				col2 = Facilino.pad(col2.toString(16),0,2);
				col3 = Facilino.pad(col3.toString(16),0,2);
				col4 = Facilino.pad(col4.toString(16),0,2);
				col5 = Facilino.pad(col5.toString(16),0,2);
				col6 = Facilino.pad(col6.toString(16),0,2);
				col7 = Facilino.pad(col7.toString(16),0,2);
				col8 = Facilino.pad(col8.toString(16),0,2);
				str = col1+col2+col3+col4+col5+col6+col7+col8;
				//if (str=='0000000000000000')
				//	str='0000';
				code += str;
				text_to_show=text_to_show.substr(1);
			}
            //console.log(code);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

        Blockly.Blocks.dyor_drawing_text = {
            // Text value.
            category: RoboBlocks.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
			helpUrl: Facilino.getHelpUrl('dyor_drawing_text'),
			examples: ['dyor_generic_expression_stream_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,	
			keys: ['LANG_LED_MATRIX_STREAM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
                this.appendDummyInput()
					.appendField(new Blockly.FieldImage("img/blocks/dot-matrix_stream.png", 48*options.zoom, 24*options.zoom, "*"))
                    .appendField(new Blockly.FieldTextInput(''), 'TEXT');
                this.setOutput(true, 'StreamExpression');
                this.setTooltip(RoboBlocks.locales.getKey('LANG_LED_MATRIX_STREAM_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_drawing_sequentially = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = '';
		var i=1;
		var padding=2;
		for (i=1;i<=this.itemCount_;i++)
		{
			var expr= Blockly.Arduino.valueToCode(this, 'DATA'+i, Blockly.Arduino.ORDER_ATOMIC);
			var row = expr.split(',');
			var tmp_code='';
			for (j=0;j<row.length;j++)
			{
				var hex = Number(row[j]).toString(16);
				while (hex.length < padding) {
					hex = "0" + hex;
				}
				tmp_code+=hex.toString(16);
			}
			code+=tmp_code;
		}
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    };

    Blockly.Blocks.dyor_drawing_sequentially = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MAX7219'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_drawing_sequentially'),
			examples: ['dyor_generic_expression_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/dot-matrix_stream.png", 48*options.zoom, 24*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setMutator(new Blockly.Mutator(['dyor_drawing_sequentially_item']));
				this.itemCount_ = 0;
				this.setInputsInline(true);
				this.setOutput(true,'StreamExpression');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_TOOLTIP'));
            },
			mutationToDom: function() {
                if (!this.itemCount_ ) {
                    return null;
                }
                var container = document.createElement('mutation');
                if (this.itemCount_) {
                    container.setAttribute('item', this.itemCount_);
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.itemCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 1; x <= this.itemCount_; x++) {
					this.appendValueInput('DATA' + x).setCheck('DATA').setCheck('Expression').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(true);
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('dyor_drawing_sequentially_mutator');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 1; x <= this.itemCount_; x++) {
                    var itemBlock = workspace.newBlock('dyor_drawing_sequentially_item');
                    itemBlock.initSvg();
                    connection.connect(itemBlock.previousConnection);
                    connection = itemBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the items input blocks and remove the inputs.
                for (var x = this.itemCount_; x > 0; x--) {
                    this.removeInput('DATA' + x);
                }
                this.itemCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_drawing_sequentially_item':
                            this.itemCount_++;
							this.setInputsInline(true);
							var dataInput = this.appendValueInput('DATA' + this.itemCount_).setCheck('Expression').setAlign(Blockly.ALIGN_RIGHT);
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                dataInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                itemInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 1;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'dyor_drawing_sequentially_item':
                            var inputData = this.getInput('DATA' + x);
                            clauseBlock.valueConnection_ =
                                inputData && inputData.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            }
        };
		
		Blockly.Blocks.dyor_drawing_sequentially_mutator = {
            // App
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_MUTATOR_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
                this.appendDummyInput().appendField(new Blockly.FieldImage("img/blocks/dot-matrix_stream.png", 48*options.zoom, 48*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('drawing_item');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_MUTATOR_TOOLTIP'));
                this.contextMenu = false;
            }
        };
    
    Blockly.Blocks.dyor_drawing_sequentially_item = {
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_ITEM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
                this.appendDummyInput().appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 24*options.zoom, 24*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'drawing_item');
                this.setNextStatement(true,'drawing_item');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_ITEM_TOOLTIP'));
        this.contextMenu = false;
            }
        };

    Blockly.Arduino.dyor_controls_wait = function() {
            var value1 = Blockly.Arduino.valueToCode(this, 'VALUE1', Blockly.Arduino.ORDER_ATOMIC);
            var value2 = Blockly.Arduino.valueToCode(this, 'VALUE2', Blockly.Arduino.ORDER_ATOMIC);
        var cond = this.getFieldValue('COND');
            var code = 'while(!(('+value1+')'+cond+'('+value2+')));\n  delay(1);\n';
            return code;
        };

    Blockly.Blocks.dyor_controls_wait = {
            category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_CONTROL'),
            tags: ['control'],
            helpUrl: Facilino.getHelpUrl('dyor_controls_wait'),
			examples: ['dyor_controls_wait_example.bly'],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL,
			keys: ['LANG_CONTROLS_WAIT','LANG_CONTROLS_VALUE1','LANG_CONTROLS_VALUE2','LANG_CONTROLS_WAIT_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_CONTROL);
        this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_CONTROLS_WAIT'));
                this.appendValueInput('VALUE1').appendField(Facilino.locales.getKey('LANG_CONTROLS_VALUE1')).setAlign(Blockly.ALIGN_RIGHT);
        this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
                    ['=', '=='],
					['!=', '!='],
					['<', '<'],
					['<=', '<='],
					['>', '>'],
					['>=', '>=']
                ]), 'COND').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('VALUE2').appendField(Facilino.locales.getKey('LANG_CONTROLS_VALUE2')).setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_CONTROLS_WAIT_TOOLTIP'));
            }
        };
		
		/*Blockly.Arduino.yield = function() {
				var code = 'yield();\n';
				return code;
			};

		Blockly.Blocks.yield = {
			category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_CONTROL'),
			helpUrl: Facilino.getHelpUrl('yield'),
			examples: [],
			category_colour: Facilino.LANG_COLOUR_CONTROL,
			colour: Facilino.LANG_COLOUR_CONTROL,
			keys: ['LANG_CONTROL_YIELD','LANG_CONTROL_YIELD_TOOLTIP'],
			init: function() {
				this.setColour(Facilino.LANG_COLOUR_CONTROL);
				this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_CONTROL_YIELD'));
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setTooltip(Facilino.locales.getKey('LANG_CONTROL_YIELD_TOOLTIP'));
			}
		};*/
		
		if ((Facilino.locales.processor==='ESP32') || (Facilino.locales.processor==='NodeMCU')|| (Facilino.locales.processor===null))
		{	
			Blockly.Arduino.ESP_deep_sleep = function() {
				var sleep_time = Blockly.Arduino.valueToCode(this, 'SLEEP_TIME', Blockly.Arduino.ORDER_ATOMIC);
				var code = '';
				var a = RoboBlocks.findPinMode(sleep_time);
				code += a['code'];
				sleep_time = a['pin'];
				
				code += 'ESP.deepSleep(1000000*'+sleep_time+');\n';
				return code;
			};

			Blockly.Blocks.ESP_deep_sleep = {
				category: Facilino.locales.getKey('LANG_CATEGORY_CONTROLS'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_CONTROL'),
				helpUrl: Facilino.getHelpUrl('ESP_deep_sleep'),
				examples: [],
				category_colour: Facilino.LANG_COLOUR_CONTROL,
				colour: Facilino.LANG_COLOUR_CONTROL,
				keys: ['LANG_CONTROL_ESP_DEEP_SLEEP','LANG_CONTROL_ESP_DEEP_SLEEP_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_CONTROL);
					this.appendValueInput('SLEEP_TIME', Number)
						.appendField(Facilino.locales.getKey('LANG_CONTROL_ESP_DEEP_SLEEP'))
						.setCheck(Number);
					this.setInputsInline(true);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(false);
					this.setTooltip(Facilino.locales.getKey('LANG_CONTROL_ESP_DEEP_SLEEP_TOOLTIP'));
				}
			};
		}

    
    Blockly.Arduino.dyor_infrared = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            code += JST['dyor_read_analog']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.dyor_infrared = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['infrared','light'],
            helpUrl: Facilino.getHelpUrl('dyor_infrared'),
			examples: ['dyor_infrared_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
            //infrared initialization
			keys: ['LANG_INFRARED','LANG_INFRARED_PIN','LANG_INFRARED_ANALOG_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
        this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/light_diode.svg",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_INFRARED')).appendField(new Blockly.FieldImage('img/blocks/TCRT5000.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_INFRARED_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_INFRARED_ANALOG_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_infrared_digital = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			
            if (Facilino.isVariable(dropdown_pin)) {
                code += JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pin,
                });
            } else {
                Blockly.Arduino.setups_['setup_green_digital_read' + dropdown_pin] = JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pin,
                });
            }

            code += JST['dyor_read_digital']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.dyor_infrared_digital = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['infrared','light'],
            helpUrl: Facilino.getHelpUrl('dyor_infrared_digital'),
			examples: ['dyor_infrared_digital_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_INFRARED','LANG_INFRARED_PIN','LANG_INFRARED_DIGITAL_TOOLTIP'],
            //infrared initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
        this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/light_diode.svg",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_INFRARED')).appendField(new Blockly.FieldImage('img/blocks/TCRT5000.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_INFRARED_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Boolean);
                this.setTooltip(Facilino.locales.getKey('LANG_INFRARED_DIGITAL_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_line_following = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var light = Blockly.Arduino.valueToCode(this, 'LIGHT', Blockly.Arduino.ORDER_ATOMIC);
            var gain = Blockly.Arduino.valueToCode(this, 'GAIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            //Blockly.Arduino.definitions_['include_line_following'] = JST['dyor_line_following_definitions_include']({});
        Blockly.Arduino.definitions_['declare_var_define_light_following'] = JST['dyor_line_following_definitions_variables']({});

        Blockly.Arduino.definitions_['define_line_following'] = JST['dyor_line_following_definitions_follow']({});

        code += JST['dyor_line_following']({
                'light': light,
                'gain': gain
            });

            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

    Blockly.Blocks.dyor_line_following = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['light','linefollowing'],
            helpUrl: Facilino.getHelpUrl('dyor_line_following'),
			examples: ['dyor_line_following_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_LINE_FOLLOWING_LIGHT','LANG_LINE_FOLLOWING_GAIN','LANG_LINE_FOLLOWING_TOOLTIP'],
            init: function() {
				this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/turn.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING'));
				this.appendValueInput('LIGHT').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_LIGHT')).appendField(new Blockly.FieldImage("img/blocks/light_diode.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('GAIN').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_GAIN')).appendField(new Blockly.FieldImage("img/blocks/knob.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
						this.setInputsInline(false);
				this.setOutput(true,Number);
					this.setTooltip(Facilino.locales.getKey('LANG_LINE_FOLLOWING_TOOLTIP'));
					}
        };

    Blockly.Arduino.dyor_line_following_binary = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var light = Blockly.Arduino.valueToCode(this, 'LIGHT', Blockly.Arduino.ORDER_ATOMIC);
            var white = Blockly.Arduino.statementToCode(this,'WHITE');
        var gray = Blockly.Arduino.statementToCode(this,'GRAY');
        var black = Blockly.Arduino.statementToCode(this,'BLACK');
            var code = '';
            
        Blockly.Arduino.definitions_['declare_var_define_light_following'] = JST['dyor_line_following_definitions_variables']({});

        code += JST['dyor_line_following_binary']({
                'light': light,
                'white': white,
        'gray' : gray,
        'black' : black
            });

            return code;
        };

    Blockly.Blocks.dyor_line_following_binary = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['light','linefollowing'],
            helpUrl: Facilino.getHelpUrl('dyor_line_following_binary'),
			examples: ['dyor_line_following_binary_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_LINE_FOLLOWING_LIGHT','LANG_BLACK','LANG_GRAY','LANG_WHITE','LANG_LINE_FOLLOWING_BINARY_TOOLTIP'],
            init: function() {
        this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
        this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/turn.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING'));
        this.appendValueInput('LIGHT').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_LIGHT')).appendField(new Blockly.FieldImage("img/blocks/light_diode.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendStatementInput('BLACK').appendField(Facilino.locales.getKey('LANG_BLACK')).setCheck('code');
        this.appendStatementInput('GREY').appendField(Facilino.locales.getKey('LANG_GRAY')).setCheck('code');
        this.appendStatementInput('WHITE').appendField(Facilino.locales.getKey('LANG_WHITE')).setCheck('code');
        this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
            this.setTooltip(Facilino.locales.getKey('LANG_LINE_FOLLOWING_BINARY_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_white = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
            Blockly.Arduino.definitions_['declare_var_define_light_following'] = JST['dyor_line_following_definitions_variables']({});

        code = '(_white)';

            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

    Blockly.Blocks.dyor_white = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['light'],
            helpUrl: Facilino.getHelpUrl('dyor_white'),
			examples: ['dyor_infrared_calibration_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_WHITE','LANG_LINE_FOLLOWING_WHITE_TOOLTIP'],
            init: function() {
				this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
				this.appendDummyInput('LIGHT').appendField(Facilino.locales.getKey('LANG_WHITE')).appendField(new Blockly.FieldImage("img/blocks/bright-light-bulb.svg",24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
				this.setOutput(true,Number);
				this.setTooltip(Facilino.locales.getKey('LANG_LINE_FOLLOWING_WHITE_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_black = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
            Blockly.Arduino.definitions_['declare_var_define_light_following'] = JST['dyor_line_following_definitions_variables']({});

        code = '(_black)';

            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

    Blockly.Blocks.dyor_black = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['light'],
            helpUrl: Facilino.getHelpUrl('dyor_black'),
			examples: ['dyor_infrared_calibration_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_BLACK','LANG_LINE_FOLLOWING_BLACK_TOOLTIP'],
            init: function() {
				this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
				this.appendDummyInput('LIGHT').appendField(Facilino.locales.getKey('LANG_BLACK')).appendField(new Blockly.FieldImage("img/blocks/light-bulb.svg",24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
				this.setOutput(true,Number);
				this.setTooltip(Facilino.locales.getKey('LANG_LINE_FOLLOWING_BLACK_TOOLTIP'));
            }
        };


    Blockly.Arduino.dyor_calibrate_white = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var light = Blockly.Arduino.valueToCode(this, 'LIGHT', Blockly.Arduino.ORDER_ATOMIC);
            Blockly.Arduino.definitions_['declare_var_define_light_following'] = JST['dyor_line_following_definitions_variables']({});

        code = JST['dyor_calibrate_white']({
                'white': light
            }); 

            return code;
        };

    Blockly.Blocks.dyor_calibrate_white = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['light'],
            helpUrl: Facilino.getHelpUrl('dyor_calibrate_white'),
			examples: ['dyor_infrared_calibration_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_LINE_FOLLOWING_WHITE','LANG_LINE_FOLLOWING_CALIBRATE_WHITE_TOOLTIP'],
            init: function() {
				this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
				this.appendValueInput('LIGHT').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_WHITE')).appendField(new Blockly.FieldImage("img/blocks/bright-light-bulb.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(true);
				this.setPreviousStatement(true,'code');
						this.setNextStatement(true,'code');
					this.setTooltip(Facilino.locales.getKey('LANG_LINE_FOLLOWING_CALIBRATE_WHITE_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_calibrate_black = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var light = Blockly.Arduino.valueToCode(this, 'LIGHT', Blockly.Arduino.ORDER_ATOMIC);
            Blockly.Arduino.definitions_['declare_var_define_light_following'] = JST['dyor_line_following_definitions_variables']({});

        code = JST['dyor_calibrate_black']({
                'black': light
            });
        
            return code;
        };

    Blockly.Blocks.dyor_calibrate_black = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_INFRARED'),
            tags: ['light'],
            helpUrl: Facilino.getHelpUrl('dyor_calibrate_black'),
			examples: ['dyor_infrared_calibration_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_INFRARED,
			keys: ['LANG_LINE_FOLLOWING_BLACK','LANG_LINE_FOLLOWING_CALIBRATE_BLACK_TOOLTIP'],
            init: function() {
        this.setColour(Facilino.LANG_COLOUR_LIGHT_INFRARED);
        this.appendValueInput('LIGHT').appendField(Facilino.locales.getKey('LANG_LINE_FOLLOWING_BLACK')).appendField(new Blockly.FieldImage("img/blocks/light-bulb.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
        this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
            this.setTooltip(Facilino.locales.getKey('LANG_LINE_FOLLOWING_CALIBRATE_BLACK_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_piezo_buzzer = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC) || '';
            var dropdown_freq = this.getFieldValue('FREQ') || '';
            var delay_time = this.getFieldValue('DURA') || '';
        var tie = this.getFieldValue('TIE') || 'FALSE';
            var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];

        if (tie=='FALSE') {
            code += JST['dyor_piezo_buzzer']({
                'dropdown_pin': dropdown_pin,
                'dropdown_freq': dropdown_freq,
                'delay_time': delay_time
            });
        }
        else {
        code += JST['dyor_piezo_buzzer_tie']({
                'dropdown_pin': dropdown_pin,
                'dropdown_freq': dropdown_freq,
                'delay_time': delay_time
            });
        }

            return code;
        };


        Blockly.Blocks.dyor_piezo_buzzer = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BUZZER'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer'),
			examples: ['dyor_piezo_buzzer_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_BUZZER,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER','LANG_PIEZO_BUZZER_PIN','LANG_PIEZO_BUZZER_NOTONE','LANG_PIEZO_BUZZER_DO','LANG_PIEZO_BUZZER_DOs','LANG_PIEZO_BUZZER_RE','LANG_PIEZO_BUZZER_REs','LANG_PIEZO_BUZZER_MI','LANG_PIEZO_BUZZER_FA','LANG_PIEZO_BUZZER_FAs','LANG_PIEZO_BUZZER_SOL','LANG_PIEZO_BUZZER_SOLs','LANG_PIEZO_BUZZER_LA','LANG_PIEZO_BUZZER_LAs','LANG_PIEZO_BUZZER_SI','LANG_PIEZO_BUZZER_DOp','LANG_PIEZO_BUZZER_DOps','LANG_PIEZO_BUZZER_REp','LANG_PIEZO_BUZZER_REps','LANG_PIEZO_BUZZER_MIp','LANG_PIEZO_BUZZER_FAp','LANG_PIEZO_BUZZER_FAps','LANG_PIEZO_BUZZER_SOLp','LANG_PIEZO_BUZZER_SOLps','LANG_PIEZO_BUZZER_LAp','LANG_PIEZO_BUZZER_LAps','LANG_PIEZO_BUZZER_SIp','LANG_PIEZO_BUZZER_REDONDA','LANG_PIEZO_BUZZER_BLANCA','LANG_PIEZO_BUZZER_NEGRA','LANG_PIEZO_BUZZER_CORCHEA','LANG_PIEZO_BUZZER_SEMICORCHEA','LANG_PIEZO_BUZZER_FUSA','LANG_PIEZO_BUZZER_SEMIFUSA','LANG_PIEZO_BUZZER_TIE','LANG_PIEZO_BUZZER_TOOLTIP'],
			init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_BUZZER);
                this.appendDummyInput('')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER'))
                    .appendField(new Blockly.FieldImage('img/blocks/buzzer.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('PIN')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom))
                    .setCheck(Number)
                    .setAlign(Blockly.ALIGN_RIGHT);

                this.appendDummyInput('')
                    .appendField(new Blockly.FieldDropdown([
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_NOTONE') || 'SILENCIO', '0'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_DO') || 'DO', '261'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_DOs') || 'DO#', '277'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_RE') || 'RE', '293'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_REs') || 'RE#', '311'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_MI') || 'MI', '329'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_FA') || 'FA', '349'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_FAs') || 'FA#', '370'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SOL') || 'SOL', '392'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SOLs') || 'SOL#', '415'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_LA') || 'LA', '440'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_LAs') || 'LA#', '466'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SI') || 'SI', '493'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_DOp') || 'DO\'', '523'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_DOps') || 'DO\'#', '554'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_REp') || 'RE\'', '587'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_REps') || 'RE\'#', '622'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_MIp') || 'MI\'', '659'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_FAp') || 'FA\'', '698'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_FAps') || 'FA\'#', '744'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SOLp') || 'SOL\'', '784'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SOLps') || 'SOL\'#', '830'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_LAp') || 'LA\'', '880'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_LAps') || 'LA\'#', '932'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SIp') || 'SI\'', '987'],
                    ]), 'FREQ') //523
                    .appendField(new Blockly.FieldImage('img/blocks/note.png',24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);

        this.appendDummyInput('')
                    .appendField(new Blockly.FieldDropdown([
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_REDONDA') || 'REDONDA', '1500'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_BLANCA') || 'BLANCA', '750'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_NEGRA') || 'NEGRA', '375'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_CORCHEA') || 'CORCHEA', '187'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SEMICORCHEA') || 'SEMICORCHEA', '93'],
            [Facilino.locales.getKey('LANG_PIEZO_BUZZER_FUSA') || 'FUSA', '47'],
                        [Facilino.locales.getKey('LANG_PIEZO_BUZZER_SEMIFUSA') || 'SEMIFUSA', '23'],
                    ]), 'DURA')
                    .appendField(new Blockly.FieldImage('img/blocks/tempo.png',24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);

        this.appendDummyInput('')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER_TIE'))
                    .appendField(new Blockly.FieldCheckbox('FALSE'), 'TIE')
                    .appendField(new Blockly.FieldImage('img/blocks/tie.png',24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_piezo_buzzer_notone = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE) || '';
            var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			
			code+='noTone('+dropdown_pin+');\n';
            return code;
        };


        Blockly.Blocks.dyor_piezo_buzzer_notone = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BUZZER'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_notone'),
			examples: ['dyor_piezo_buzzer_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_BUZZER,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER','LANG_PIEZO_BUZZER_PIN','LANG_PIEZO_BUZZER_TOOLTIP'],
			init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_BUZZER);
                this.appendDummyInput('')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER'))
                    .appendField(new Blockly.FieldImage('img/blocks/buzzer.svg', 52*options.zoom, 35*options.zoom)).appendField('No tone');
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PIN')).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(true);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_piezo_buzzer_predef_sounds = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE) || '';
			var code= '';
			var pin='';
			if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.setups_['setup_simpleexpressions_buzzer_'+dropdown_pin]='ledcSetup(5,2000,8);\n  ledcAttachPin('+dropdown_pin+',5);\n';
				Blockly.Arduino.definitions_['define_simpleexpressions_buzzer_tone_'+dropdown_pin]='void _tone(float noteFrequency, long noteDuration, int silentDuration){\nledcWriteTone(5, noteFrequency);\n  delay(noteDuration);\n  ledcWrite(5, 0);\n  delay(silentDuration);\n}\n';
				Blockly.Arduino.definitions_['define_simpleexpressions_buzzer_bendtones_'+dropdown_pin]='void bendTones (float initFrequency, float finalFrequency, float prop, long noteDuration, int silentDuration){\n  if(initFrequency < finalFrequency){\n    for (int i=initFrequency; i<finalFrequency; i=i*prop) {\n      _tone(i,noteDuration,silentDuration);\n    }\n  }  else{\n    for (int i=initFrequency; i>finalFrequency; i=i/prop) {\n      _tone(i,noteDuration,silentDuration);\n    }\n  }\n}\n';
			}
			else
			{
				Blockly.Arduino.definitions_['define_simpleexpressions_buzzer_tone_'+dropdown_pin]='void _tone(int buzzerPin, float noteFrequency, long noteDuration, int silentDuration){\n  tone(buzzerPin, noteFrequency, noteDuration);\n  delay(noteDuration);\n  delay(silentDuration);\n}\n';
				Blockly.Arduino.definitions_['define_simpleexpressions_buzzer_bendtones_'+dropdown_pin]='void bendTones (int buzzerPin, float initFrequency, float finalFrequency, float prop, long noteDuration, int silentDuration){\n  if(initFrequency < finalFrequency){\n    for (int i=initFrequency; i<finalFrequency; i=i*prop) {\n      _tone(buzzerPin,i,noteDuration,silentDuration);\n    }\n  }  else{\n    for (int i=initFrequency; i>finalFrequency; i=i/prop) {\n      _tone(buzzerPin,i,noteDuration,silentDuration);\n}\n}\n}\n';
				pin = dropdown_pin+',';
			}
			var option=this.getFieldValue('OPTION');
			if (option==='0')
				code+='_tone('+pin+'659.26,50,30);\n_tone('+pin+'1318.51,55,25);\n_tone('+pin+'1760,60,10);\n';
			else if (option==='1')
				code+='_tone('+pin+'659.26,50,30);\n_tone('+pin+'1760,55,25);\n_tone('+pin+'1318.51,50,10);\n';
			else if (option==='2')
				code+='bendTones('+pin+'1318.51, 1567.98, 1.03, 20, 2);\ndelay(30);\nbendTones('+pin+'1318.51, 2349.32, 1.04, 10, 2);\n';
			else if (option==='3')
				code+='bendTones('+pin+'1318.51, 1760, 1.02, 30, 10);\n';
			else if (option==='4')
				code+='bendTones('+pin+'1567.98, 2349.32, 1.03, 30, 10);\n';
			else if (option==='5')
				code+='_tone('+pin+'1318.51,50,100);\n_tone('+pin+'1567.98,50,80);\n_tone('+pin+'2349.32,300,1);\n';
			else if (option==='6')
				code+='bendTones('+pin+'800, 2150, 1.02, 10, 1);\nbendTones('+pin+'2149, 800, 1.03, 7, 1);\n';
			else if (option==='7')
				code+='bendTones('+pin+'880, 2000, 1.04, 8, 3);\ndelay(200);\nfor (int i=880; i<2000; i=i*1.04) {\n  _tone('+pin+'987.77,5,10);\n}\n';
			else if (option==='8')
				code+='bendTones('+pin+'1880, 3000, 1.03, 8, 3);\ndelay(200);\nfor (int i=1880; i<3000; i=i*1.03) {\n  _tone('+pin+'1046.5,10,10);\n}\n';
			else if (option==='9')
				code+='bendTones('+pin+'700, 900, 1.03, 16, 4);\nbendTones('+pin+'899, 650, 1.01, 18, 7);\n';
			else if (option==='10')
				code+='bendTones('+pin+'100, 500, 1.04, 10, 10);\ndelay(500);\nbendTones('+pin+'400, 100, 1.04, 10, 1);\n';
			else if (option==='11')
				code+='bendTones('+pin+'1500, 2500, 1.05, 20, 8);\nbendTones('+pin+'2499, 1500, 1.05, 25, 8);\n';
			else if (option==='12')
				code+='bendTones('+pin+'2000, 6000, 1.05, 8, 3);\ndelay(50);\nbendTones('+pin+'5999, 2000, 1.05, 13, 2);\n';
			else if (option==='13')
				code+='bendTones('+pin+'1500, 2000, 1.05, 15, 8);\ndelay(100);\nbendTones('+pin+'1900, 2500, 1.05, 10, 8);\n';
			else if (option==='14')
				code+='bendTones('+pin+'880, 669, 1.02, 20, 200);\n';
			else if (option==='15')
				code+='bendTones('+pin+'1000, 1700, 1.03, 8, 2);\nbendTones('+pin+'1699, 500, 1.04, 8, 3);\nbendTones('+pin+'1000, 1700, 1.05, 9, 10);\n';
			else if (option==='16')
				code+='bendTones('+pin+'1600, 3000, 1.02, 2, 15);\n';
			else if (option==='17')
				code+='bendTones('+pin+'2000, 6000, 1.02, 2, 20);\n';
			else if (option==='18')
				code+='bendTones('+pin+'1600, 4000, 1.02, 2, 20);\nbendTones('+pin+'4000, 3000, 1.02, 2, 20);\n';
            return code;
        };
		
		Blockly.Blocks.dyor_piezo_buzzer_predef_sounds = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_BUZZER'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_predef_sounds'),
			examples: [''],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_BUZZER,
			keys: ['LANG_PIEZO_BUZZER','LANG_PIEZO_BUZZER_PIN','LANG_PIEZZO_BUZZER_PREDEF_CONNECTION','LANG_PIEZZO_BUZZER_PREDEF_DISCONNECTION','LANG_PIEZZO_BUZZER_PREDEF_BUTTON_PUSHED','LANG_PIEZZO_BUZZER_PREDEF_MODE1','LANG_PIEZZO_BUZZER_PREDEF_MODE2','LANG_PIEZZO_BUZZER_PREDEF_MODE3','LANG_PIEZZO_BUZZER_PREDEF_SURPRISE','LANG_PIEZZO_BUZZER_PREDEF_OHOOH','LANG_PIEZZO_BUZZER_PREDEF_OHOOH2','LANG_PIEZZO_BUZZER_PREDEF_CUDDLY','LANG_PIEZZO_BUZZER_PREDEF_SLEEPING','LANG_PIEZZO_BUZZER_PREDEF_HAPPY','LANG_PIEZZO_BUZZER_PREDEF_SUPER_HAPPY','LANG_PIEZZO_BUZZER_PREDEF_HAPPY_SHORT','LANG_PIEZZO_BUZZER_PREDEF_SAD','LANG_PIEZZO_BUZZER_PREDEF_CONFUSED','LANG_PIEZZO_BUZZER_PREDEF_FART1','LANG_PIEZZO_BUZZER_PREDEF_FART2','LANG_PIEZZO_BUZZER_PREDEF_FART3','LANG_PIEZO_BUZZER_PREDEF_SOUNDS_TOOLTIP'],
            //dyor_piezo_buzzer initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_BUZZER);
				this.appendDummyInput('')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER'))
                    .appendField(new Blockly.FieldImage('img/blocks/buzzer.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('PIN')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom))
                    .setCheck(Number)
                    .setAlign(Blockly.ALIGN_RIGHT);
                this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/speaker.svg', 20*options.zoom, 20*options.zoom))
                    .appendField(new Blockly.FieldDropdown([
                        [Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_CONNECTION'), '0'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_DISCONNECTION'), '1'],
                        [Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_BUTTON_PUSHED'), '2'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_MODE1'), '3'],
                        [Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_MODE2'), '4'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_MODE3'), '5'],
                        [Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_SURPRISE'), '6'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_OHOOH'), '7'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_OHOOH2'), '8'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_CUDDLY'), '9'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_SLEEPING'),'10'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_HAPPY'),'11'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_SUPER_HAPPY'),'12'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_HAPPY_SHORT'),'13'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_SAD'),'14'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_CONFUSED'),'15'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_FART1'),'16'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_FART2'),'17'],
						[Facilino.locales.getKey('LANG_PIEZZO_BUZZER_PREDEF_FART3'),'18']
                    ]), 'OPTION').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PREDEF_SOUNDS_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_piezo_buzzer_voice = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var voice = Blockly.Arduino.valueToCode(this, 'VOICE', Blockly.Arduino.ORDER_ATOMIC);
        
        var code ='';
        Blockly.Arduino.definitions_['declare_var_define_play_voice'] = JST['dyor_music_define_variables_play_voice']({});
        Blockly.Arduino.definitions_['define_play_voice_setPtr'] = JST['dyor_music_definitions_play_voice_setPtr']({});
        Blockly.Arduino.definitions_['define_play_voice_rev'] = JST['dyor_music_definitions_play_voice_rev']({});
        Blockly.Arduino.definitions_['define_play_voice_getBits'] = JST['dyor_music_definitions_play_voice_getBits']({});
            Blockly.Arduino.definitions_['define_play_voice_say'] = JST['dyor_music_definitions_play_voice_say']({});

        code += JST['dyor_music_play_voice']({
                'voice': voice
            });

            return code;
        };


        Blockly.Blocks.dyor_piezo_buzzer_voice = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_VOICE'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_voice'),
			examples: ['dyor_piezo_buzzer_voice_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_VOICE,
			keys: ['LANG_PIEZO_BUZZER','LANG_PIEZO_BUZZER_VOICE_TOOLTIP'],
            //dyor_piezo_buzzer initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_VOICE);
        this.appendDummyInput('')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER'))
                    .appendField(new Blockly.FieldImage('img/blocks/buzzer.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('VOICE').appendField(new Blockly.FieldImage('img/blocks/voice.svg', 36*options.zoom, 36*options.zoom)).setCheck('VOICE').setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
        this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_VOICE_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_piezo_buzzer_predef_voice = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code ='';
        var word = this.getFieldValue('WORD');
   
        var declare_var = 'declare_var_define_word_'+word;
        var define_var = 'dyor_music_define_variables_word_'+word;
        Blockly.Arduino.definitions_[declare_var] = JST[define_var]({});
            code='sp'+word;
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.dyor_piezo_buzzer_predef_voice = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_VOICE'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_predef_voice'),
			examples: ['dyor_piezo_buzzer_voice_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_VOICE,
			keys: ['LANG_PIEZO_BUZZER_PREDEF_VOICE_TOOLTIP'],
            //dyor_piezo_buzzer initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_VOICE);
        this.appendDummyInput('')
                    .appendField(new Blockly.FieldImage('img/blocks/voice.svg',36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);;
                this.appendDummyInput('')
                    .appendField(new Blockly.FieldDropdown([
            ['AFTERNOON','AFTERNOON'],
            ['ALERT', 'ALERT'],
            ['ARE','ARE'],
            ['BACK','BACK'],
            ['BLACK','BLACK'],
            ['BYE','BYE'],
            ['CAN','CAN'],
            ['COLOR','COLOR'],
            ['COMPLETED','COMPLETED'],
            ['CONNECTED','CONNECTED'],
                        ['DANGER', 'DANGER'],
            ['DO','DO'],
            ['DOES','DOES'],
            ['DONE','DONE'],
            ['EIGHT','EIGHT'],
            ['EVENING','EVENING'],
            ['FIRE', 'FIRE'],
            ['FIVE','FIVE'],
            ['FOUR','FOUR'],
            ['FRONT','FRONT'],
            ['GO','GO'],
            ['GOOD','GOOD'],
            ['GOODBYE','GOODBYE'],
            ['HASTA LA VISTA','HASTA_LA_VISTA'],
            ['HELLO','HELLO'],
            ['HELP','HELP'],
            ['HMMM BEER!','HMMM_BEER'],
            ['I','I'],
            ['IS', 'IS'],
            ['LEFT','LEFT'],
            ['LIKE','LIKE'],
            ['LOOK','LOOK'],
            ['ME','ME'],
            ['MORNING','MORNING'],
            ['MOTOR', 'MOTOR'],
            ['MOVE','MOVE'],
            ['NAME','NAME'],
            ['NINE','NINE'],
            ['NO','NO'],
            ['ON', 'ON'],
            ['ONE','ONE'],
            ['OFF','OFF'],
            ['PLAY','PLAY'],
            ['PLEASE','PLEASE'],
            ['READY TO START','READY_TO_START'],
            ['RED', 'RED'],
            ['RIGHT','RIGHT'],
            ['SAY','SAY'],
            ['SEE','SEE'],
            ['SEVEN','SEVEN'],
            ['SIX','SIX'],
            ['SORRY','SORRY'],
            ['STOP','STOP'],
            ['TAKE','TAKE'],
            ['TEN','TEN'],
            ['THREE','THREE'],
            ['TURN','TURN'],
            ['TWO','TWO'],
            ['WAIT','WAIT'],
            ['WE','WE'],    
            ['WHITE','WHITE'],
            ['WON','WON'],
            ['YELLOW'],
            ['YES','YES'],
            ['YOU','YOU'],
            ['ZERO']
                    ]), 'WORD').setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(true);
        this.setOutput(true,'VOICE');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PREDEF_VOICE_TOOLTIP'));
            }
        };

	Blockly.Arduino.dyor_mic = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';

            code += JST['dyor_read_analog']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

	Blockly.Blocks.dyor_mic = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MIC'),
            tags: ['mic','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_mic'),
			examples: ['dyor_mic_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MIC,
			keys: ['LANG_MIC','LANG_MIC_PIN_AO','LANG_MIC_TOOLTIP'],
            //infrared initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MIC);
        this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/microphone.png",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_MIC')).appendField(new Blockly.FieldImage('img/blocks/mic.svg', 36*options.zoom, 36*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_MIC_PIN_AO')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_MIC_TOOLTIP'));
            }
        };

	Blockly.Arduino.dyor_mic_digital = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];

            code += JST['dyor_read_digital']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.dyor_mic_digital = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MIC'),
            tags: ['mic','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_mic_digital'),
			examples: ['dyor_mic_digital_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MIC,
			keys: ['LANG_MIC','LANG_MIC_PIN_DO','LANG_MIC_DIGITAL_TOOLTIP'],
            //infrared initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MIC);
        this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/microphone.png",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_MIC')).appendField(new Blockly.FieldImage('img/blocks/mic.svg', 36*options.zoom, 36*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_MIC_PIN_DO')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Boolean);
                this.setTooltip(Facilino.locales.getKey('LANG_MIC_DIGITAL_TOOLTIP'));
            }
        };
		
	Blockly.Arduino.dyor_piezo_buzzer_melody = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE) || '';
        var code ='';
		var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
		if (this.getInputTargetBlock('MELODY')===null)
			return code;
		
		if(this.getInputTargetBlock('MELODY').type==='dyor_piezo_buzzer_predef_melody')
		{
			
			var melody = Blockly.Arduino.valueToCode(this, 'MELODY', Blockly.Arduino.ORDER_ATOMIC);
			if (this.getFieldValue('WAIT')==='FALSE')
			{
				Blockly.Arduino.definitions_['define_play_melody'] = JST['dyor_music_definitions_play_melody']({});
				code += JST['dyor_music_play_melody']({'pin': dropdown_pin,'melody': melody});
				Blockly.Arduino.play_melody = '';
			}
			else
			{
				
				Blockly.Arduino.definitions_['define_prepare_melody'] = JST['dyor_music_definitions_prepare_melody']({});
				Blockly.Arduino.definitions_['declare_var_current_melody_ptr']='volatile uint16_t* _current_melody_ptr;\n';
				Blockly.Arduino.definitions_['declare_var_melody_pin']='volatile int _melody_pin=0;\n';
				Blockly.Arduino.definitions_['declare_var_melody_counter']='volatile int _melody_counter=0;\n';
				Blockly.Arduino.definitions_['declare_var_melody_length']='volatile int _melody_length=0;\n';
				Blockly.Arduino.definitions_['declare_var_melody_status']='volatile uint8_t _melody_status=-1;\n';
				Blockly.Arduino.definitions_['declare_var_melody_next_time']='volatile unsigned long _melody_next_time=0;\n';
				
				Blockly.Arduino.definitions_['define_play_melody_interrupt'] = JST['dyor_music_definitions_play_melody_interrupt']({});
				Blockly.Arduino.play_melody = 'playMelodyInterrupt();\n';
					
				/*//Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER1_COMPA_vect){\n ';
				Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER0_COMPA_vect){\n ';
				Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
				Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_melody;
				Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_led_matrix_stream;
				Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_RGBstream;
				//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
				Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
				//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
				Blockly.Arduino.definitions_['define_backgroundtask'] += '}\n';*/
				
				
				var Blocks=Blockly.getMainWorkspace().getAllBlocks();
				var block_found = Blocks.find(function (block){return (block.type=='dyor_task');});
				if (block_found===undefined)
				{
					Blockly.Arduino.definitions_['define_task'] = 'SIGNAL (TIMER0_COMPA_vect){\n';
					Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
					Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_melody;	
					Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_led_matrix_stream;	
					Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_RGBstream;				
					//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
					Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
					//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
					Blockly.Arduino.definitions_['define_task'] += '}\n';
				}
				
				
				code += JST['dyor_music_prepare_melody']({
						'pin': dropdown_pin,
						'melody': melody
				});
			}
		}
		else if (this.getInputTargetBlock('MELODY').type==='variables_get')
		{
			//IGNORES THE WAIT CHECKBOX
			var melody = Blockly.Arduino.valueToCode(this, 'MELODY', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['define_play_melody'] = JST['dyor_music_definitions_play_melody']({});
			code += JST['dyor_music_play_melody1']({'pin': dropdown_pin,'melody': melody});
			Blockly.Arduino.play_melody = '';
		}
		else
		{
			var melody = Blockly.Arduino.valueToCode(this, 'MELODY', Blockly.Arduino.ORDER_ATOMIC).substring(1);
			var s = melody.replace(',','');
			//k="1";
			var enc='_melody'+this.NumMelodies;
			/*for (var i = 0; i < s.length; i++) {
				// create block
				var a = s.charCodeAt(i);
				// bitwise XOR
				var b = (a ^ k)%26+97;
				enc = enc + String.fromCharCode(b);
			}*/
			melody = melody.substring(0,melody.length-1);
			Blockly.Arduino.definitions_['declare_var_play_melody'+enc] = 'const uint16_t '+enc+'[] = {'+melody+'};\n';
			
					
				if (this.getFieldValue('WAIT')==='FALSE')
				{
					Blockly.Arduino.definitions_['define_play_melody'] = JST['dyor_music_definitions_play_melody']({});
					code += JST['dyor_music_play_melody']({
					'pin': dropdown_pin,
					'melody': enc
					});
					Blockly.Arduino.play_melody = '';
				}
				else
				{
					
					Blockly.Arduino.definitions_['define_prepare_melody'] = JST['dyor_music_definitions_prepare_melody']({});
					Blockly.Arduino.definitions_['declare_var_current_melody_ptr']='volatile uint16_t* _current_melody_ptr;\n';
					Blockly.Arduino.definitions_['declare_var_melody_pin']='volatile int _melody_pin=0;\n';
					Blockly.Arduino.definitions_['declare_var_melody_counter']='volatile int _melody_counter=0;\n';
					Blockly.Arduino.definitions_['declare_var_melody_length']='volatile int _melody_length=0;\n';
					Blockly.Arduino.definitions_['declare_var_melody_status']='volatile uint8_t _melody_status=-1;\n';
					Blockly.Arduino.definitions_['declare_var_melody_next_time']='volatile unsigned long _melody_next_time=0;\n';
					
					Blockly.Arduino.definitions_['define_play_melody_interrupt'] = JST['dyor_music_definitions_play_melody_interrupt']({});
					Blockly.Arduino.play_melody = 'playMelodyInterrupt();\n';
					
					//Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER1_COMPA_vect){\n _currentTime=millis(); \n ';
					/*Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER0_COMPA_vect){\n _currentTime=millis(); \n ';
					Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
					Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_melody;
					Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_led_matrix_stream;
					Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_RGBstream;
					//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
					Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
					//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
					Blockly.Arduino.definitions_['define_backgroundtask'] += '}\n';*/
					var Blocks=Blockly.getMainWorkspace().getAllBlocks();
					var block_found = Blocks.find(function (block){return (block.type=='dyor_task');});
					if (block_found===undefined)
					{
						Blockly.Arduino.definitions_['define_task'] = 'SIGNAL (TIMER0_COMPA_vect){\n';
						Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
						Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_melody;	
						Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_led_matrix_stream;	
						Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_RGBstream;				
						//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
						Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
						//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
						Blockly.Arduino.definitions_['define_task'] += '}\n';
					}
						
					code += JST['dyor_music_prepare_melody']({
							'pin': dropdown_pin,
							'melody': enc
					});
				}
		}
        return code;
        };


        Blockly.Blocks.dyor_piezo_buzzer_melody = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_melody'),
			examples: ['dyor_piezo_buzzer_melody_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER','LANG_PIEZO_BUZZER_PIN','LANG_PIEZO_BUZZER_WAIT','LANG_PIEZO_BUZZER_MELODY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
        this.appendDummyInput('')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER'))
                    .appendField(new Blockly.FieldImage('img/blocks/buzzer.svg', 52*options.zoom, 35*options.zoom));
                this.appendValueInput('PIN')
                    .appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom))
                    .setCheck(Number)
                    .setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('MELODY').appendField(new Blockly.FieldImage('img/blocks/clef.svg', 36*options.zoom, 36*options.zoom)).setCheck(['MELODY',String]).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_PIEZO_BUZZER_WAIT')).appendField(new Blockly.FieldCheckbox('FALSE'),'WAIT').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				Facilino.NumMelodies=Facilino.NumMelodies+1;
				this.NumMelodies=Facilino.NumMelodies;
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_MELODY_TOOLTIP'));
            },
			onchange: function()
			{
				if (this!==undefined)
					Blockly.Arduino.play_melody='';
			}
        };
	
	Blockly.Arduino.dyor_piezo_buzzer_predef_melody = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code= '';
        
        var option = this.getFieldValue('OPTION');
		
		if (option==='1')
		{
            Blockly.Arduino.definitions_['declare_var_play_melody_beethoven'] = 'const uint16_t BEETHOVEN[] = {0,187,392,187,392,187,392,187,311,750,0,187,349,187,349,187,349,187,294,375};\n';
			code='BEETHOVEN';
		}
        else if (option==='2')
		{
			Blockly.Arduino.definitions_['declare_var_play_melody_break_free'] = 'const uint16_t BREAK_FREE[] = {494,187,659,375,740,375,740,375,740,187,831,1312,0,562,494,187,659,375,740,375,880,375,831,937};\n';
			code='BREAK_FREE';
		}
        else if (option==='3')
		{
          Blockly.Arduino.definitions_['declare_var_play_melody_champions'] = 'const uint16_t CHAMPIONS[] = {698,750,659,187,698,187,659,375,523,562,440,187,587,375,440,750,0,562,0,375,523,187,698,750,784,187,880,187,1047,375,880,562,587,187,659,187,587,750};\n';
          code='CHAMPIONS';
		}
        else if (option==='4')
		{
			Blockly.Arduino.definitions_['declare_var_play_game_thrones'] = 'const uint16_t GAME_THRONES[] = {1568,562,1047,562,1245,93,1397,93,1568,375,1047,375,1245,93,1397,93,1175,1875,1397,562,932,562,1245,93,1175,93,1397,375,932,562,1245,93,1175,93,1047,750};\n';
			code='GAME_THRONES';
		}
        else if (option==='5')
		{
			Blockly.Arduino.definitions_['declare_var_play_imagine'] = 'const uint16_t IMAGINE[] = {440,187,523,187,440,187,523,375,659,187,659,375,587,187,440,750,0,375,494,187,494,562,494,375,523,187,587,937,659,187,784,375,659,93,659,93,523,375};\n';
			code='IMAGINE';
		}
        else if (option==='6')
		{
			//Blockly.Arduino.definitions_['declare_var_play_imperial_march'] = 'const uint16_t IMPERIAL_MARCH[] = {440,375,440,375,440,375,349,250,523,93,440,375,349,250,523,187,440,750,659,375,659,375,659,375,698,250,523,93,415,375,349,250,523,187,440,750};\n';
			Blockly.Arduino.definitions_['declare_var_play_imperial_march'] = 'const uint16_t IMPERIAL_MARCH[] = {440,375,440,375,440,375,349,281,523,93,440,375,349,281,523,93,440,750,659,375,659,375,659,375,698,281,523,93,415,375,349,281,523,93,440,750,880,375,440,281,440,93,880,375,831,281,784,93,740,93,698,93,740,187,0,187,446,281,622,375,587,281,554,93,523,93,494,93,523,187,0,187,349,187,415,375,349,281,392,93,523,375,440,281,523,93,659,750,880,375,440,281,440,93,880,375,831,281,784,93,740,93,698,93,740,187,0,187,446,281,622,375,587,281,554,93,523,93,494,93,523,187,0,187,330,187,415,375,330,281,523,93,440,375,349,281,523,93,440,750};\n';
			code='IMPERIAL_MARCH';
		}
        else if (option==='7')
		{
			Blockly.Arduino.definitions_['declare_var_play_love'] = 'const uint16_t LOVE[] = {392,187,392,187,392,187,330,187,392,750,0,375,392,187,392,187,494,187,494,187,523,187,523,187,440,750};\n';
			code='LOVE';
		}
        else if (option==='8')
		{
			Blockly.Arduino.definitions_['declare_var_play_no_cry'] = 'const uint16_t NO_CRY[] = {523,562,494,187,523,187,494,187,494,187,440,562,0,562,659,375,698,187,659,187,698,187,523,187};\n';
			code='NO_CRY';
		}
        else if (option==='9')
		{
			Blockly.Arduino.definitions_['declare_var_play_thriller'] = 'const uint16_t THRILLER[] = {196,187,220,187,262,187,294,187,220,187,0,93,220,93,0,187,220,93};\n';
			code='THRILLER';
		}
		else if (option==='10')
		{
			Blockly.Arduino.definitions_['declare_var_play_batman'] = 'const uint16_t BATMAN[] = {245,250,277,250,294,250,392,500,370,500,349,1333,0,250,245,250,277,250,294,250,370,500,0,250,415,250,446,1000};\n';
			code='BATMAN';
		}
		else if (option==='11')
		{
			Blockly.Arduino.definitions_['declare_var_play_wonder_woman'] = 'const uint16_t WONDER_WOMAN[] = {740,187,880,187,1109,187,277,10,1046,177,880,187,277,10,988,177,880,187,277,10,988,177,880,187,277,10,1109,177,277,10,988,187,880,187,277,10,988,177,880,187,277,10,988,177,880,187,277,10,988,177,277,10,1109,177,880,187,277,10,1109,177,880,187,277,10,1109,177,880,187,277,10,1046,177,277,10,1109,177,880,187,277,10,1046,177,880,187,277,10,1046,177,880,187};\n';
			code='WONDER_WOMAN';
		}
		else if (option==='12')
		{
			Blockly.Arduino.definitions_['declare_var_play_banana_song'] = 'const uint16_t BANANA_SONG[] = {440,281,440,281,440,562,440,281,440,281,440,140,440,562,554,281,554,281,554,562,554,281,554,281,554,140,554,562,659,281,659,281,659,562,659,281,659,281,659,140,659,562,494,281,554,281,554,281,494,281,440,1125,554,281,659,281,554,281,554,281,494,281,440,1125,494,281,554,281,554,281,494,281,440,1125,494,140,494,140,494,140,494,140,330,281,330,140,554,281,494,140,554,140,494,140,554,140,494,140,440,140,370,140,440,281,440,281,440,562,440,281,440,281,440,140,440,562};\n';
			code='BANANA_SONG';
		}
		else if (option==='13')
		{
			Blockly.Arduino.definitions_['declare_var_play_dragon_ball'] = 'const uint16_t DRAGON_BALL[] = {740,244,740,366,659,244,554,122,740,181,0,976,740,122,740,122,740,244,649,244,554,122,740,122,0,976,494,122,494,122,494,122,494,122,494,244,440,244,494,122,494,122,494,122,494,122,494,244,440,244,370,244,370,244,370,244,330,122,370,122,0,976,740,244,740,366,659,244,554,122,740,181,0,976,740,122,740,122,740,244,649,244,554,122,740,122,0,976,494,122,494,122,494,122,494,122,494,244,440,244,494,122,494,122,494,122,494,122,494,244,440,244,554,1220,554,244,659,244,740,488,740,488,740,488,659,244,554,244,659,244,554,244,659,244,740,244,0,488,554,244,659,244,740,488,0,488,880,244,831,244,740,122,659,366,0,488,880,244,831,244,740,122,659,244,740,976};\n';
			code='DRAGON_BALL';
		}
		else if (option==='14')
		{
			Blockly.Arduino.definitions_['declare_var_play_seven_nations_army'] = 'const uint16_t SEVEN_NATIONS_ARMY[] = {330,759,330,252,392,378,330,125,0,252,294,252,262,1012,245,1012,330,759,330,252,392,378,330,125,0,252,294,252,262,506,294,252,262,252,245,1012,330,759,330,252,392,378,330,125,0,252,294,252,262,1012,245,1012};\n';
			code='SEVEN_NATIONS_ARMY';
		}
		else if (option==='15')
		{
			Blockly.Arduino.definitions_['declare_var_play_spiderman'] = 'const uint16_t SPIDERMAN[] = {440,375,523,187,659,1125,587,375,523,187,440,1125,440,375,523,187,659,375,698,187,659,280,587,375,523,187,440,1125,587,375,698,187,880,1125,784,375,698,187,587,1125,440,375,523,187,659,375,698,187,659,280,587,375,523,187,440,562};\n';
			code='SPIDERMAN';
		}
		else if (option==='16')
		{
			Blockly.Arduino.definitions_['declare_var_play_pokemon'] = 'const uint16_t POKEMON[] = {294,187,294,187,294,187,294,375,0,187,294,187,262,187,220,187,175,187,0,562,175,187,294,375,294,375,262,187,233,187,262,375,0,1500,233,187,311,375,311,375,311,187,294,375,294,187,233,187,233,187,0,375,233,187,294,375,294,187,262,375,233,375,294,1125,0,375,294,187,294,187,294,187,294,375,294,187,262,187,220,187,175,562,294,187,294,562,262,375,233,375,262,937,0,750,311,187,311,187,311,187,311,375,0,187,311,187,294,375,262,187,262,187,233,187,0,187,233,187,294,275,294,187,262,375,233,187,294,1125,0,187,294,187,349,187,392,187};\n';
			code='POKEMON';
		}
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.dyor_piezo_buzzer_predef_melody = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_predef_melody'),
			examples: ['dyor_piezo_buzzer_melody_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER_PREDEF_MELODY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
        this.appendDummyInput('')
                    .appendField(new Blockly.FieldImage('img/blocks/clef.svg',36*options.zoom, 36*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/musical_notes.svg', 48*options.zoom, 48*options.zoom));
                this.appendDummyInput('')
                    .appendField(new Blockly.FieldDropdown([
                        ['BEETHOVEN', '1'],
            ['I WANT TO BREAK FREE', '2'],
                        ['WE\'RE THE CHAMPIONS', '3'],
            ['GAME OF THRONES', '4'],
                        ['IMAGINE', '5'],
            ['STAR WARS', '6'],
                        ['LOVE IS IN THE AIR', '7'],
            ['NO WOMAN, NO CRY', '8'],
            ['THRILLER', '9'],
			['BATMAN THEME','10'],
			['WONDER WOMAN THEME','11'],
			['BANANA SONG','12'],
			['DRAGON BALL','13'],
			['SEVEN NATIONS ARMY','14'],
			['SPIDERMAN','15'],
			['POKEMON','16']
                    ]), 'OPTION').setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(false);
        this.setOutput(true,'MELODY');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PREDEF_MELODY_TOOLTIP'));
            }
        };
		
	/*Blockly.Arduino.dyor_piezo_buzzer_play_melody = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE) || '';
        var code ='';
		var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
		Blockly.Arduino.definitions_['declare_var_current_melody_ptr']='volatile uint16_t* _current_melody_ptr;\n';
		Blockly.Arduino.definitions_['declare_var_melody_pin']='volatile int _melody_pin=0;\n';
		Blockly.Arduino.definitions_['declare_var_melody_counter']='volatile int _melody_counter=0;\n';
		Blockly.Arduino.definitions_['declare_var_melody_length']='volatile int _melody_length=0;\n';
		Blockly.Arduino.definitions_['declare_var_melody_status']='volatile uint8_t _melody_status=-1;\n';
		Blockly.Arduino.definitions_['declare_var_melody_next_time']='volatile unsigned long _melody_next_time=0;\n';
		
		Blockly.Arduino.definitions_['define_task'] = 'SIGNAL (TIMER0_COMPA_vect){\n _currentTime=millis(); \n ';
		Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
		Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.statementToCode(this, 'DO');
		Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
		Blockly.Arduino.definitions_['define_task'] += '}\n';
		Blockly.Arduino.definitions_['define_play_melody_interrupt'] = JST['dyor_music_definitions_play_melody_interrupt']({});
		code += 'playMelodyInterrupt();\n';
			
        return code;
        };


        Blockly.Blocks.dyor_piezo_buzzer_play_melody = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_play_melody'),
			examples: ['dyor_piezo_buzzer_melody_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER_PLAY_MELODY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
				this.appendDummyInput('')
                    .appendField(new Blockly.FieldImage('img/blocks/play-button.svg',36*options.zoom, 36*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/musical_notes.svg', 48*options.zoom, 48*options.zoom));
                this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_PLAY_MELODY_TOOLTIP'));
            },
			onchange: function(){
				if (this.getRootBlock().type!=='dyor_task')
					this.setWarningText('This instruction must be placed inside an interrupt.');
				else
					this.setWarningText(null);
			}
        };*/
		
	Blockly.Arduino.dyor_piezo_buzzer_stop_melody = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var code ='';
		Blockly.Arduino.definitions_['declare_var_melody_status']='volatile uint8_t _melody_status=-1;\n';
		
		code += '_melody_status=0;\n';
			
        return code;
        };


        Blockly.Blocks.dyor_piezo_buzzer_stop_melody = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_stop_melody'),
			examples: ['dyor_piezo_buzzer_melody_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER_STOP_MELODY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
				this.appendDummyInput('')
                    .appendField(new Blockly.FieldImage('img/blocks/stop-button.svg',36*options.zoom, 36*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/musical_notes.svg', 48*options.zoom, 48*options.zoom));
                this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_STOP_MELODY_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_piezo_buzzer_isplaying_melody = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var code ='';
		Blockly.Arduino.definitions_['declare_var_melody_status']='volatile uint8_t _melody_status=-1;\n';
		
		code += '(_melody_status==1)';
			
        return [code, Blockly.Arduino.ORDER_ATOMIC];
        };
		
		Blockly.Blocks.dyor_piezo_buzzer_isplaying_melody = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_buzzer_isplaying_melody'),
			examples: ['dyor_piezo_buzzer_melody_example.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
            //dyor_piezo_buzzer initialization
			keys: ['LANG_PIEZO_BUZZER_ISPLAYING_MELODY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
        this.appendDummyInput('')
                    .appendField(new Blockly.FieldImage('img/blocks/play-button.svg',36*options.zoom, 36*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/musical_notes.svg', 48*options.zoom, 48*options.zoom));
        this.setInputsInline(false);
        this.setOutput(true,Boolean);
                this.setTooltip(Facilino.locales.getKey('LANG_PIEZO_BUZZER_ISPLAYING_MELODY_TOOLTIP'));
            }
        };
		

		function noteCreator(item,index){
			var duration,note;
			if (item.duration==='redondap')
				duration='2250';
			else if (item.duration==='redonda')
				duration='1500';
			else if (item.duration==='blancap')
				duration='1125';
			else if (item.duration==='blanca')
				duration='750';
			else if (item.duration==='negrap')
				duration='562';
			else if (item.duration==='negra')
				duration='375';
			else if (item.duration==='corcheap')
				duration='281';
			else if (item.duration==='corchea')
				duration='187';
			else if (item.duration==='semicorcheap')
				duration='141';
			else if (item.duration==='semicorchea')
				duration='93';
			if (item.octave==='vb')
			{
				if (item.note==='silencio')
					note='0';
				else if (item.note==='do')
					note='131';
				else if (item.note==='dos')
					note='139';
				else if (item.note==='reb')
					note='139';
				else if (item.note==='re')
					note='147';
				else if (item.note==='res')
					note='156';
				else if (item.note==='mib')
					note='156';
				else if (item.note==='mi')
					note='165';
				else if (item.note==='fa')
					note='175';
				else if (item.note==='fas')
					note='185';
				else if (item.note==='solb')
					note='185';
				else if (item.note==='sol')
					note='196';
				else if (item.note==='sols')
					note='208';
				else if (item.note==='lab')
					note='208';
				else if (item.note==='la')
					note='220';
				else if (item.note==='las')
					note='233';
				else if (item.note==='sib')
					note='233';
				else if (item.note==='si')
					note='245';
			}
			else if (item.octave==='va')
			{
				if (item.note==='silencio')
					note='0';
				else if (item.note==='do')
					note='523';
				else if (item.note==='dos')
					note='554';
				else if (item.note==='reb')
					note='554';
				else if (item.note==='re')
					note='587';
				else if (item.note==='res')
					note='622';
				else if (item.note==='mib')
					note='622';
				else if (item.note==='mi')
					note='659';
				else if (item.note==='fa')
					note='698';
				else if (item.note==='fas')
					note='740';
				else if (item.note==='solb')
					note='740';
				else if (item.note==='sol')
					note='784';
				else if (item.note==='sols')
					note='831';
				else if (item.note==='lab')
					note='831';
				else if (item.note==='la')
					note='880';
				else if (item.note==='las')
					note='932';
				else if (item.note==='sib')
					note='932';
				else if (item.note==='si')
					note='988';
			}
			else
			{
				if (item.note==='silencio')
					note='0';
				else if (item.note==='do')
					note='262';
				else if (item.note==='dos')
					note='277';
				else if (item.note==='reb')
					note='277';
				else if (item.note==='re')
					note='294';
				else if (item.note==='res')
					note='311';
				else if (item.note==='mib')
					note='311';
				else if (item.note==='mi')
					note='330';
				else if (item.note==='fa')
					note='349';
				else if (item.note==='fas')
					note='370';
				else if (item.note==='solb')
					note='370';
				else if (item.note==='sol')
					note='392';
				else if (item.note==='sols')
					note='415';
				else if (item.note==='lab')
					note='415';
				else if (item.note==='la')
					note='440';
				else if (item.note==='las')
					note='446';
				else if (item.note==='sib')
					note='446';
				else if (item.note==='si')
					note='494';
			}
			var octave=item.octave;
			if (octave!=='')
				octave='_'+octave;
			var note_name=item.note+'_'+item.duration+octave;
			Blockly.Arduino['dyor_piezo_music_'+note_name] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var melody = Blockly.Arduino.valueToCode(this, 'MELODY', Blockly.Arduino.ORDER_ATOMIC) || '';
				code = ','+note+','+duration+melody;
				return [code, Blockly.Arduino.ORDER_ATOMIC];
			};
			var note_cat;
			if (item.note==='silencio')
			{
				note_cat='LANG_SUBCATEGORY_MUSIC_SILENCE';
			}
			else
			{
				if (item.octave==='vb')
					note_cat='LANG_SUBCATEGORY_C3';
				else if (item.octave==='')
					note_cat='LANG_SUBCATEGORY_C4';
				else if (item.octave==='va')
					note_cat='LANG_SUBCATEGORY_C5';
			}
			var note_path = 'img/blocks/'+note_name+'.svg';
			Blockly.Blocks['dyor_piezo_music_'+note_name] = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
			subsubcategory: Facilino.locales.getKey(note_cat),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_music'),
			examples: ['dyor_piezo_buzzer_melody_example1.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
			keys: ['LANG_MUSIC_NOTE_TOOLTIP'],
            //dyor_piezo_buzzer initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
                this.appendValueInput('MELODY').appendField(new Blockly.FieldImage(note_path, 30*options.zoom, 86.6*options.zoom)).setCheck(String).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setOutput(true,String);
                this.setTooltip(Facilino.locales.getKey('LANG_MUSIC_NOTE_TOOLTIP'));
				}
			};
		}
		

		var d_alt=["redondap","redonda","blancap","blanca","negrap","negra","corcheap","corchea","semicorcheap","semicorchea"];
		var n_alt=["do","dos","reb","re","res","mib","mi","fa","fas","solb","sol","sols","lab","la","las","sib","si"];
		var s_alt=["vb","","va"];

		var notes=[{note: 'silencio',duration: 'redondap',octave:''},
				   {note: 'silencio',duration: 'redonda',octave:''},
				   {note: 'silencio',duration: 'blancap',octave:''},
				   {note: 'silencio',duration: 'blanca',octave:''},
				   {note: 'silencio',duration: 'negrap',octave:''},
				   {note: 'silencio',duration: 'negra',octave:''},
				   {note: 'silencio',duration: 'corcheap',octave:''},
				   {note: 'silencio',duration: 'corchea',octave:''},
				   {note: 'silencio',duration: 'semicorcheap',octave:''},
				   {note: 'silencio',duration: 'semicorchea',octave:''}];
				   
		var notes_counter=notes.length;		
		s_alt.forEach(function (si){
			n_alt.forEach(function (ni){				
				d_alt.forEach(function (di){
					notes[notes_counter]={note: ni, duration: di, octave: si};
					notes_counter=notes_counter+1;
				});
			});
		});
		
		notes.forEach(noteCreator);

    Blockly.Arduino.dyor_piezo_music_end = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = ';';
        return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

        Blockly.Blocks.dyor_piezo_music_end = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SOUND'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MUSIC'),
            tags: ['buzzer','sound'],
            helpUrl: Facilino.getHelpUrl('dyor_piezo_music'),
			examples: ['dyor_piezo_buzzer_melody_example1.bly'],
			category_colour: Facilino.LANG_COLOUR_SOUND,
			colour: Facilino.LANG_COLOUR_SOUND_MUSIC,
			keys: ['LANG_MUSIC_NOTE_TOOLTIP'],
            //dyor_piezo_buzzer initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SOUND_MUSIC);
        this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/end.svg',30*options.zoom, 86.6*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
        this.setOutput(true,String);
                this.setTooltip(Facilino.locales.getKey('LANG_MUSIC_NOTE_TOOLTIP'));
            }
        };

		Blockly.Arduino.dyor_servo_cont1 = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE) || '';
            var value_speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
			
			var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			
			if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['servo_definitions_variables']({pin: dropdown_pin});
			}
			else if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['ESP_servo_definitions_variables']({pin: dropdown_pin});
			}

            if (Facilino.isVariable(dropdown_pin)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + dropdown_pin] = JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin
                });
            }

            code += JST['dyor_servo_cont1']({
                'dropdown_pin': dropdown_pin,
                'value_speed': value_speed
            });
            return code;
        };

        Blockly.Blocks.dyor_servo_cont1 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MOTORS'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_servo_cont1'),
			examples: ['dyor_servo_cont_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
			keys: ['LANG_SERVO_CONT','LANG_SERVO_CONT_PIN','LANG_SPEED','LANG_SERVO_CONT_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
		this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_CONT')).appendField(new Blockly.FieldImage('img/blocks/servo_cont.svg', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        	this.appendValueInput('PIN').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SERVO_CONT')).appendField(new Blockly.FieldImage('img/blocks/servo_cont.svg', 63*options.zoom, 63*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number);
                this.appendValueInput('SPEED').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SPEED')+' (-100~100)').appendField(new Blockly.FieldImage('img/blocks/speedometer.svg', 20*options.zoom, 20*options.zoom));
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_CONT_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };
		
		Blockly.Arduino.dyor_dc_motor1 = function() {
            var dropdown_pin1 = Blockly.Arduino.valueToCode(this, 'PIN1', Blockly.Arduino.ORDER_ATOMIC) || '';
			var dropdown_pin2 = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC) || '';
            var value_dir = this.getFieldValue('ROT');
            var value_speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a1 = Facilino.findPinMode(dropdown_pin1);
			var a2 = Facilino.findPinMode(dropdown_pin2);
            code += a1['code'];
            dropdown_pin1 = a1['pin'];
			code += a2['code'];
            dropdown_pin2 = a2['pin'];
			if (Facilino.isVariable(dropdown_pin1)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
            } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin1] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
            }
			if (Facilino.isVariable(dropdown_pin2)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
            } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin2] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
            }
			code += '  {\n';
			code +='    int _speed = ((((int)('+value_speed+'))*255)/100);\n';
			code +='    if (_speed>0){\n';
			code +='      analogWrite('+dropdown_pin1+',_speed);\n';
			code +='      digitalWrite('+dropdown_pin2+',0);\n';
			code +='    }\n';
			code +='    else if (_speed<0){\n';
			code +='       digitalWrite('+dropdown_pin1+',0);\n';
			code +='       analogWrite('+dropdown_pin2+',_speed);\n';
			code +='    }\n';
			code +='    else{\n';
			code +='      digitalWrite('+dropdown_pin1+',1);\n';
			code +='      digitalWrite('+dropdown_pin2+',1);\n';
			code +='    }\n';
			code += '  }\n';
            return code;
        };

        Blockly.Blocks.dyor_dc_motor1 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MOTORS'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_dc_motor1'),
			examples: ['dyor_dc_motor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
			keys: ['LANG_DC_MOTOR','LANG_SERVO_CONT_PIN','LANG_SPEED','LANG_SERVO_DC_MOTOR_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
		this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_DC_MOTOR')).appendField(new Blockly.FieldImage('img/blocks/engine.svg', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/drv8833.png', 63*options.zoom, 63*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/add-icon.png',63*options.zoom, 63*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/micro_gear_motor.png', 63*options.zoom, 63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        	this.appendValueInput('PIN1').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')+'1').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN2').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')+'2').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('SPEED').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SPEED')+' (-100~100)').appendField(new Blockly.FieldImage('img/blocks/speedometer.svg', 20*options.zoom, 20*options.zoom));
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_DC_MOTOR_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };

        Blockly.Arduino.dyor_servo_move = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
            var value_degree = Blockly.Arduino.valueToCode(this, 'DEGREE', Blockly.Arduino.ORDER_ATOMIC);
			var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			var c = Facilino.findPinMode(value_degree);
            code += c['code'];
            value_degree = c['pin'];
			
			if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['servo_definitions_variables']({pin: dropdown_pin});
			}
			else if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['ESP_servo_definitions_variables']({pin: dropdown_pin});
			}
			else
			    Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['servo_definitions_variables']({pin: dropdown_pin});

            Blockly.Arduino.setups_['dyor_servo_move_' + dropdown_pin] = JST['dyor_servo_setups']({'dropdown_pin': dropdown_pin});

            code += JST['dyor_servo_move']({
                'dropdown_pin': dropdown_pin,
                'value_degree': value_degree
            });
            return code;
        };

        Blockly.Blocks.dyor_servo_move = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MOTORS'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_servo_move'),
			examples: ['dyor_servo_move_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
			keys: ['LANG_SERVO_MOVE','LANG_SERVO_MOVE_PIN','LANG_DEGREES','LANG_SERVO_MOVE_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE')).appendField(new Blockly.FieldImage('img/blocks/servo.svg', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        	this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_PIN')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE')).appendField(new Blockly.FieldImage('img/blocks/servo.svg', 52*options.zoom, 63*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_PIN')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number);
		this.appendValueInput('DEGREE', Number).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_DEGREES')).appendField(new Blockly.FieldImage('img/blocks/angle.svg', 20*options.zoom, 20*options.zoom));
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_MOVE_TOOLTIP'));
            }
        };
		
		Blockly.Arduino['stepper_setspeed4'] = function() {
            var pin1 = this.getFieldValue('PIN1');
			var pin2 = this.getFieldValue('PIN2');
			var pin3 = this.getFieldValue('PIN3');
			var pin4 = this.getFieldValue('PIN4');
            var total_steps = this.getFieldValue('TOTAL_STEPS');
			var speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
			var stepper_name = '_stepper_'+pin1+'_'+pin2+'_'+pin3+'_'+pin4;
			Blockly.Arduino.definitions_['include_stepper'] = '#include <Stepper.h>';
			Blockly.Arduino.definitions_['declare_var_define'+stepper_name]='Stepper '+stepper_name+'('+total_steps+','+pin1+','+pin2+','+pin3+','+pin4+');\n';
            var code = stepper_name+'.setSpeed('+speed+');\n';
            return code;
        };
		
		Blockly.Blocks['stepper_setspeed4'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MOTORS'),
		  tags: ['stepper','movement'],
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
		  helpUrl: Facilino.getHelpUrl('stepper_setspeed4'),
		  examples: ['stepper_example.bly'],
		  keys: ['LANG_STEPPER','LANG_STEPPER_SET_SPEED','LANG_STEPPER_TOTAL_STEPS','LANG_STEPPER_PIN1','LANG_STEPPER_PIN2','LANG_STEPPER_PIN3','LANG_STEPPER_PIN4','LANG_STEPPER_RPM','LANG_STEPPER_SET_SPEED_TOOLTIP'],
		  init: function() {
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_STEPPER')).appendField(new Blockly.FieldImage('img/blocks/stepper.png', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_STEPPER_TOTAL_STEPS')).appendField(new Blockly.FieldNumber(2048, 0, Infinity, 1),"TOTAL_STEPS").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_STEPPER_PIN1')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN1").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN2')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN2").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN3')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN3").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN4')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN4").setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput("SPEED").setCheck(Number).setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_STEPPER_SET_SPEED')+' ('+Facilino.locales.getKey('LANG_STEPPER_RPM')+')').appendField(new Blockly.FieldImage('img/blocks/speedometer.svg', 20*options.zoom, 20*options.zoom));
			this.setPreviousStatement(true, "code");
			this.setNextStatement(true, "code");
			this.setInputsInline(false);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
			this.setTooltip(Facilino.locales.getKey('LANG_STEPPER_SET_SPEED_TOOLTIP'));
		  }
		};
		
		Blockly.Arduino['stepper_steps4'] = function() {
            var pin1 = this.getFieldValue('PIN1');
			var pin2 = this.getFieldValue('PIN2');
			var pin3 = this.getFieldValue('PIN3');
			var pin4 = this.getFieldValue('PIN4');
            var total_steps = this.getFieldValue('TOTAL_STEPS');
			var step = Blockly.Arduino.valueToCode(this, 'STEPS', Blockly.Arduino.ORDER_ATOMIC);
			var stepper_name = '_stepper_'+pin1+'_'+pin2+'_'+pin3+'_'+pin4;
			Blockly.Arduino.definitions_['include_stepper'] = '#include <Stepper.h>';
			Blockly.Arduino.definitions_['declare_var_define'+stepper_name]='Stepper '+stepper_name+'('+total_steps+','+pin1+','+pin2+','+pin3+','+pin4+');\n';
            var code = stepper_name+'.step('+step+');\n';
            return code;
        };
		
		Blockly.Blocks['stepper_steps4'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_MOTORS'),
		  tags: ['stepper','movement'],
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
		  helpUrl: Facilino.getHelpUrl('stepper_steps4'),
		  examples: ['stepper_example.bly'],
		  keys: ['LANG_STEPPER','LANG_STEPPER_STEPS','LANG_STEPPER_TOTAL_STEPS','LANG_STEPPER_PIN1','LANG_STEPPER_PIN2','LANG_STEPPER_PIN3','LANG_STEPPER_PIN4','LANG_STEPPER_STEPS_TOOLTIP'],
		  init: function() {
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_STEPPER')).appendField(new Blockly.FieldImage('img/blocks/stepper.png', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_STEPPER_TOTAL_STEPS')).appendField(new Blockly.FieldNumber(2048, 0, Infinity, 1),"TOTAL_STEPS").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_STEPPER_PIN1')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN1").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN2')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN2").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN3')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN3").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN4')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN4").setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput("STEPS").setCheck(Number).setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_STEPPER_STEPS')).appendField(new Blockly.FieldImage('img/blocks/steps.svg', 20*options.zoom, 20*options.zoom));
			this.setPreviousStatement(true, "code");
			this.setNextStatement(true, "code");
			this.setInputsInline(false);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
			this.setTooltip(Facilino.locales.getKey('LANG_STEPPER_STEPS_TOOLTIP'));
		  }
		};

    Blockly.Arduino.dyor_move_base = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var code = '';
        var left = Blockly.Arduino.valueToCode(this, 'LEFT', Blockly.Arduino.ORDER_NONE);
        var right = Blockly.Arduino.valueToCode(this, 'RIGHT', Blockly.Arduino.ORDER_NONE);
        var speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
        var advance = Blockly.Arduino.valueToCode(this, 'ADVANCE', Blockly.Arduino.ORDER_ATOMIC);
        var turn = Blockly.Arduino.valueToCode(this, 'TURN', Blockly.Arduino.ORDER_ATOMIC);
		var attach = this.getFieldValue('ATTACH');
			
		var a = Facilino.findPinMode(left);
            code += a['code'];
            left = a['pin'];

            a = Facilino.findPinMode(right);
            code += a['code'];
            right = a['pin'];
		
		if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
		{
			Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
			Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['servo_definitions_variables']({pin: left});
			Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['servo_definitions_variables']({pin: right});
		}
		else if (Facilino.locales.processor==='ESP32')
		{
			Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
			Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['ESP_servo_definitions_variables']({pin: left});
			Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['ESP_servo_definitions_variables']({pin: right});
		}

		if (attach==='FALSE'){
			Blockly.Arduino.definitions_['define_move_base_'+left+'_'+right] = JST['dyor_definitions_move_base']({left: left, right: right});
        if (Facilino.isVariable(left)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': left
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + left] = JST['dyor_servo_setups']({
                    'dropdown_pin': left
                });
            }

        if (Facilino.isVariable(right)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': right
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + right] = JST['dyor_servo_setups']({
                    'dropdown_pin': right
                });
            }
			code += JST['dyor_move_base']({
                'left': left,
                'right': right,
        'speed': speed,
        'advance': advance,
        'turn': turn
            });
		}
		else
		{
			Blockly.Arduino.definitions_['define_move_base_attach_'+left+'_'+right] = JST['dyor_definitions_move_base_attach']({left: left, right: right});
			var time = this.getFieldValue('TIME');
			code += JST['dyor_move_base_attach']({
                'left': left,
                'right': right,
			'speed': speed,
			'advance': advance,
			'turn': turn,
			'time': time
            });
		}
        

            return code;
        };


    Blockly.Blocks.dyor_move_base = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_move_base'),
			examples: ['dyor_move_base_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
			keys: ['LANG_MOVE_BASE','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_SPEED','LANG_ADVANCE','LANG_TURN','LANG_MOVE_BASE_ATTACH','LANG_MOVE_BASE_TIME','LANG_MOVE_BASE_TOOLTIP'],
            init: function() {
        this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
            this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVE_BASE')+' (servos)').appendField(new Blockly.FieldImage("img/blocks/wheeled_robot.svg", 32*options.zoom, 32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('LEFT').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('RIGHT').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('SPEED').appendField(Facilino.locales.getKey('LANG_SPEED')).appendField(new Blockly.FieldImage("img/blocks/speedometer.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
            this.appendValueInput('ADVANCE').appendField(Facilino.locales.getKey('LANG_ADVANCE')).appendField(new Blockly.FieldImage("img/blocks/vertical-resize.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('TURN').appendField(Facilino.locales.getKey('LANG_TURN')).appendField(new Blockly.FieldImage("img/blocks/turn.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);     
		this.appendDummyInput('ATTACH').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_ATTACH')).appendField(new Blockly.FieldCheckbox('FALSE'),'ATTACH').setAlign(Blockly.ALIGN_RIGHT);
        this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(1000),'TIME').setAlign(Blockly.ALIGN_RIGHT);
		this.default_time = this.getFieldValue('TIME') ||1000;
		this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
        this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_TOOLTIP'));
            },
			onchange: function()
			{
				if (this.getFieldValue('ATTACH')==='FALSE')
				{
					this.removeInput('TIME');
				}
				else
				{
					if (this.getInput('TIME')===null)
						this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(this.default_time),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				}
			}
        };

    Blockly.Arduino.dyor_fblrs = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var code = '';
        var left = Blockly.Arduino.valueToCode(this, 'LEFT', Blockly.Arduino.ORDER_NONE);
        var right = Blockly.Arduino.valueToCode(this, 'RIGHT', Blockly.Arduino.ORDER_NONE);
        var speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
        var option = this.getFieldValue('OPTION');
		var attach = this.getFieldValue('ATTACH');	
		var a = Facilino.findPinMode(left);
            code += a['code'];
            left = a['pin'];

            a = Facilino.findPinMode(right);
            code += a['code'];
            right = a['pin'];            
			
		if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
		{
			Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
			Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['servo_definitions_variables']({pin: left});
			Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['servo_definitions_variables']({pin: right});
		}
		else if (Facilino.locales.processor==='ESP32')
		{
			Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
			Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['ESP_servo_definitions_variables']({pin: left});
			Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['ESP_servo_definitions_variables']({pin: right});
		}
		
		
		if (attach==='FALSE'){
			Blockly.Arduino.definitions_['define_move_base_'+left+'_'+right] = JST['dyor_definitions_move_base']({left: left, right: right});

			if (Facilino.isVariable(left)) {
					code += JST['dyor_servo_setups']({
						'dropdown_pin': left
					});
				} else {
					Blockly.Arduino.setups_['dyor_servo_move_' + left] = JST['dyor_servo_setups']({
						'dropdown_pin': left
					});
				}

			if (Facilino.isVariable(right)) {
					code += JST['dyor_servo_setups']({
						'dropdown_pin': right
					});
				} else {
					Blockly.Arduino.setups_['dyor_servo_move_' + right] = JST['dyor_servo_setups']({
						'dropdown_pin': right
					});
				}

			if (option==='F'){
			code+=JST['dyor_move_base']({'left': left,'right': right,'speed': speed,'advance': 100,'turn': 0});
			}
			if (option==='B'){
			code+=JST['dyor_move_base']({'left': left,'right': right,'speed': speed,'advance': -100,'turn': 0});
			}
			if (option==='L'){
			code+=JST['dyor_move_base']({'left': left,'right': right,'speed': speed,'advance': 0,'turn': 100});
			}
			if (option==='R'){
			code+=JST['dyor_move_base']({'left': left,'right': right,'speed': speed,'advance': 0,'turn': -100});
			}
			if (option==='S'){
			code+=JST['dyor_move_base']({'left': left,'right': right,'speed': 0,'advance': 0,'turn': 0});
			}
		
		}
		else
		{
			Blockly.Arduino.definitions_['define_move_base_attach_'+left+'_'+right] = JST['dyor_definitions_move_base_attach']({left: left, right: right});
			var time = this.getFieldValue('TIME');
			if (option==='F'){
			code+=JST['dyor_move_base_attach']({'left': left,'right': right,'speed': speed,'advance': 100,'turn': 0, 'time': time});
			}
			if (option==='B'){
			code+=JST['dyor_move_base_attach']({'left': left,'right': right,'speed': speed,'advance': -100,'turn': 0, 'time': time});
			}
			if (option==='L'){
			code+=JST['dyor_move_base_attach']({'left': left,'right': right,'speed': speed,'advance': 0,'turn': 100, 'time': time});
			}
			if (option==='R'){
			code+=JST['dyor_move_base_attach']({'left': left,'right': right,'speed': speed,'advance': 0,'turn': -100, 'time': time});
			}
			if (option==='S'){
			code+=JST['dyor_move_base_attach']({'left': left,'right': right,'speed': 0,'advance': 0,'turn': 0, 'time': time});
			}
		}

            return code;
        };


    Blockly.Blocks.dyor_fblrs = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_fblrs'),
			examples: ['dyor_fblrs_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
			keys: ['LANG_MOVE_BASE','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_SPEED','LANG_MOVE_FORWARD','LANG_MOVE_BACKWARD','LANG_MOVE_LEFT','LANG_MOVE_RIGHT','LANG_MOVE_STOP','LANG_MOVE_BASE_ATTACH','LANG_MOVE_BASE_TIME','LANG_MOVE_FBLR_TOOLTIP'],
            init: function() {
        this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
            this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVE_BASE')+ ' (servos)').appendField(new Blockly.FieldImage("img/blocks/wheeled_robot.svg", 32*options.zoom, 32*options.zoom));
        this.appendValueInput('LEFT').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('RIGHT').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('SPEED').appendField(Facilino.locales.getKey('LANG_SPEED')).appendField(new Blockly.FieldImage("img/blocks/speedometer.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendDummyInput('').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_MOVE_FORWARD') || 'Forward', 'F'],
                    [Facilino.locales.getKey('LANG_MOVE_BACKWARD') || 'Backward', 'B'],
            [Facilino.locales.getKey('LANG_MOVE_LEFT') || 'Left', 'L'],
            [Facilino.locales.getKey('LANG_MOVE_RIGHT') || 'Right', 'R'],
            [Facilino.locales.getKey('LANG_MOVE_STOP') ||'Stop', 'S' ]]),'OPTION').setAlign(Blockly.ALIGN_RIGHT);
        this.appendDummyInput('ATTACH').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_ATTACH')).appendField(new Blockly.FieldCheckbox('FALSE'),'ATTACH').setAlign(Blockly.ALIGN_RIGHT);
        this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(1000),'TIME').setAlign(Blockly.ALIGN_RIGHT);
		this.default_time = this.getFieldValue('TIME') || 1000;
		this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
        this.setTooltip(Facilino.locales.getKey('LANG_MOVE_FBLR_TOOLTIP'));
            },
			onchange: function()
			{
				if (this.getFieldValue('ATTACH')==='FALSE')
				{
					this.removeInput('TIME');
				}
				else
				{
					if (this.getInput('TIME')===null)
						this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(this.default_time),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				}
			}
        };
		
	Blockly.Arduino.dyor_move_base_cc = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var code = '';
		var dropdown_pin1 = Blockly.Arduino.valueToCode(this, 'LEFT1', Blockly.Arduino.ORDER_ATOMIC) || '';
		var dropdown_pin2 = Blockly.Arduino.valueToCode(this, 'LEFT2', Blockly.Arduino.ORDER_ATOMIC) || '';
		var dropdown_pin3 = Blockly.Arduino.valueToCode(this, 'RIGHT1', Blockly.Arduino.ORDER_ATOMIC) || '';
		var dropdown_pin4 = Blockly.Arduino.valueToCode(this, 'RIGHT2', Blockly.Arduino.ORDER_ATOMIC) || '';
        var speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
        var advance = Blockly.Arduino.valueToCode(this, 'ADVANCE', Blockly.Arduino.ORDER_ATOMIC);
        var turn = Blockly.Arduino.valueToCode(this, 'TURN', Blockly.Arduino.ORDER_ATOMIC);
		
		Blockly.Arduino.definitions_['define_move_base'] = JST['dyor_definitions_move_base2']({});
		
		var a1 = Facilino.findPinMode(dropdown_pin1);
		var a2 = Facilino.findPinMode(dropdown_pin2);
		var b1 = Facilino.findPinMode(dropdown_pin3);
		var b2 = Facilino.findPinMode(dropdown_pin4);
        code += a1['code'];
        dropdown_pin1 = a1['pin'];
		code += a2['code'];
        dropdown_pin2 = a2['pin'];
		code += b1['code'];
        dropdown_pin3 = b1['pin'];
		code += b2['code'];
        dropdown_pin4 = b2['pin'];
		
		if (Facilino.isVariable(dropdown_pin1)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin1] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
        }
		if (Facilino.isVariable(dropdown_pin2)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin2] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
        }
		if (Facilino.isVariable(dropdown_pin3)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin3
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin3] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin3
                });
        }
		if (Facilino.isVariable(dropdown_pin4)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin4
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin4] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin4
                });
        }
		
		code='move_base2('+dropdown_pin1+','+dropdown_pin2+','+dropdown_pin3+','+dropdown_pin4+','+speed+','+advance+','+turn+');\n';
		
        return code;
        };


    Blockly.Blocks.dyor_move_base_cc = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
            tags: ['motor','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_move_base_cc'),
			examples: ['dyor_move_base_cc_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
			keys: ['LANG_MOVE_BASE','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_SPEED','LANG_ADVANCE','LANG_TURN','LANG_MOVE_BASE_CC_TOOLTIP'],
            init: function() {
        this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
        this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVE_BASE')+ ' (CC)').appendField(new Blockly.FieldImage("img/blocks/wheeled_robot.svg", 32*options.zoom, 32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('LEFT1').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')+' IN1').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('LEFT2').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')+' IN2').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('RIGHT1').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')+' IN3').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('RIGHT2').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')+' IN4').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('SPEED').appendField(Facilino.locales.getKey('LANG_SPEED')).appendField(new Blockly.FieldImage("img/blocks/speedometer.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
            this.appendValueInput('ADVANCE').appendField(Facilino.locales.getKey('LANG_ADVANCE')).appendField(new Blockly.FieldImage("img/blocks/vertical-resize.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('TURN').appendField(Facilino.locales.getKey('LANG_TURN')).appendField(new Blockly.FieldImage("img/blocks/turn.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);     
                this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
        this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_CC_TOOLTIP'));
            }
        };

    Blockly.Arduino.dyor_fblrs_cc = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
        var code = '';
		var dropdown_pin1 = Blockly.Arduino.valueToCode(this, 'LEFT1', Blockly.Arduino.ORDER_ATOMIC) || '';
		var dropdown_pin2 = Blockly.Arduino.valueToCode(this, 'LEFT2', Blockly.Arduino.ORDER_ATOMIC) || '';
		var dropdown_pin3 = Blockly.Arduino.valueToCode(this, 'RIGHT1', Blockly.Arduino.ORDER_ATOMIC) || '';
		var dropdown_pin4 = Blockly.Arduino.valueToCode(this, 'RIGHT2', Blockly.Arduino.ORDER_ATOMIC) || '';
        var speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
        var option = this.getFieldValue('OPTION');
		
		Blockly.Arduino.definitions_['define_move_base'] = JST['dyor_definitions_move_base2']({});
		
		var a1 = Facilino.findPinMode(dropdown_pin1);
		var a2 = Facilino.findPinMode(dropdown_pin2);
		var b1 = Facilino.findPinMode(dropdown_pin3);
		var b2 = Facilino.findPinMode(dropdown_pin4);
        code += a1['code'];
        dropdown_pin1 = a1['pin'];
		code += a2['code'];
        dropdown_pin2 = a2['pin'];
		code += b1['code'];
        dropdown_pin3 = b1['pin'];
		code += b2['code'];
        dropdown_pin4 = b2['pin'];
		
		if (Facilino.isVariable(dropdown_pin1)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin1] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
        }
		if (Facilino.isVariable(dropdown_pin2)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin2] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
        }
		if (Facilino.isVariable(dropdown_pin3)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin3
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin3] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin3
                });
        }
		if (Facilino.isVariable(dropdown_pin4)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin4
                });
        } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin4] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin4
                });
        }

        if (option==='F'){
			code+='move_base2('+dropdown_pin1+','+dropdown_pin2+','+dropdown_pin3+','+dropdown_pin4+','+speed+',100,0);\n';			
        }
        if (option==='B'){
          code+='move_base2('+dropdown_pin1+','+dropdown_pin2+','+dropdown_pin3+','+dropdown_pin4+','+speed+',-100,0);\n';
        }
        if (option==='L'){
          code+='move_base2('+dropdown_pin1+','+dropdown_pin2+','+dropdown_pin3+','+dropdown_pin4+','+speed+',0,100);\n';
        }
        if (option==='R'){
          code+='move_base2('+dropdown_pin1+','+dropdown_pin2+','+dropdown_pin3+','+dropdown_pin4+','+speed+',0,-100);\n';
        }
        if (option==='S'){
          code+='move_base2('+dropdown_pin1+','+dropdown_pin2+','+dropdown_pin3+','+dropdown_pin4+','+speed+',0,0);\n';
        }
            return code;
        };


    Blockly.Blocks.dyor_fblrs_cc = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
            tags: ['motor','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_fblrs_cc'),
			examples: ['dyor_fblrs_cc_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
			keys: ['LANG_MOVE_BASE','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_SPEED','LANG_MOVE_FORWARD','LANG_MOVE_BACKWARD','LANG_MOVE_LEFT','LANG_MOVE_RIGHT','LANG_MOVE_STOP','LANG_MOVE_FBLR_CC_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
            this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVE_BASE')+ ' (CC)').appendField(new Blockly.FieldImage("img/blocks/wheeled_robot.svg", 32*options.zoom, 32*options.zoom));
        this.appendValueInput('LEFT1').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')+' IN1').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('LEFT2').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')+' IN2').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('RIGHT1').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')+' IN3').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('RIGHT2').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')+' IN4').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('SPEED').appendField(Facilino.locales.getKey('LANG_SPEED')).appendField(new Blockly.FieldImage("img/blocks/speedometer.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
            this.appendDummyInput('').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_MOVE_FORWARD') || 'Forward', 'F'],
                    [Facilino.locales.getKey('LANG_MOVE_BACKWARD') || 'Backward', 'B'],
            [Facilino.locales.getKey('LANG_MOVE_LEFT') || 'Left', 'L'],
            [Facilino.locales.getKey('LANG_MOVE_RIGHT') || 'Right', 'R'],
            [Facilino.locales.getKey('LANG_MOVE_STOP') ||'Stop', 'S' ]]),'OPTION').setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
        this.setTooltip(Facilino.locales.getKey('LANG_MOVE_FBLR_CC_TOOLTIP'));
            }
        };
		
		Blockly.Arduino['dyor_fblrs_stepper'] = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var pin1 = this.getFieldValue('PIN1');
			var pin2 = this.getFieldValue('PIN2');
			var pin3 = this.getFieldValue('PIN3');
			var pin4 = this.getFieldValue('PIN4');
			var pin5 = this.getFieldValue('PIN5');
			var pin6 = this.getFieldValue('PIN6');
			var pin7 = this.getFieldValue('PIN7');
			var pin8 = this.getFieldValue('PIN8');
            var total_steps = this.getFieldValue('TOTAL_STEPS');
			var wheel_dia = this.getFieldValue('WHEEL_DIA');
			var speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
			var dist_angle = Blockly.Arduino.valueToCode(this, 'DIST_ANGLE', Blockly.Arduino.ORDER_ATOMIC);
			var stepper_name1 = '_stepper_'+pin1+'_'+pin2+'_'+pin3+'_'+pin4;
			var stepper_name2 = '_stepper_'+pin5+'_'+pin6+'_'+pin7+'_'+pin8;
			Blockly.Arduino.definitions_['include_stepper'] = '#include <Stepper.h>';
			Blockly.Arduino.definitions_['declare_var_define'+stepper_name1]='Stepper '+stepper_name1+'('+total_steps+','+pin1+','+pin2+','+pin3+','+pin4+');\n';
			Blockly.Arduino.definitions_['declare_var_define'+stepper_name2]='Stepper '+stepper_name2+'('+total_steps+','+pin5+','+pin6+','+pin7+','+pin8+');\n';
            var code = stepper_name1+'.setSpeed('+speed+');\n';
			code += stepper_name2+'.setSpeed('+speed+');\n';
			var option = this.getFieldValue('OPTION');
			if (option==='F'){
				code += 'for (int _step=0;_step<((int)(((float)'+dist_angle+'*(float)'+total_steps+')/(3.141516*'+wheel_dia+')));_step++){\n';
				code += '  '+stepper_name1+'.step(1);\n';
				code += '  '+stepper_name2+'.step(-1);\n';
				code += '  yield();\n';
				code += '}\n';
			}
			if (option==='B'){
				code += 'for (int _step=0;_step<((int)(((float)'+dist_angle+'*(float)'+total_steps+')/(3.141516*'+wheel_dia+')));_step++){\n';
				code += '  '+stepper_name1+'.step(-1);\n';
				code += '  '+stepper_name2+'.step(1);\n';
				code += '  yield();\n';
				code += '}\n';
			}
			if (option==='L'){
				code += 'for (int _step=0;_step<((int)(((float)'+dist_angle+'*(float)'+total_steps+')/360.0));_step++){\n';
				code += '  '+stepper_name1+'.step(-1);\n';
				code += '  '+stepper_name2+'.step(-1);\n';
				code += '  yield();\n';
				code += '}\n';
			}
			if (option==='R'){
				code += 'for (int _step=0;_step<((int)(((float)'+dist_angle+'*(float)'+total_steps+')/360.0));_step++){\n';
				code += '  '+stepper_name1+'.step(1);\n';
				code += '  '+stepper_name2+'.step(1);\n';
				code += '  yield();\n';
				code += '}\n';
			}
            return code;
        };


    Blockly.Blocks['dyor_fblrs_stepper'] = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
            tags: ['motor','movement','stepper'],
            helpUrl: Facilino.getHelpUrl('dyor_fblrs_stepper'),
			examples: ['dyor_fblrs_cc_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
			keys: ['LANG_MOVE_BASE','LANG_STEPPER_TOTAL_STEPS','LANG_STEPPER_WHEEL_DIA','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_STEPPER_PIN1','LANG_STEPPER_PIN2','LANG_STEPPER_PIN3','LANG_STEPPER_PIN4','LANG_STEPPER_PIN5','LANG_STEPPER_PIN6','LANG_STEPPER_PIN7','LANG_STEPPER_PIN8','LANG_STEPPER_SET_SPEED','LANG_STEPPER_RPM','LANG_MOVE_FORWARD','LANG_MOVE_BACKWARD','LANG_MOVE_LEFT','LANG_MOVE_RIGHT','LANG_STEPPER_DISTANCE','LANG_STEPPER_ANGLE','LANG_MOVE_FBLR_STEPPER_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
            this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVE_BASE')+ ' (stepper)').appendField(new Blockly.FieldImage("img/blocks/wheeled_robot.svg", 32*options.zoom, 32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_STEPPER_TOTAL_STEPS')).appendField(new Blockly.FieldNumber(2048, 0, Infinity, 1),"TOTAL_STEPS").appendField(Facilino.locales.getKey('LANG_STEPPER_WHEEL_DIA')+' (cm)').appendField(new Blockly.FieldNumber(6, 0, Infinity,0.01),"WHEEL_DIA").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')).appendField(Facilino.locales.getKey('LANG_STEPPER_PIN1')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN1").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN2')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN2").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN3')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN3").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN4')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN4").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')).appendField(Facilino.locales.getKey('LANG_STEPPER_PIN5')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN5").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN6')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN6").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN7')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN7").appendField(Facilino.locales.getKey('LANG_STEPPER_PIN8')).appendField(new Blockly.FieldDropdown(profiles.default.digital),"PIN8").setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('SPEED').appendField(Facilino.locales.getKey('LANG_STEPPER_SET_SPEED')+' ('+Facilino.locales.getKey('LANG_STEPPER_RPM')+')').appendField(new Blockly.FieldImage("img/blocks/speedometer.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
            this.appendDummyInput('').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_MOVE_FORWARD') || 'Forward', 'F'],
                    [Facilino.locales.getKey('LANG_MOVE_BACKWARD') || 'Backward', 'B'],
            [Facilino.locales.getKey('LANG_MOVE_LEFT') || 'Left', 'L'],
            [Facilino.locales.getKey('LANG_MOVE_RIGHT') || 'Right', 'R']]),'OPTION').setAlign(Blockly.ALIGN_RIGHT);
        this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
			this.appendValueInput('DIST_ANGLE').appendField(Facilino.locales.getKey('LANG_STEPPER_DISTANCE')+' (cm)').appendField(new Blockly.FieldImage("img/blocks/distance.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.setTooltip(Facilino.locales.getKey('LANG_MOVE_FBLR_STEPPER_TOOLTIP'));
            },
			onchange: function() {
				var option = this.getFieldValue('OPTION');
				var _block= this.getInputTargetBlock('DIST_ANGLE');
				this.removeInput('DIST_ANGLE');
				if ((option === 'F')||(option === 'B'))
				{
					this.appendValueInput('DIST_ANGLE').appendField(Facilino.locales.getKey('LANG_STEPPER_DISTANCE')+' (cm)').appendField(new Blockly.FieldImage("img/blocks/distance.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				}
				else
				{
					this.appendValueInput('DIST_ANGLE').appendField(Facilino.locales.getKey('LANG_STEPPER_ANGLE')+' (º)').appendField(new Blockly.FieldImage("img/blocks/angle.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				}
				if (_block) {
					this.getInput('DIST_ANGLE').connection.connect(_block.outputConnection);
                }
			}
        };
		
		Blockly.Arduino['set_encoders'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var interrupt_left = this.getFieldValue('LEFT');
			var interrupt_right = this.getFieldValue('RIGHT');
			var diametre = this.getFieldValue('WHEEL_DIA');
			var counts = this.getFieldValue('COUNTS');
			var separation = this.getFieldValue('WHEEL_SEP');
			var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			var block_found = Blocks.find(function (block){return (block.type=='get_velocity');});
			var block_found_pos = Blocks.find(function (block){return ((block.type=='set_position')||(block.type=='get_position_x')||(block.type=='get_position_y')||(block.type=='get_orientation')||(block.type=='get_path_length'));});
			Blockly.Arduino.definitions_['declare_var_left_dir'] = 'volatile float _left_dir=0.0;\n';
			Blockly.Arduino.definitions_['declare_var_right_dir'] = 'volatile float _right_dir=0.0;\n';
			Blockly.Arduino.definitions_['declare_var_posx'] = 'volatile float _posx=0;\n';
			Blockly.Arduino.definitions_['declare_var_posy'] = 'volatile float _posy=0;\n';
			Blockly.Arduino.definitions_['declare_var_orith'] = 'volatile float _orith=0;\n';
			Blockly.Arduino.definitions_['declare_var_wheel_inc']='#define _WHEEL_INC ((0.0314159265358979323846264338328*(float)'+diametre+')/(4.0*(float)'+counts+'))\n';
			if ((block_found!==undefined))
				Blockly.Arduino.definitions_['declare_var_wheel_deg']='#define _WHEEL_INC_DEG ((180000000.0/(float)'+counts+'))\n';
			Blockly.Arduino.definitions_['declare_var_wheel_rot']='#define _WHEEL_ROT ((3.14159265358979323846264338328*(float)'+diametre+')/(4.0*(float)'+counts+'*(float)'+separation+'))\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt_left] = 'void _interruptISR'+interrupt_left+'(void){\n';
			if (block_found!==undefined)
			{
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' static unsigned long _left_time_last=0;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' static float _left_speed[8]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' static byte _left_speed_idx=0;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' unsigned long _left_time_now=micros();\n';
			}
			if (block_found_pos!==undefined)
			{
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _posx+=_left_dir*(cos(_orith)*_WHEEL_INC);\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _posy+=_left_dir*(sin(_orith)*_WHEEL_INC);\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _orith-=_left_dir*_WHEEL_ROT;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _path_length+=_left_dir*_WHEEL_INC;\n';
			}
			if (block_found!==undefined)
			{
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _left_speed[_left_speed_idx%8]=_WHEEL_INC_DEG/((float)(_left_time_now-_left_time_last));\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' float sum=0.0;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' for (int i=0;i<8;i++)\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' sum+=_left_speed[i];\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _left_speed_mean=sum/(8*6);\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _left_speed_idx++;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_left] += ' _left_time_last=_left_time_now;\n';
			}
			Blockly.Arduino.definitions_['define_isr'+interrupt_left] += '}\n';
			Blockly.Arduino.definitions_['define_isr'+interrupt_right] = 'void _interruptISR'+interrupt_right+'(void){\n';
			if (block_found!==undefined)
			{
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' static unsigned long _right_time_last=0;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' static float _right_speed[8]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' static byte _right_speed_idx=0;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' unsigned long _right_time_now=micros();\n';
			}
			if (block_found_pos!==undefined)
			{
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _posx+=_right_dir*(cos(_orith)*_WHEEL_INC);\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _posy+=_right_dir*(sin(_orith)*_WHEEL_INC);\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _orith+=_right_dir*_WHEEL_ROT;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _path_length+=_right_dir*_WHEEL_INC;\n';
			}
			if (block_found!==undefined)
			{
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _right_speed[_right_speed_idx%8]=_WHEEL_INC_DEG/((float)(_right_time_now-_right_time_last));\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' float sum=0.0;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' for (int i=0;i<8;i++)\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' sum+=_right_speed[i];\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _right_speed_mean=sum/(8*6);\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _right_speed_idx++;\n';
				Blockly.Arduino.definitions_['define_isr'+interrupt_right] += ' _right_time_last=_right_time_now;\n';
			}
			Blockly.Arduino.definitions_['define_isr'+interrupt_right] += '}\n';
			Blockly.Arduino.setups_['setup_isr'+interrupt_left] = 'pinMode('+interrupt_left+',INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt('+interrupt_left+'),_interruptISR'+interrupt_left+',CHANGE);\n';
			Blockly.Arduino.setups_['setup_isr'+interrupt_right] = 'pinMode('+interrupt_right+',INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt('+interrupt_right+'),_interruptISR'+interrupt_right+',CHANGE);\n';
			return code;
		};
		
		Blockly.Blocks['set_encoders'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('set_encoders'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_SET_ENCODERS','LANG_MOVE_BASE_WHEEL_COUNTS','LANG_MOVE_BASE_WHEEL_DIA','LANG_MOVE_BASE_WHEEL_SEP','LANG_MOVE_BASE_LEFT_ENCODER','LANG_MOVE_BASE_RIGHT_ENCODER','LANG_MOVE_BASE_SET_ENCODERS_TOOLTIP'],
          init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey('LANG_MOVE_BASE_SET_ENCODERS'))
				.appendField(new Blockly.FieldImage("img/blocks/encoder.png", 24, 24, null));
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_MOVE_BASE_WHEEL_COUNTS')).appendField(new Blockly.FieldNumber(20, 0, Infinity, 1),"COUNTS").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_MOVE_BASE_WHEEL_DIA')+' (cm)').appendField(new Blockly.FieldNumber(6.5, 0.01, Infinity,0.01),"WHEEL_DIA").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_MOVE_BASE_WHEEL_SEP')+' (cm)').appendField(new Blockly.FieldNumber(13.3, 0.01, Infinity,0.01),"WHEEL_SEP").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_LEFT_ENCODER"))
				.appendField(new Blockly.FieldDropdown(profiles.default.interrupt), "LEFT");
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_RIGHT_ENCODER"))
				.appendField(new Blockly.FieldDropdown(profiles.default.interrupt), "RIGHT");
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey("LANG_MOVE_BASE_SET_ENCODERS_TOOLTIP"));
		  }
		};
		
		Blockly.Arduino['get_velocity'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			if (this.getFieldValue('WHEEL')==='LEFT')
			{
				Blockly.Arduino.definitions_['declare_var_left_speed_mean'] = 'volatile float _left_speed_mean=0.0;\n';
				code = '(_left_speed_mean)';
			}
			else
			{
				Blockly.Arduino.definitions_['declare_var_right_speed_mean'] = 'volatile float _right_speed_mean=0.0;\n';
				code = '(_right_speed_mean)';
			}
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
		Blockly.Blocks['get_velocity'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('get_velocity'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_VELOCITY','LANG_MOVE_BASE_VELOCITY_LEFT','LANG_MOVE_BASE_VELOCITY_RIGHT','LANG_MOVE_BASE_VELOCITY_TOOLTIP'],
		  init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_VELOCITY")+" (RPM)").appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_MOVE_BASE_VELOCITY_LEFT'),'LEFT'],[Facilino.locales.getKey('LANG_MOVE_BASE_VELOCITY_RIGHT'),'RIGHT']]),'WHEEL')
				.appendField(new Blockly.FieldImage("img/blocks/encoder.png", 24, 24, null));
			this.setOutput(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_VELOCITY_TOOLTIP'));
		  },
		  onchange: function()
		  {
			  var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			  var block_found = Blocks.find(function (block){return (block.type=='set_encoders');});
			  if (block_found===undefined)
				this.setWarningText('This block instruction requires encoders to measure the velocity');
			  else
			    this.setWarningText(null);
			  
		  }
		};
		
		Blockly.Arduino['set_position'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			Blockly.Arduino.definitions_['declare_var_posx'] = 'volatile float _posx=0.0;\n';
			Blockly.Arduino.definitions_['declare_var_posy'] = 'volatile float _posy=0.0;\n';
			Blockly.Arduino.definitions_['declare_var_orith'] = 'volatile float _orith=0.0;\n';
			Blockly.Arduino.definitions_['declare_var_path_length'] = 'volatile float _path_length=0.0;\n';
			code = '_posx=0.01*('+this.getFieldValue('X')+');\n';
			code += '_posy=0.01*('+this.getFieldValue('Y')+');\n';
			code += '_orith=0.01745329251994329576923690768489*('+this.getFieldValue('TH')+');\n';
			code += '_path_length=0.0;\n';
			return code;
		};
		
		Blockly.Blocks['set_position'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('set_position'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_SET_POSITION','LANG_MOVE_BASE_POSITION_X','LANG_MOVE_BASE_POSITION_Y','LANG_MOVE_BASE_ORIENTATION','LANG_MOVE_BASE_SET_POSITION_TOOLTIP'],
          init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey('LANG_MOVE_BASE_SET_POSITION'))
				.appendField(new Blockly.FieldImage("img/blocks/map-placeholder.svg", 24, 24, null));
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_POSITION_X")+' (cm)')
				.appendField(new Blockly.FieldTextInput("0"), "X")
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_POSITION_Y")+' (cm)')
				.appendField(new Blockly.FieldTextInput("0"), "Y")
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_ORIENTATION")+' (º)')
				.appendField(new Blockly.FieldTextInput("0"), "TH");
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey("LANG_MOVE_BASE_SET_POSITION_TOOLTIP"));
		  },
		  onchange: function()
		  {
			  var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			  var block_found = Blocks.find(function (block){return (block.type=='set_encoders');});
			  if (block_found===undefined)
				this.setWarningText('This block instruction requires encoders to update the position and orientation');
			  else
			    this.setWarningText(null);
			  
		  }
		};
		
		Blockly.Arduino['get_position_x'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			Blockly.Arduino.definitions_['declare_var_posx'] = 'volatile float _posx=0.0;\n';
			code = '(100.0*_posx)';
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
		Blockly.Blocks['get_position_x'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('get_position_x'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_POSITION_X','LANG_MOVE_BASE_POSITION_X_TOOLTIP'],
		  init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_POSITION_X")+" (cm)")
				.appendField(new Blockly.FieldImage("img/blocks/map-placeholder.svg", 24, 24, null));
			this.setOutput(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_POSITION_X_TOOLTIP'));
		  },
		  onchange: function()
		  {
			  var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			  var block_found = Blocks.find(function (block){return (block.type=='set_encoders');});
			  if (block_found===undefined)
				this.setWarningText('This block instruction requires encoders to update the position');
			  else
			    this.setWarningText(null);
			  
		  }
		};
		
		Blockly.Arduino['get_position_y'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			Blockly.Arduino.definitions_['declare_var_posy'] = 'volatile float _posy=0.0;\n';
			code = '(100.0*_posy)';
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
		Blockly.Blocks['get_position_y'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('get_position_y'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_POSITION_Y','LANG_MOVE_BASE_POSITION_Y_TOOLTIP'],
		  init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_POSITION_Y")+" (cm)")
				.appendField(new Blockly.FieldImage("img/blocks/map-placeholder.svg", 24, 24, null));
			this.setOutput(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_POSITION_Y_TOOLTIP'));
		  },
		  onchange: function()
		  {
			  var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			  var block_found = Blocks.find(function (block){return (block.type=='set_encoders');});
			  if (block_found===undefined)
				this.setWarningText('This block instruction requires encoders to update the position');
			  else
			    this.setWarningText(null);
			  
		  }
		};
		
		Blockly.Arduino['get_orientation'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			Blockly.Arduino.definitions_['declare_var_orith'] = 'volatile float _orith=0.0;\n';
			code = '(57,295779513082320876798154814105*_orith)';
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
		Blockly.Blocks['get_orientation'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('get_orientation'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_ORIENTATION','LANG_MOVE_BASE_POSITION_ORIENTATION_TOOLTIP'],
		  init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_ORIENTATION")+" (º)")
				.appendField(new Blockly.FieldImage("img/blocks/map-placeholder.svg", 24, 24, null));
			this.setOutput(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_POSITION_ORIENTATION_TOOLTIP'));
		  },
		  onchange: function()
		  {
			  var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			  var block_found = Blocks.find(function (block){return (block.type=='set_encoders');});
			  if (block_found===undefined)
				this.setWarningText('This block instruction requires encoders to update the orientation');
			  else
			    this.setWarningText(null);
			  
		  }
		};
		
		Blockly.Arduino['get_path_length'] = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			Blockly.Arduino.definitions_['declare_var_path_length'] = 'volatile float _path_length=0.0;\n';
			code = '(100.0*_path_length)';
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
		Blockly.Blocks['get_path_length'] = {
		  category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
		  subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTBASE'),
		  category_colour: Facilino.LANG_COLOUR_MOVEMENT,
		  colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE,
		  helpUrl: Facilino.getHelpUrl('get_path_length'),
		  tags: [],
		  examples: [],
		  keys: ['LANG_MOVE_BASE_PATH_LENGTH','LANG_MOVE_BASE_PATH_LENGTH_TOOLTIP'],
		  init: function() {
			this.appendDummyInput()
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField(Facilino.locales.getKey("LANG_MOVE_BASE_PATH_LENGTH")+" (cm)")
				.appendField(new Blockly.FieldImage("img/blocks/map-placeholder.svg", 24, 24, null));
			this.setOutput(true, null);
			this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTBASE);
			this.setTooltip(Facilino.locales.getKey('LANG_MOVE_BASE_PATH_LENGTH_TOOLTIP'));
		  },
		  onchange: function()
		  {
			  var Blocks=Blockly.getMainWorkspace().getAllBlocks();
			  var block_found = Blocks.find(function (block){return (block.type=='set_encoders');});
			  if (block_found===undefined)
				this.setWarningText('This block instruction requires encoders to update the path length');
			  else
			    this.setWarningText(null);
			  
		  }
		};
		
    Blockly.Arduino.dyor_move_grip = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var left = Blockly.Arduino.valueToCode(this, 'LEFT', Blockly.Arduino.ORDER_NONE);
            var right = Blockly.Arduino.valueToCode(this, 'RIGHT', Blockly.Arduino.ORDER_NONE);
			var code = '';
			var option = this.getFieldValue('OPTION');
			var attach = this.getFieldValue('ATTACH');
			Blockly.Arduino.definitions_['declare_var_define_move_grip'] = JST['dyor_move_grip_definitions_variables']({});
			var a = Facilino.findPinMode(left);
			code += a['code'];
            left = a['pin'];

            a = Facilino.findPinMode(right);
            code += a['code'];
            right = a['pin'];            
			
			if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['servo_definitions_variables']({pin: left});
				Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['servo_definitions_variables']({pin: right});
			}
			else if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['ESP_servo_definitions_variables']({pin: left});
				Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['ESP_servo_definitions_variables']({pin: right});
			}
			
			if (attach==='FALSE'){
				
				if (Facilino.isVariable(left)) {
					code += JST['dyor_servo_setups']({
						'dropdown_pin': left
					});
				} else {
					Blockly.Arduino.setups_['dyor_servo_move_' + left] = JST['dyor_servo_setups']({
						'dropdown_pin': left
					});
				}
				if (Facilino.isVariable(right)) {
					code += JST['dyor_servo_setups']({
						'dropdown_pin': right
					});
				} else {
					Blockly.Arduino.setups_['dyor_servo_move_' + right] = JST['dyor_servo_setups']({
						'dropdown_pin': right
					});
				}

			if (option==='5' || option==='1')
			  code +='_servo'+left+'.write(_left_close);\n';
			if (option==='5' || option==='3')
			  code +='_servo'+right+'.write(_right_close);\n';
			if (option==='6' || option==='2')
			  code +='_servo'+left+'.write(_left_open);\n';
			if (option==='6' || option==='4')
			  code +='_servo'+right+'.write(_right_open);\n';
			}
			else
			{
				var time = this.getFieldValue('TIME');
				if (option==='5' || option==='1')
				  code +='if (!_servo'+left+'.attached())\n    _servo'+left+'.attach('+left+');\n';
				if (option==='5' || option==='3')
				  code +='if (!_servo'+right+'.attached())\n    _servo'+right+'.attach('+right+');\n';
				if (option==='6' || option==='2')
				  code +='if (!_servo'+left+'.attached())\n    _servo'+left+'.attach('+left+');\n';
				if (option==='6' || option==='4')
				  code +='if (!_servo'+right+'.attached())\n    _servo'+right+'.attach('+right+');\n';
				if (option==='5' || option==='1')
				  code +='_servo'+left+'.write(_left_close);\n';
				if (option==='5' || option==='3')
				  code +='_servo'+right+'.write(_right_close);\n';
				if (option==='6' || option==='2')
				  code +='_servo'+left+'.write(_left_open);\n';
				if (option==='6' || option==='4')
				  code +='_servo'+right+'.write(_right_open);\n';
				code +='delay('+time+');\n';
				if (option==='5' || option==='1')
				  code +='  _servo'+left+'.detach();\n';
				if (option==='5' || option==='3')
				  code +='  _servo'+right+'.detach();\n';
				if (option==='6' || option==='2')
				  code +='  _servo'+left+'.detach();\n';
				if (option==='6' || option==='4')
				  code +='  _servo'+right+'.detach();\n';
			}

            return code;
        };

        Blockly.Blocks.dyor_move_grip = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTACC'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_move_grip'),
			examples: ['dyor_move_grip_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC,
			keys: ['LANG_SERVO_MOVE_GRIPPER','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_MOVE_LEFT_ARM_GRIP','LANG_MOVE_LEFT_ARM_RELEASE','LANG_MOVE_RIGHT_ARM_GRIP','LANG_MOVE_RIGHT_ARM_RELEASE','LANG_MOVE_GRIP','LANG_MOVE_RELEASE','LANG_MOVE_BASE_ATTACH','LANG_MOVE_BASE_TIME','LANG_MOVE_GRIP_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_GRIPPER')).appendField(new Blockly.FieldImage('img/blocks/gripper.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('LEFT').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')||'Left').appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('RIGHT').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')||'Right').appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_GRIP') || 'Grip left', '1'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_RELEASE') || 'Release left', '2'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_GRIP') || 'Grip right', '3'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_RELEASE') || 'Release right', '4'],
        [Facilino.locales.getKey('LANG_MOVE_GRIP') || 'Grip', '5'],
        [Facilino.locales.getKey('LANG_MOVE_RELEASE') || 'Release', '6']
        ]),'OPTION').setAlign(Blockly.ALIGN_RIGHT);
                this.appendDummyInput('ATTACH').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_ATTACH')).appendField(new Blockly.FieldCheckbox('FALSE'),'ATTACH').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(1000),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				this.default_time= this.getFieldValue('TIME') || 1000;
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_MOVE_GRIP_TOOLTIP'));
            },
			onchange: function()
			{
				if (this.getFieldValue('ATTACH')==='FALSE')
				{
					this.removeInput('TIME');
				}
				else
				{
					if (this.getInput('TIME')===null)
						this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(this.default_time),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				}
			}
        };

    Blockly.Arduino.dyor_set_grip = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var value = Blockly.Arduino.valueToCode(this, 'VALUE', Blockly.Arduino.ORDER_ATOMIC);
        var option = this.getFieldValue('OPTION');
        Blockly.Arduino.definitions_['declare_var_define_move_grip'] = JST['dyor_move_grip_definitions_variables']({});

        var code='';
        if (option==='1')
          code +='_left_close='+value+';\n';
        if (option==='3')
          code +='_right_close='+value+';\n';
        if (option==='2')
          code +='_left_open='+value+';\n';
        if (option==='4')
          code +='_right_open='+value+';\n';

            return code;
        };
		
		Blockly.Blocks.dyor_set_grip = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTACC'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_set_grip'),
			examples: ['dyor_move_grip_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC,
			keys: ['LANG_SERVO_MOVE_SET','LANG_MOVE_LEFT_ARM_GRIP','LANG_MOVE_LEFT_ARM_RELEASE','LANG_MOVE_RIGHT_ARM_GRIP','LANG_MOVE_RIGHT_ARM_RELEASE','LANG_SERVO_MOVE_VALUE','LANG_SERVO_MOVE_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC);
                this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_SET')||'Set').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_GRIP'), '1'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_RELEASE'), '2'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_GRIP'), '3'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_RELEASE'), '4']
        ]),'OPTION').appendField(new Blockly.FieldImage('img/blocks/gripper.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_VALUE')||'Degrees').setAlign(Blockly.ALIGN_RIGHT);
        this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_MOVE_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };

        /*Blockly.Blocks.dyor_move_arms = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTACC'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_move_grip'),
			examples: ['dyor_move_grip_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC,
			keys: ['LANG_SERVO_MOVE_SET','LANG_MOVE_LEFT_ARM_GRIP','LANG_MOVE_LEFT_ARM_RELEASE','LANG_MOVE_RIGHT_ARM_GRIP','LANG_MOVE_RIGHT_ARM_RELEASE','LANG_SERVO_MOVE_VALUE','LANG_SERVO_MOVE_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC);
                this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_SET')||'Set').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_GRIP'), '1'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_RELEASE'), '2'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_GRIP'), '3'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_RELEASE'), '4']
        ]),'OPTION').appendField(new Blockly.FieldImage('img/blocks/gripper.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_VALUE')||'Degrees').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('ATTACH').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_ATTACH')).appendField(new Blockly.FieldCheckbox('FALSE'),'ATTACH').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_MOVE_TOOLTIP'));
            },
			onchange: function()
			{
				if (this.getFieldValue('ATTACH')==='TRUE')
				{
					try{
						if (this.getInput('TIME')===null)
						  this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME')).appendField(new Blockly.FieldNumber(1000,20),'TIME').setAlign(Blockly.ALIGN_RIGHT);
					}
					catch{
					}
				}
				else
				{
					try{
						this.removeInput('TIME');
					}
					catch{
					}
				}
			}
        };*/
		
	Blockly.Arduino.dyor_move_arms = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var left = Blockly.Arduino.valueToCode(this, 'LEFT', Blockly.Arduino.ORDER_NONE);
            var right = Blockly.Arduino.valueToCode(this, 'RIGHT', Blockly.Arduino.ORDER_NONE);
			var option = this.getFieldValue('OPTION');
			var attach = this.getFieldValue('ATTACH');
			Blockly.Arduino.definitions_['declare_var_define_move_arms'] = JST['dyor_move_arms_definitions_variables']({});
			var code='';
			var a = Facilino.findPinMode(left);
			code += a['code'];
            left = a['pin'];

            a = Facilino.findPinMode(right);
            code += a['code'];
            right = a['pin'];            
			
			if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['servo_definitions_variables']({pin: left});
				Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['servo_definitions_variables']({pin: right});
			}
			else if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+left]=JST['ESP_servo_definitions_variables']({pin: left});
				Blockly.Arduino.definitions_['declare_var_servo_'+right]=JST['ESP_servo_definitions_variables']({pin: right});
			}
			
			if (attach==='FALSE'){

            if (Facilino.isVariable(left)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': left
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + left] = JST['dyor_servo_setups']({
                    'dropdown_pin': left
                });
            }

        if (Facilino.isVariable(right)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': right
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + right] = JST['dyor_servo_setups']({
                    'dropdown_pin': right
                });
            }
    
        if (option==='5' || option==='1')
          code +='_servo'+left+'.write(_left_up);\n';
        if (option==='5' || option==='3')
          code +='_servo'+right+'.write(_right_up);\n';
        if (option==='6' || option==='2')
          code +='_servo'+left+'.write(_left_down);\n';
        if (option==='6' || option==='4')
          code +='_servo'+right+'.write(_right_down);\n';
			}
			else
			{
				var time = this.getFieldValue('TIME');
				if (option==='5' || option==='1')
				  code +='if (!_servo'+left+'.attached())\n    _servo'+left+'.attach('+left+');\n';
				if (option==='5' || option==='3')
				  code +='if (!_servo'+right+'.attached())\n    _servo'+right+'.attach('+right+');\n';
				if (option==='6' || option==='2')
				  code +='if (!_servo'+left+'.attached())\n    _servo'+left+'.attach('+left+');\n';
				if (option==='6' || option==='4')
				  code +='if (!_servo'+right+'.attached())\n    _servo'+right+'.attach('+right+');\n';
				if (option==='5' || option==='1')
				  code +='_servo'+left+'.write(_left_up);\n';
				if (option==='5' || option==='3')
				  code +='_servo'+right+'.write(_right_up);\n';
				if (option==='6' || option==='2')
				  code +='_servo'+left+'.write(_left_down);\n';
				if (option==='6' || option==='4')
				  code +='_servo'+right+'.write(_right_down);\n';
				code +='delay('+time+');\n';
				if (option==='5' || option==='1')
				  code +='  _servo'+left+'.detach();\n';
				if (option==='5' || option==='3')
				  code +='  _servo'+right+'.detach();\n';
				if (option==='6' || option==='2')
				  code +='  _servo'+left+'.detach();\n';
				if (option==='6' || option==='4')
				  code +='  _servo'+right+'.detach();\n';
			}
            return code;
        };

        Blockly.Blocks.dyor_move_arms = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTACC'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_move_arms'),
			examples: ['dyor_move_arms_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC,
			keys: ['LANG_SERVO_MOVE_ARMS','LANG_MOVE_BASE_LEFT','LANG_MOVE_BASE_RIGHT','LANG_MOVE_LEFT_ARM_UP','LANG_MOVE_LEFT_ARM_DOWN','LANG_MOVE_RIGHT_ARM_UP','LANG_MOVE_RIGHT_ARM_DOWN','LANG_MOVE_ARMS_UP','LANG_MOVE_ARMS_DOWN','LANG_MOVE_BASE_ATTACH','LANG_MOVE_BASE_TIME','LANG_MOVE_ARMS_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ARMS')).appendField(new Blockly.FieldImage('img/blocks/arms.svg', 52*options.zoom, 25*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('LEFT').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_MOVE_BASE_LEFT')||'Left').appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('RIGHT').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_MOVE_BASE_RIGHT')||'Right').appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_UP') || 'Left hand up', '1'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_DOWN') || 'Left hand down', '2'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_UP') || 'Right hand up', '3'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_DOWN') || 'Right hand dow', '4'],
        [Facilino.locales.getKey('LANG_MOVE_ARMS_UP') || 'Hands up', '5'],
        [Facilino.locales.getKey('LANG_MOVE_ARMS_DOWN') || 'Hands down', '6']
        ]),'OPTION').setAlign(Blockly.ALIGN_RIGHT);
                this.appendDummyInput('ATTACH').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_ATTACH')).appendField(new Blockly.FieldCheckbox('FALSE'),'ATTACH').setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(1000),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				this.default_time = this.getFieldValue('TIME') || 1000;
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_MOVE_ARMS_TOOLTIP'));
            },
			onchange: function()
			{
				if (this.getFieldValue('ATTACH')==='FALSE')
				{
					this.removeInput('TIME');
				}
				else
				{
					if (this.getInput('TIME')===null)
						this.appendDummyInput('TIME').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_TIME'),'TIME_TEXT').appendField(new Blockly.FieldNumber(this.default_time),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				}
			}
        };

    Blockly.Arduino.dyor_set_arms = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var value = Blockly.Arduino.valueToCode(this, 'VALUE', Blockly.Arduino.ORDER_ATOMIC);
        var option = this.getFieldValue('OPTION');
        Blockly.Arduino.definitions_['declare_var_define_move_arms'] = JST['dyor_move_arms_definitions_variables']({});

        var code='';
        if (option==='1')
          code +='_left_up='+value+';\n';
        if (option==='3')
          code +='_right_up='+value+';\n';
        if (option==='2')
          code +='_left_down='+value+';\n';
        if (option==='4')
          code +='_right_down='+value+';\n';

            return code;
        };

        Blockly.Blocks.dyor_set_arms = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTACC'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_set_arms'),
			examples: ['dyor_move_arms_example.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC,
			keys: ['LANG_SERVO_MOVE_SET','LANG_MOVE_LEFT_ARM_UP','LANG_MOVE_LEFT_ARM_DOWN','LANG_MOVE_RIGHT_ARM_UP','LANG_MOVE_RIGHT_ARM_DOWN','LANG_SERVO_MOVE_VALUE','LANG_SERVO_MOVE_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC);
                this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_SET')||'Set').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_UP'), '1'],
        [Facilino.locales.getKey('LANG_MOVE_LEFT_ARM_DOWN'), '2'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_UP'), '3'],
        [Facilino.locales.getKey('LANG_MOVE_RIGHT_ARM_DOWN'), '4']
        ]),'OPTION').appendField(new Blockly.FieldImage('img/blocks/arms.svg', 52*options.zoom, 25*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_VALUE')||'Degrees').setAlign(Blockly.ALIGN_RIGHT);
        this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_MOVE_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };
		
		Blockly.Arduino.dyor_attack_defend = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var dropdown_pin1 = Blockly.Arduino.valueToCode(this, 'SWORD', Blockly.Arduino.ORDER_NONE);
			var dropdown_pin2 = Blockly.Arduino.valueToCode(this, 'SHIELD', Blockly.Arduino.ORDER_NONE);
            var value_from1 = this.getFieldValue('FROM1');
			var value_to1 = this.getFieldValue('TO1');
			var value_from2 = this.getFieldValue('FROM2');
			var value_to2 = this.getFieldValue('TO2');
			var value_time = Number(Blockly.Arduino.valueToCode(this, 'TIME', Blockly.Arduino.ORDER_ATOMIC));
			var attach = this.getFieldValue('ATTACH');
			
			var code = '';
            var a = Facilino.findPinMode(dropdown_pin1);
            code += a['code'];
            dropdown_pin1 = a['pin'];
			var a = Facilino.findPinMode(dropdown_pin2);
            code += a['code'];
            dropdown_pin2 = a['pin'];
			
			if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin1]=JST['servo_definitions_variables']({pin: dropdown_pin1});
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin2]=JST['servo_definitions_variables']({pin: dropdown_pin2});
			}
			else if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin1]=JST['ESP_servo_definitions_variables']({pin: dropdown_pin1});
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin2]=JST['ESP_servo_definitions_variables']({pin: dropdown_pin2});
			}
			
			Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin1]=JST['servo_definitions_variables']({pin: dropdown_pin1});
			Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin2]=JST['servo_definitions_variables']({pin: dropdown_pin2});
	
			if (attach==='FALSE'){
            if (Facilino.isVariable(dropdown_pin1)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin1
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + dropdown_pin1] = JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin1
                });
            }
			
			if (Facilino.isVariable(dropdown_pin2)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin2
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + dropdown_pin2] = JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin2
                });
            }

            code += JST['dyor_servo_move']({'dropdown_pin': dropdown_pin1,'value_degree': value_from1});
			code += JST['dyor_servo_move']({'dropdown_pin': dropdown_pin2,'value_degree': value_from2});
			code += 'delay('+value_time+'/2);\n';
			code += JST['dyor_servo_move']({'dropdown_pin': dropdown_pin1,'value_degree': value_to1});
			code += JST['dyor_servo_move']({'dropdown_pin': dropdown_pin2,'value_degree': value_to2});
            code += 'delay('+value_time+'/2);\n';
			}
			else
			{
				code +='if (!_servo'+dropdown_pin1+'.attached())\n    _servo'+dropdown_pin1+'.attach('+dropdown_pin1+');\n';
				code +='if (!_servo'+dropdown_pin2+'.attached())\n    _servo'+dropdown_pin2+'.attach('+dropdown_pin2+');\n';
				code +='_servo'+dropdown_pin1+'.write('+value_from1+');\n';
				code +='_servo'+dropdown_pin2+'.write('+value_from2+');\n';
				code +='delay('+value_time+'/2);\n';
				code +='_servo'+dropdown_pin1+'.write('+value_to1+');\n';
				code +='_servo'+dropdown_pin2+'.write('+value_to2+');\n';
				code +='delay('+value_time+'/2);\n';
				code +='  _servo'+dropdown_pin1+'.detach();\n';
				code +='  _servo'+dropdown_pin2+'.detach();\n';
			}
			return code;
        };

        Blockly.Blocks.dyor_attack_defend = {
            category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_ROBOTACC'),
            tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_attack_defend'),
			examples: ['dyor_attack_defend.bly'],
			category_colour: Facilino.LANG_COLOUR_MOVEMENT,
			colour: Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC,
			keys: ['LANG_SERVO_MOVE_ATTACK_DEFEND','LANG_SERVO_MOVE_ATTACK_DEFEND_SWORD','LANG_SERVO_MOVE_ATTACK_DEFEND_FROM','LANG_SERVO_MOVE_ATTACK_DEFEND_TO','LANG_SERVO_MOVE_ATTACK_DEFEND_SHIELD','LANG_SERVO_MOVE_ATTACK_DEFEND_TIME','LANG_MOVE_BASE_ATTACH','LANG_SERVO_MOVE_ATTACK_DEFEND_TOOLTIP'],
            //servo_move initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_ROBOTACC);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND')||'Attack/Defend').appendField(new Blockly.FieldImage('img/blocks/sword.svg', 64*options.zoom, 32*options.zoom));
                this.appendValueInput('SWORD').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_SWORD')||'Sword').appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_FROM')||'From').appendField(new Blockly.FieldImage('img/blocks/angle.svg', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldNumber(90,0,180,1),'FROM1').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_TO')||'to').appendField(new Blockly.FieldImage('img/blocks/angle.svg', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldNumber(45,0,180,1),'TO1').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('SHIELD').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_SHIELD')||'Shield').appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_FROM')||'From').appendField(new Blockly.FieldImage('img/blocks/angle.svg', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldNumber(90,0,180,1),'FROM2').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_TO')||'to').appendField(new Blockly.FieldImage('img/blocks/angle.svg', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldNumber(45,0,180,1),'TO2').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('TIME').appendField(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_TIME')||'Time [ms]').appendField(new Blockly.FieldImage("img/blocks/chronometer.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('ATTACH').appendField(Facilino.locales.getKey('LANG_MOVE_BASE_ATTACH')).appendField(new Blockly.FieldCheckbox('FALSE'),'ATTACH').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_MOVE_ATTACK_DEFEND_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.system_control_pid = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var code='';
				var input = Blockly.Arduino.valueToCode(this, 'INPUT', Blockly.Arduino.ORDER_ATOMIC);
				var setpoint = Blockly.Arduino.valueToCode(this, 'SETPOINT', Blockly.Arduino.ORDER_ATOMIC);
				var Kp = this.getFieldValue('P');
				var Ki = this.getFieldValue('I');
				var Kd = this.getFieldValue('D');
				var samplingTime = this.getFieldValue('SAMPLING_TIME');
				var name = this.getFieldValue('NAME').replace(/\s+/g, '_');
				//Blockly.Arduino.definitions_['autopid']='#include <AutoPID.h>\n';
				//Blockly.Arduino.definitions_['declare_var_input_'+name] = 'float _input_'+name+'=0.0;\n';
				//Blockly.Arduino.definitions_['declare_var_setpoint_'+name] = 'float _setpoint_'+name+'=0.0;\n';
				//Blockly.Arduino.definitions_['declare_var_output_'+name] = 'float _output_'+name+'=0.0;\n';
				//Blockly.Arduino.definitions_['declare_var_pid_'+name] = 'AutoPID _pid_'+name+'(&_input_'+name+',&_output_'+name+',&_setpoint_'+name+','+Kp+','+Ki+','+Kd+','+dir+');\n';
				Blockly.Arduino.definitions_['define_compute_pid'+name] = JST['compute_pid']({name: name});
				code = '(computePID_'+name+'('+input+','+setpoint+','+samplingTime+','+Kp+','+Ki+','+Kd+'))';
				return [code, Blockly.Arduino.ORDER_ATOMIC];
			};

			Blockly.Blocks.system_control_pid = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SYSTEM'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_SYSTEM_CONTROL'),
				tags: ['system','control'],
				helpUrl: Facilino.getHelpUrl('system_control_pid'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SYSTEM,
				colour: Facilino.LANG_COLOUR_SYSTEM_CONTROL,
				keys: ['LANG_SYSTEM_CONTROL_PID_CONTROLLER','LANG_SYSTEM_CONTROL_PID_NAME','LANG_SYSTEM_CONTROL_PID_SETPOINT','LANG_SYSTEM_CONTROL_PID_INPUT','LANG_SYSTEM_CONTROL_PID_GAINS','LANG_SYSTEM_CONTROL_PID_CONTROLLER_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_SYSTEM_CONTROL);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/pid_control.png', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_CONTROLLER'));
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_NAME')).appendField(new Blockly.FieldTextInput('name'),'NAME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('SETPOINT').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_SETPOINT')).appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('INPUT').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_INPUT')).appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/chronometer.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_SAMPLING_TIME')+' (ms)').appendField(new Blockly.FieldTextInput('100'),'SAMPLING_TIME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_GAINS')).appendField('P').appendField(new Blockly.FieldTextInput('1'),'P').appendField('I').appendField(new Blockly.FieldTextInput('0'),'I').appendField('D').appendField(new Blockly.FieldTextInput('0'),'D').setAlign(Blockly.ALIGN_RIGHT);
					//this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_OUTPUT')).appendField('min').appendField(new Blockly.FieldTextInput('0'),'MIN').appendField('max').appendField(new Blockly.FieldTextInput('255'),'MAX').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setOutput(true, Number);
					this.setTooltip(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_CONTROLLER_TOOLTIP'));
				}
			};
			
		Blockly.Arduino.system_filter_lowpass = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var code='';
				var input = Blockly.Arduino.valueToCode(this, 'INPUT', Blockly.Arduino.ORDER_ATOMIC);
				var setpoint = Blockly.Arduino.valueToCode(this, 'SETPOINT', Blockly.Arduino.ORDER_ATOMIC);
				var W = this.getFieldValue('W');
				var samplingTime = this.getFieldValue('SAMPLING_TIME');
				var name = this.getFieldValue('NAME').replace(/\s+/g, '_');
				Blockly.Arduino.definitions_['define_compute_lowpass_filter'+name] = JST['compute_lowpass_filter']({name: name});
				code = '(computeLowPassFilter_'+name+'('+input+','+samplingTime+','+W+'))';
				return [code, Blockly.Arduino.ORDER_ATOMIC];
			};

			Blockly.Blocks.system_filter_lowpass = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SYSTEM'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_SYSTEM_FILTER'),
				tags: ['system','filter'],
				helpUrl: Facilino.getHelpUrl('system_filter_lowpass'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SYSTEM,
				colour: Facilino.LANG_COLOUR_SYSTEM_FILTER,
				keys: ['LANG_SYSTEM_CONTROL_FILTER_LOWPASS','LANG_SYSTEM_CONTROL_FILTER_NAME','LANG_SYSTEM_CONTROL_FILTER_INPUT','LANG_SYSTEM_CONTROL_FILTER_WEIGHT','LANG_SYSTEM_CONTROL_FILTER_LOWPASS_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_SYSTEM_FILTER);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/funnel.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_LOWPASS'));
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_NAME')).appendField(new Blockly.FieldTextInput('name'),'NAME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('INPUT').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_INPUT')).appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/chronometer.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_SAMPLING_TIME')+' (ms)').appendField(new Blockly.FieldTextInput('100'),'SAMPLING_TIME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT')+' [0~100%]').appendField(new Blockly.FieldTextInput('50'),'W').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setOutput(true, Number);
					this.setTooltip(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_LOWPASS_TOOLTIP'));
				}
			};
			
		Blockly.Arduino.system_filter_highpass = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var code='';
				var input = Blockly.Arduino.valueToCode(this, 'INPUT', Blockly.Arduino.ORDER_ATOMIC);
				var W = this.getFieldValue('W');
				var samplingTime = this.getFieldValue('SAMPLING_TIME');
				var name = this.getFieldValue('NAME').replace(/\s+/g, '_');
				Blockly.Arduino.definitions_['define_compute_highpass_filter'+name] = JST['compute_highpass_filter']({name: name});
				code = '(computeHighPassFilter_'+name+'('+input+','+samplingTime+','+W+'))';
				return [code, Blockly.Arduino.ORDER_ATOMIC];
			};

			Blockly.Blocks.system_filter_highpass = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SYSTEM'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_SYSTEM_FILTER'),
				tags: ['system','filter'],
				helpUrl: Facilino.getHelpUrl('system_filter_highpass'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SYSTEM,
				colour: Facilino.LANG_COLOUR_SYSTEM_FILTER,
				keys: ['LANG_SYSTEM_CONTROL_FILTER_HIGHPASS','LANG_SYSTEM_CONTROL_FILTER_NAME','LANG_SYSTEM_CONTROL_FILTER_INPUT','LANG_SYSTEM_CONTROL_FILTER_WEIGHT','LANG_SYSTEM_CONTROL_FILTER_HIGHPASS_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_SYSTEM_FILTER);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/funnel.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_HIGHPASS'));
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_NAME')).appendField(new Blockly.FieldTextInput('name'),'NAME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('INPUT').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_INPUT')).appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/chronometer.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_SAMPLING_TIME')+' (ms)').appendField(new Blockly.FieldTextInput('100'),'SAMPLING_TIME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT')+' [0~100%]').appendField(new Blockly.FieldTextInput('50'),'W').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setOutput(true, Number);
					this.setTooltip(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_HIGHPASS_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.system_filter_bandpass = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var code='';
				var input = Blockly.Arduino.valueToCode(this, 'INPUT', Blockly.Arduino.ORDER_ATOMIC);
				var WLOW = this.getFieldValue('WLOW');
				var WHIGH = this.getFieldValue('WHIGH');
				var samplingTime = this.getFieldValue('SAMPLING_TIME');
				var name = this.getFieldValue('NAME').replace(/\s+/g, '_');
				Blockly.Arduino.definitions_['define_compute_bandpass_filter'+name] = JST['compute_bandpass_filter']({name: name});
				code = '(computeBandPassFilter_'+name+'('+input+','+samplingTime+','+WLOW+','+WHIGH+'))';
				return [code, Blockly.Arduino.ORDER_ATOMIC];
			};

			Blockly.Blocks.system_filter_bandpass = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SYSTEM'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_SYSTEM_FILTER'),
				tags: ['system','filter'],
				helpUrl: Facilino.getHelpUrl('system_filter_bandpass'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SYSTEM,
				colour: Facilino.LANG_COLOUR_SYSTEM_FILTER,
				keys: ['LANG_SYSTEM_CONTROL_FILTER_BANDPASS','LANG_SYSTEM_CONTROL_FILTER_NAME','LANG_SYSTEM_CONTROL_FILTER_INPUT','LANG_SYSTEM_CONTROL_FILTER_WEIGHT','LANG_SYSTEM_CONTROL_FILTER_WEIGHT_LOW','LANG_SYSTEM_CONTROL_FILTER_WEIGHT_HIGH','LANG_SYSTEM_CONTROL_FILTER_BANDPASS_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_SYSTEM_FILTER);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/funnel.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_BANDPASS'));
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_NAME')).appendField(new Blockly.FieldTextInput('name'),'NAME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('INPUT').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_INPUT')).appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/chronometer.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_SAMPLING_TIME')+' (ms)').appendField(new Blockly.FieldTextInput('100'),'SAMPLING_TIME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT')+' [0~100%]').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT_LOW')).appendField(new Blockly.FieldTextInput('15'),'WLOW').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT_HIGH')).appendField(new Blockly.FieldTextInput('85'),'WHIGH').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setOutput(true, Number);
					this.setTooltip(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_BANDPASS_TOOLTIP'));
				}
			};
			
		Blockly.Arduino.system_filter_bandstop = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
				var code='';
				var input = Blockly.Arduino.valueToCode(this, 'INPUT', Blockly.Arduino.ORDER_ATOMIC);
				var WLOW = this.getFieldValue('WLOW');
				var WHIGH = this.getFieldValue('WHIGH');
				var samplingTime = this.getFieldValue('SAMPLING_TIME');
				var name = this.getFieldValue('NAME').replace(/\s+/g, '_');
				Blockly.Arduino.definitions_['define_compute_bandstop_filter'+name] = JST['compute_bandstop_filter']({name: name});
				code = '(computeBandStopFilter_'+name+'('+input+','+samplingTime+','+WLOW+','+WHIGH+'))';
				return [code, Blockly.Arduino.ORDER_ATOMIC];
			};

			Blockly.Blocks.system_filter_bandstop = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SYSTEM'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_SYSTEM_FILTER'),
				tags: ['system','filter'],
				helpUrl: Facilino.getHelpUrl('system_filter_bandstop'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SYSTEM,
				colour: Facilino.LANG_COLOUR_SYSTEM_FILTER,
				keys: ['LANG_SYSTEM_CONTROL_FILTER_BANDSTOP','LANG_SYSTEM_CONTROL_FILTER_NAME','LANG_SYSTEM_CONTROL_FILTER_INPUT','LANG_SYSTEM_CONTROL_FILTER_WEIGHT','LANG_SYSTEM_CONTROL_FILTER_WEIGHT_LOW','LANG_SYSTEM_CONTROL_FILTER_WEIGHT_HIGH','LANG_SYSTEM_CONTROL_FILTER_BANDSTOP_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_SYSTEM_FILTER);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/funnel.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_BANDSTOP'));
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_NAME')).appendField(new Blockly.FieldTextInput('name'),'NAME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('INPUT').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_INPUT')).appendField(new Blockly.FieldImage('img/blocks/analog_signal.svg',24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/chronometer.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_PID_SAMPLING_TIME')+' (ms)').appendField(new Blockly.FieldTextInput('100'),'SAMPLING_TIME').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/knob.svg',24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT')+' [0~100%]').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT_LOW')).appendField(new Blockly.FieldTextInput('35'),'WLOW').appendField(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_WEIGHT_HIGH')).appendField(new Blockly.FieldTextInput('65'),'WHIGH').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(false);
					this.setOutput(true, Number);
					this.setTooltip(Facilino.locales.getKey('LANG_SYSTEM_CONTROL_FILTER_BANDSTOP_TOOLTIP'));
				}
			};
		
		Blockly.Arduino.red_green_led = function() {
            var code = '';
            var dropdown_pinR = Blockly.Arduino.valueToCode(this, 'PIN_R', Blockly.Arduino.ORDER_ATOMIC);
			var R = Facilino.findPinMode(dropdown_pinR);
            code += R['code'];
            dropdown_pinR = R['pin'];
			var dropdown_pinG = Blockly.Arduino.valueToCode(this, 'PIN_G', Blockly.Arduino.ORDER_ATOMIC);
			var G = Facilino.findPinMode(dropdown_pinG);
            code += G['code'];
            dropdown_pinG = G['pin'];
			
			if (Facilino.isVariable(dropdown_pinR)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinR
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinR] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinR
                });
			}
			if (Facilino.isVariable(dropdown_pinG)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinG
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinG] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinG
                });
			}
			var state = this.getFieldValue('STATE') || '#000000';
			if (color === 'OFF')
			{				
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'LOW'
            });
			}
			else if (color ==='RED')
			{
			  code += JST['inout_digital_write']({
					'dropdown_pin': dropdown_pinR,
			'dropdown_stat': 'HIGH'
				});
					code += JST['inout_digital_write']({
					'dropdown_pin': dropdown_pinG,
			'dropdown_stat': 'LOW'
				});
			}
			else if (color ==='GREEN')
			{
			  code += JST['inout_digital_write']({
					'dropdown_pin': dropdown_pinR,
			'dropdown_stat': 'LOW'
				});
					code += JST['inout_digital_write']({
					'dropdown_pin': dropdown_pinG,
			'dropdown_stat': 'HIGH'
				});
			}
            return code;
        };

        Blockly.Blocks.red_green_led = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),
            tags: ['rgb','led'],
            helpUrl: Facilino.getHelpUrl('red_green_led'),
			examples: ['rgb_led_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RG_LED','LANG_RG_LED_PIN_R','LANG_RG_LED_PIN_G','LANG_RG_LED_VALUE','LANG_RG_LED_OFF','LANG_RG_LED_RED','LANG_RG_LED_GREEN','LANG_RG_LED_TOOLTIP'],
            //rgb led initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_RG_LED')).appendField(new Blockly.FieldImage('img/blocks/red_green_led.svg', 48*options.zoom, 48*options.zoom));
				this.appendValueInput('PIN_R').appendField(Facilino.locales.getKey('LANG_RG_LED_PIN_R')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_G').appendField(Facilino.locales.getKey('LANG_RG_LED_PIN_G')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_RG_LED_VALUE')).appendField(new Blockly.FieldDropdown(([[Facilino.locales.getKey('LANG_RG_LED_OFF'),'OFF'],[Facilino.locales.getKey('LANG_RG_LED_RED'),'RED'],[Facilino.locales.getKey('LANG_RG_LED_GREEN'),'GREEN']])),'STATE').setAlign(Blockly.ALIGN_RIGHT);
		this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
        this.setNextStatement(true,'code');
        this.setTooltip(Facilino.locales.getKey('LANG_RG_LED_TOOLTIP'));
            }
        };
	
		Blockly.Arduino.rgb_led = function() {
            var code = '';
            var dropdown_pinR = Blockly.Arduino.valueToCode(this, 'PIN_R', Blockly.Arduino.ORDER_ATOMIC);
			var R = Facilino.findPinMode(dropdown_pinR);
            code += R['code'];
            dropdown_pinR = R['pin'];
			var dropdown_pinG = Blockly.Arduino.valueToCode(this, 'PIN_G', Blockly.Arduino.ORDER_ATOMIC);
			var G = Facilino.findPinMode(dropdown_pinG);
            code += G['code'];
            dropdown_pinG = G['pin'];
			var dropdown_pinB = Blockly.Arduino.valueToCode(this, 'PIN_B', Blockly.Arduino.ORDER_ATOMIC);
			var B = Facilino.findPinMode(dropdown_pinB);
            code += B['code'];
            dropdown_pinB = B['pin'];
			if (Facilino.isVariable(dropdown_pinR)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinR
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinR] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinR
                });
			}
			if (Facilino.isVariable(dropdown_pinG)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinG
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinG] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinG
                });
			}
			if (Facilino.isVariable(dropdown_pinB)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinB
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinB] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinB
                });
			}
			var color = this.getFieldValue('COLOR') || '#000000';
			if (color === '#000000')
			{				
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'LOW'
            });
			}
		else if (color ==='#ffffff')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'HIGH'
            });
		}
		else if (color ==='#ff0000')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'LOW'
            });
		}
		else if (color ==='#ffff00')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'LOW'
            });
		}
		else if (color ==='#00ff00')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'LOW'
            });
		}
		else if (color ==='#00ffff')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'HIGH'
            });
		}
		else if (color ==='#0000ff')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'HIGH'
            });
		}
		else if (color ==='#ff00ff')
		{
		  code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinR,
		'dropdown_stat': 'HIGH'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinG,
		'dropdown_stat': 'LOW'
            });
				code += JST['inout_digital_write']({
                'dropdown_pin': dropdown_pinB,
		'dropdown_stat': 'HIGH'
            });
		}
            return code;
        };

        Blockly.Blocks.rgb_led = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),
            tags: ['rgb','led'],
            helpUrl: Facilino.getHelpUrl('rgb_led'),
			examples: ['rgb_led_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_LED','LANG_RGB_LED_PIN_R','LANG_RGB_LED_PIN_G','LANG_RGB_LED_PIN_B','LANG_RGB_LED_VALUE','LANG_RGB_LED_TOOLTIP'],
            //rgb led initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_RGB_LED')).appendField(new Blockly.FieldImage('img/blocks/rgb_led.svg', 48*options.zoom, 48*options.zoom));
		this.appendValueInput('PIN_R').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_R')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
	        //this.appendValueInput('VALUE_R', Boolean).setCheck(Number).appendField(Facilino.locales.getKey('LANG_RGB_LED_VALUE_R')).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('PIN_G').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_G')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		//this.appendValueInput('VALUE_G', Boolean).setCheck(Number).appendField(Facilino.locales.getKey('LANG_RGB_LED_VALUE_G')).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('PIN_B').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_B')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		//this.appendValueInput('VALUE_B', Boolean).setCheck(Number).appendField(Facilino.locales.getKey('LANG_RGB_LED_VALUE_B')).setAlign(Blockly.ALIGN_RIGHT);
		//this.appendValueInput('VALUE', Boolean).setCheck('COLOR').appendField(Facilino.locales.getKey('LANG_RGB_LED_VALUE')).appendField(new Blockly.FieldImage("img/blocks/color.png",24*options.zoom,24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		var colour = new Blockly.FieldColour('#000000');
		colour.setColours(['#000000','#FFFFFF','#FF0000','#FFFF00','#00FF00','#00FFFF','#0000FF','#FF00FF']).setColumns(2);
		//colour.COLOURS=['#000000','#FFFFFF','#FF0000','#FFFF00','#00FF00','#00FFFF','#0000FF','#FF00FF'];
		//colour.COLUMNS=2;
	 	this.appendDummyInput('COLOR').appendField(Facilino.locales.getKey('LANG_RGB_LED_VALUE')).appendField(colour,'COLOR').setAlign(Blockly.ALIGN_RIGHT);
		this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
        this.setNextStatement(true,'code');
        this.setTooltip(Facilino.locales.getKey('LANG_RGB_LED_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.rgb_raw_sensor = function() {
            var code = '';
            var dropdown_pinS0 = Blockly.Arduino.valueToCode(this, 'PIN_S0', Blockly.Arduino.ORDER_ATOMIC);
			var S0 = Facilino.findPinMode(dropdown_pinS0);
            code += S0['code'];
            dropdown_pinS0 = S0['pin'];
			var dropdown_pinS1 = Blockly.Arduino.valueToCode(this, 'PIN_S1', Blockly.Arduino.ORDER_ATOMIC);
			var S1 = Facilino.findPinMode(dropdown_pinS1);
            code += S1['code'];
            dropdown_pinS1 = S1['pin'];
			var dropdown_pinS2 = Blockly.Arduino.valueToCode(this, 'PIN_S2', Blockly.Arduino.ORDER_ATOMIC);
			var S2 = Facilino.findPinMode(dropdown_pinS2);
            code += S2['code'];
            dropdown_pinS2 = S2['pin'];
			var dropdown_pinS3 = Blockly.Arduino.valueToCode(this, 'PIN_S3', Blockly.Arduino.ORDER_ATOMIC);
			var S3 = Facilino.findPinMode(dropdown_pinS3);
            code += S3['code'];
            dropdown_pinS3 = S3['pin'];
			var dropdown_pinOUT = Blockly.Arduino.valueToCode(this, 'PIN_OUT', Blockly.Arduino.ORDER_ATOMIC);
			var OUT = Facilino.findPinMode(dropdown_pinOUT);
            code += OUT['code'];
            dropdown_pinOUT = OUT['pin'];
			var colour = this.getFieldValue('COLOR');
			if (colour ==='#ffffff'|| colour ==='#FFFFFF')
			  Blockly.Arduino.definitions_['define_colour_white'] = JST['dyor_definitions_colour_white']({});
		    else if (colour ==='#ff0000' || colour ==='#FF0000')
			  Blockly.Arduino.definitions_['define_colour_red'] = JST['dyor_definitions_colour_red']({});
		    else if (colour ==='#00ff00' || colour ==='#00FF00')
			  Blockly.Arduino.definitions_['define_colour_green'] = JST['dyor_definitions_colour_green']({});
		    else if (colour ==='#0000ff' || colour ==='#0000FF')
			  Blockly.Arduino.definitions_['define_colour_blue'] = JST['dyor_definitions_colour_blue']({});
			
			if (Facilino.isVariable(dropdown_pinS0)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS0
                });
				code +='  digitalWrite('+dropdown_pinS0+',HIGH);\n';
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS0] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS0
                });
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS0]+='  digitalWrite('+dropdown_pinS0+',HIGH);\n';
			}
			if (Facilino.isVariable(dropdown_pinS1)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS1
                });
				code +='  digitalWrite('+dropdown_pinS1+',LOW);\n';
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS1] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS1
                });
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS1]+='  digitalWrite('+dropdown_pinS1+',LOW);\n';
			}
			if (Facilino.isVariable(dropdown_pinS2)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS2
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS2] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS2
                });
			}
			if (Facilino.isVariable(dropdown_pinS3)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS3
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS3] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS3
                });
			}
			if (Facilino.isVariable(dropdown_pinOUT)) {
                code += JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pinOUT
                });
			} else {
				Blockly.Arduino.setups_['setup_green_digital_read_' + dropdown_pinOUT] = JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pinOUT
                });
			}
			//console.log(colour);
			if (colour ==='#ffffff'|| colour ==='#FFFFFF')
			  code+='getRawColourWhite('+dropdown_pinS2+','+dropdown_pinS3+','+dropdown_pinOUT+')';
		    else if (colour ==='#ff0000' || colour ==='#FF0000')
			  code+='getRawColourRed('+dropdown_pinS2+','+dropdown_pinS3+','+dropdown_pinOUT+')';
		    else if (colour ==='#00ff00' || colour ==='#00FF00')
			  code+='getRawColourGreen('+dropdown_pinS2+','+dropdown_pinS3+','+dropdown_pinOUT+')';
		    else if (colour ==='#0000ff' || colour ==='#0000FF')
			  code+='getRawColourBlue('+dropdown_pinS2+','+dropdown_pinS3+','+dropdown_pinOUT+')';
			
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };
		
		Blockly.Blocks.rgb_raw_sensor = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),	
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),
            tags: ['rgb_sensor'],
            helpUrl: Facilino.getHelpUrl('rgb_raw_sensor'),
			examples: ['rgb_raw_sensor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_RAW_SENSOR','LANG_RGB_LED_PIN_S0','LANG_RGB_LED_PIN_S1','LANG_RGB_LED_PIN_S2','LANG_RGB_LED_PIN_S3','LANG_RGB_LED_PIN_OUT','LANG_RGB_RAW_SENSOR_TOOLTIP'],
            //rgb led initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
				var colour = new Blockly.FieldColour('#FFFFFF');
				colour.setColours(['#FFFFFF','#FF0000','#00FF00','#0000FF']).setColumns(1);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_RGB_RAW_SENSOR')).appendField(new Blockly.FieldImage('img/blocks/tcs3200.svg', 91*options.zoom, 63*options.zoom)).appendField(colour,'COLOR');
				this.appendValueInput('PIN_S0').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S0')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_S1').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_S2').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_S3').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S3')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_OUT').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_OUT')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
                this.setPreviousStatement(false);
                this.setNextStatement(false);
				this.setOutput(true,Number);
                this.setTooltip(Facilino.locales.getKey('LANG_RGB_RAW_SENSOR_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.rgb_sensor = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var code = '';
            var dropdown_pinS0 = Blockly.Arduino.valueToCode(this, 'PIN_S0', Blockly.Arduino.ORDER_ATOMIC);
			var S0 = Facilino.findPinMode(dropdown_pinS0);
            code += S0['code'];
            dropdown_pinS0 = S0['pin'];
			var dropdown_pinS1 = Blockly.Arduino.valueToCode(this, 'PIN_S1', Blockly.Arduino.ORDER_ATOMIC);
			var S1 = Facilino.findPinMode(dropdown_pinS1);
            code += S1['code'];
            dropdown_pinS1 = S1['pin'];
			var dropdown_pinS2 = Blockly.Arduino.valueToCode(this, 'PIN_S2', Blockly.Arduino.ORDER_ATOMIC);
			var S2 = Facilino.findPinMode(dropdown_pinS2);
            code += S2['code'];
            dropdown_pinS2 = S2['pin'];
			var dropdown_pinS3 = Blockly.Arduino.valueToCode(this, 'PIN_S3', Blockly.Arduino.ORDER_ATOMIC);
			var S3 = Facilino.findPinMode(dropdown_pinS3);
            code += S3['code'];
            dropdown_pinS3 = S3['pin'];
			var dropdown_pinOUT = Blockly.Arduino.valueToCode(this, 'PIN_OUT', Blockly.Arduino.ORDER_ATOMIC);
			var OUT = Facilino.findPinMode(dropdown_pinOUT);
            code += OUT['code'];
            dropdown_pinOUT = OUT['pin'];
			var colour = this.getFieldValue('COLOR');
			
			Blockly.Arduino.definitions_['declare_var_define_colour'] = JST['dyor_colour_definitions_variables']({});
			Blockly.Arduino.definitions_['define_colour_white'] = JST['dyor_definitions_colour_white']({});
			Blockly.Arduino.definitions_['define_colour_red'] = JST['dyor_definitions_colour_red']({});
			Blockly.Arduino.definitions_['define_colour_green'] = JST['dyor_definitions_colour_green']({});
		    Blockly.Arduino.definitions_['define_colour_blue'] = JST['dyor_definitions_colour_blue']({});
		    Blockly.Arduino.definitions_['define_colour_readDetect'] = JST['dyor_definitions_colour_readDetect']({});
			
			if (Facilino.isVariable(dropdown_pinS0)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS0
                });
				code +='  digitalWrite('+dropdown_pinS0+',HIGH);\n';
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS0] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS0
                });
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS0]+='  digitalWrite('+dropdown_pinS0+',HIGH);\n';
			}
			if (Facilino.isVariable(dropdown_pinS1)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS1
                });
				code +='  digitalWrite('+dropdown_pinS1+',LOW);\n';
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS1] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS1
                });
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS1]+='  digitalWrite('+dropdown_pinS1+',LOW);\n';
			}
			if (Facilino.isVariable(dropdown_pinS2)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS2
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS2] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS2
                });
			}
			if (Facilino.isVariable(dropdown_pinS3)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS3
                });
			} else {
				Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pinS3] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pinS3
                });
			}
			if (Facilino.isVariable(dropdown_pinOUT)) {
                code += JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pinOUT
                });
			} else {
				Blockly.Arduino.setups_['setup_green_digital_read_' + dropdown_pinOUT] = JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pinOUT
                });
			}
			
			code+='readDetectColor('+dropdown_pinS2+','+dropdown_pinS3+','+dropdown_pinOUT+')';
			return [code, Blockly.Arduino.ORDER_ATOMIC];
        };
		
		Blockly.Blocks.rgb_sensor = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),			
            tags: ['rgb_sensor'],
            helpUrl: Facilino.getHelpUrl('rgb_sensor'),
			examples: ['rgb_sensor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_SENSOR','LANG_RGB_LED_PIN_S0','LANG_RGB_LED_PIN_S1','LANG_RGB_LED_PIN_S2','LANG_RGB_LED_PIN_S3','LANG_RGB_LED_PIN_OUT','LANG_RGB_SENSOR_TOOLTIP'],
            //rgb led initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
                this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/color.png', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_RGB_SENSOR')).appendField(new Blockly.FieldImage('img/blocks/tcs3200.svg', 91*options.zoom, 63*options.zoom));
				this.appendValueInput('PIN_S0').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S0')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_S1').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S1')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_S2').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S2')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_S3').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_S3')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN_OUT').appendField(Facilino.locales.getKey('LANG_RGB_LED_PIN_OUT')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
                this.setPreviousStatement(false);
                this.setNextStatement(false);
				this.setOutput(true,['COLOR_DETECT',Number]);
                this.setTooltip(Facilino.locales.getKey('LANG_RGB_SENSOR_TOOLTIP'));
            }
        };
		
		/*Blockly.Arduino.rgb_calibrate_colour = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var min_val = Blockly.Arduino.valueToCode(this, 'MIN', Blockly.Arduino.ORDER_ATOMIC);
				var max_val = Blockly.Arduino.valueToCode(this, 'MAX', Blockly.Arduino.ORDER_ATOMIC);
				var color = this.getFieldValue('COLOR')
				Blockly.Arduino.definitions_['declare_var_define_colour'] = JST['dyor_colour_definitions_variables']({});
				if (color === '#FF0000') {
					code = JST['dyor_calibrate_red_colour']({
                'min': min_val,
				'max': max_val,
				});
				}
				else if (color === '#00FF00') {
					code = JST['dyor_calibrate_green_colour']({
                'min': min_val,
				'max': max_val,
				});
				}
				else if (color === '#0000FF') {
					code = JST['dyor_calibrate_blue_colour']({
                'min': min_val,
				'max': max_val,
				});
				}

		return code;
        };

    Blockly.Blocks.rgb_calibrate_colour = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),
            tags: ['rgb_sensor'],
            helpUrl: Facilino.getHelpUrl('rgb_calibrate_colour'),
			examples: ['rgb_sensor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_CALIB','LANG_RGB_CALIB_MIN','LANG_RGB_CALIB_MAX','LANG_RGB_CALIB_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
			//var colour = new Blockly.FieldColour('#FFFFFF');
			//colour.setColours(['#FFFFFF','#FF0000','#00FF00','#0000FF']).setColumns(1);
			var colour = new Blockly.FieldColour('#FF0000');
			colour.setColours(['#FF0000','#00FF00','#0000FF']).setColumns(1);
			this.appendValueInput('MIN').appendField(Facilino.locales.getKey('LANG_RGB_CALIB')).appendField(colour,'COLOR').appendField(Facilino.locales.getKey('LANG_RGB_CALIB_MIN')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('MAX').appendField(Facilino.locales.getKey('LANG_RGB_CALIB_MAX')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(true);
			this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
            this.setTooltip(Facilino.locales.getKey('LANG_RGB_CALIB_TOOLTIP'));
            }
        };*/
		
		Blockly.Arduino.rgb_classify = function() {
            // Color classify if's conditions.
        if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var n = 1;
			var color_input = Blockly.Arduino.valueToCode(this,'COLOR_INPUT',Blockly.Arduino.ORDER_ATOMIC);
            var argument, branch, loop, loop_code,case2_argument,case2_code;
			//Blockly.Arduino.definitions_['declare_var_define_color'] = 'int _color_classifier=-1;\n';
            //var code = '_color_classifier='+color_input+';\n';
			var code = 'switch('+color_input+'){\n';
			for (n=1;n<this.itemCount_;n++){
				argument = Blockly.Arduino.valueToCode(this, 'DATA' + n, Blockly.Arduino.ORDER_NONE);
				branch = Blockly.Arduino.statementToCode(this, 'ITEM' + n);
				branch = indentSentences(branch);
				branch = branch.substring(0, branch.length - 1);
				code+='  case '+argument+':\n';
				code+=branch;
				code+='    break;\n';
			}
			code+='  default: break;\n';
			code+='}\n';
			return code;
        };

        Blockly.Blocks.rgb_classify = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),
            tags: ['bluetooth'],
            helpUrl: Facilino.getHelpUrl('rgb_classify'),
			examples: ['rgb_sensor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_CLASSIFY','LANG_RGB_CLASSIFY_TOOLTIP','LANG_RGB_CLASSIFY_COLOR','LANG_RGB_CLASSIFY_DO'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
                this.appendValueInput('COLOR_INPUT').setCheck('COLOR_DETECT').appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY')).appendField(new Blockly.FieldImage('img/blocks/color.png', 20*options.zoom, 20*options.zoom));
                this.setMutator(new Blockly.Mutator(['rgb_classify_color_item']));
				this.itemCount_ = 0;
				this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_RGB_CLASSIFY_TOOLTIP'));
            },
        mutationToDom: function() {
                if (!this.itemCount_ ) {
                    return null;
                }
                var container = document.createElement('mutation');
                if (this.itemCount_) {
                    container.setAttribute('item', this.itemCount_);
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.itemCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 1; x <= this.itemCount_; x++) {
				this.appendValueInput('DATA' + x).setCheck('COLOR').appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY_COLOR')).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.appendStatementInput('ITEM' + x).appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('rgb_classify_color_stack');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 1; x <= this.itemCount_; x++) {
                    var itemBlock = workspace.newBlock('rgb_classify_color_item');
                    itemBlock.initSvg();
                    connection.connect(itemBlock.previousConnection);
                    connection = itemBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the items input blocks and remove the inputs.
                for (var x = this.itemCount_; x > 0; x--) {
                    this.removeInput('DATA' + x);
                    this.removeInput('ITEM' + x);
                }
                this.itemCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'rgb_classify_color_item':
                            this.itemCount_++;
							this.setInputsInline(false);
                            var dataInput = this.appendValueInput('DATA' + this.itemCount_).setCheck('COLOR').appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY_COLOR')).setAlign(Blockly.ALIGN_RIGHT);
							var itemInput = this.appendStatementInput('ITEM' + this.itemCount_).appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                dataInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                itemInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 1;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'rgb_classify_color_item':
                            var inputData = this.getInput('DATA' + x);
                            var inputItem = this.getInput('ITEM' + x);
                            clauseBlock.valueConnection_ =
                                inputData && inputData.connection.targetConnection;
                            clauseBlock.statementConnection_ =
                                inputItem && inputItem.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            }
        };


    Blockly.Blocks.rgb_classify_color_stack = {
            // App
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_CLASSIFY_STACK','LANG_RGB_CLASSIFY_STACK_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY_STACK')).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('color_item');
                this.setTooltip(Facilino.locales.getKey('LANG_RGB_CLASSIFY_STACK_TOOLTIP'));
                this.contextMenu = false;
            }
        };
    
    Blockly.Blocks.rgb_classify_color_item = {
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_CLASSIFY_COLOR','LANG_RGB_CLASSIFY_COLOR_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_RGB_CLASSIFY_COLOR')).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'color_item');
                this.setNextStatement(true,'color_item');
                this.setTooltip(Facilino.locales.getKey('LANG_RGB_CLASSIFY_COLOR_TOOLTIP'));
        this.contextMenu = false;
            }
        };
		
		Blockly.Arduino.rgb_colour = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code='';
				var color = this.getFieldValue('COLOR')
				if (color === '#000000') {
					code = '0';
				}
				else if (color ==='#ffffff' || color === '#FFFFFF') {
					code = '1';
				}
				else if (color ==='#ff0000' || color === '#FF0000') {
					code = '2';
				}
				else if (color ==='#007f00' || color === '#007F00') {
					code = '3';
				}
				else if (color ==='#00007f' || color === '#00007F') {
					code = '4';
				}
				else if (color ==='#ffff00' || color === '#FFFF00') {
					code = '5';
				}
				else if (color ==='#ff00ff' || color === '#FF00FF') {
					code = '6';
				}
				else if (color ==='#55ff55' || color === '#55FF55') {
					code = '7';
				}
				else if (color ==='#5555ff' || color === '#5555FF') {
					code = '8';
				}
				else if (color ==='#7f007f' || color === '#7F007F') {
					code = '9';
				}
				else if (color ==='#ff6600' || color === '#FF6600') {
					code = '10';
				}

            return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.rgb_colour = {
            category: Facilino.locales.getKey('LANG_CATEGORY_LIGHT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_COLOR'),
            tags: ['rgb_sensor'],
            helpUrl: Facilino.getHelpUrl('rgb_colour'),
			examples: ['rgb_sensor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_LIGHT,
			colour: Facilino.LANG_COLOUR_LIGHT_COLOR,
			keys: ['LANG_RGB_COLOUR_TOOLTIP'],
            init: function() {
				this.setColour(Facilino.LANG_COLOUR_LIGHT_COLOR);
				//var colour = new Blockly.FieldColour('#FFFFFF');
				//colour.setColours(['#FFFFFF','#FF0000','#00FF00','#0000FF']).setColumns(1);
				var colour = new Blockly.FieldColour('#000000');
				colour.setColours(['#000000','#FFFFFF','#FF0000','#007F00','#00007F','#FFFF00','#FF00FF','#55FF55','#5555FF','#7F007F','#FF6600']).setColumns(1);
				this.appendDummyInput('').appendField(colour,'COLOR');
				this.setInputsInline(true);
				this.setPreviousStatement(false);
				this.setNextStatement(false);
				this.setOutput(true,'COLOR');
				this.setTooltip(Facilino.locales.getKey('LANG_RGB_COLOUR_TOOLTIP'));
            }
        };
	
		Blockly.Arduino.ambient_temp_temperature = function() {
				var code = '';
				var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				code += a['code'];
				dropdown_pin = a['pin'];
				
				Blockly.Arduino.definitions_['dallas_temp']=JST['dallas_temp_definitions_include']({});
				Blockly.Arduino.definitions_['one_wire_temp']=JST['one_wire_temp_definitions_include']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_one_wire'+dropdown_pin]=JST['one_wire_temp_definitions_variables']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_dallas'+dropdown_pin]=JST['dallas_temp_definitions_variables']({pin : dropdown_pin});
				if (Facilino.isVariable(dropdown_pin)) {
					code += JST['dallas_temp_setups']({pin: dropdown_pin});
				} else {
					Blockly.Arduino.setups_['setup_dallas_temp' + dropdown_pin] = JST['dallas_temp_setups']({pin: dropdown_pin});
				}
				
				
				if (this.getFieldValue('TYPE')==='C')
				  Blockly.Arduino.definitions_['one_wire_temp_readTempC']=JST['one_wire_definitions_readTempC']({pin: dropdown_pin});
			    else
				  Blockly.Arduino.definitions_['one_wire_temp_readTempF']=JST['one_wire_definitions_readTempF']({pin: dropdown_pin});
				
				if (this.getFieldValue('TYPE')==='C')
				  code += JST['one_wire_temp_readTempC']({});
			    else
				  code += JST['one_wire_temp_readTempF']({});
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_temp_temperature = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_temperature'),
			examples: ['ambient_temp_temperature_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_REQUEST_AND_READ_TEMP','LANG_TEMP_BUS_PIN','LANG_TEMP_READ_TEMP_UNIT','LANG_TEMP_REQUEST_AND_READ_TEMP_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/thermometer.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_TEMP_REQUEST_AND_READ_TEMP')).appendField(new Blockly.FieldImage("img/blocks/DS18B20.svg",48*options.zoom,48*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_TEMP_BUS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_TEMP_READ_TEMP_UNIT')).appendField(new Blockly.FieldDropdown([['ºC','C'],['ºF','F']]),'TYPE').setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_TEMP_REQUEST_AND_READ_TEMP_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_temp_resolution = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_one_wire_temp'] = a['code'];
				dropdown_pin = a['pin'];
				var resolution = this.getFieldValue('RESOLUTION');
				Blockly.Arduino.definitions_['dallas_temp']=JST['dallas_temp_definitions_include']({});
				Blockly.Arduino.definitions_['one_wire_temp']=JST['one_wire_temp_definitions_include']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_one_wire'+dropdown_pin]=JST['one_wire_temp_definitions_variables']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_dallas'+dropdown_pin]=JST['dallas_temp_definitions_variables']({pin : dropdown_pin});
				if (Facilino.isVariable(dropdown_pin)) {
					code += JST['dallas_temp_setups']({pin: dropdown_pin});
				} else {
					Blockly.Arduino.setups_['setup_dallas_temp' + dropdown_pin] = JST['dallas_temp_setups']({pin: dropdown_pin});
				}
				if (resolution==='9')
					code += 'tempSensor'+dropdown_pin+'.setResolution(9);\n';
				else if (resolution==='10')
					code += 'tempSensor'+dropdown_pin+'.setResolution(10);\n';
				else if (resolution==='11')
					code += 'tempSensor'+dropdown_pin+'.setResolution(11);\n';
				else if (resolution==='12')
					code += 'tempSensor'+dropdown_pin+'.setResolution(12);\n';
				return code;
        };

		Blockly.Blocks.ambient_temp_resolution = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['gas','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_resolution'),
			examples: ['ambient_temp_resolution_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_RESOLUTION','LANG_TEMP_BUS_PIN','LANG_TEMP_RESOLUTION_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_TEMP_RESOLUTION')).appendField(new Blockly.FieldDropdown([
        ['9 Bits','9'],
        ['10 Bits','10'],
        ['11 Bits','11'],
        ['12 Bits','12']]),'RESOLUTION').appendField(new Blockly.FieldImage("img/blocks/DS18B20.svg",48*options.zoom,48*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_TEMP_BUS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
            this.setTooltip(Facilino.locales.getKey('LANG_TEMP_RESOLUTION_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_temp_alarm = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code = '';
			var handlerCode = '';
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_one_wire_temp'] = a['code'];
				dropdown_pin = a['pin'];
            
            Blockly.Arduino.definitions_['dallas_temp']=JST['dallas_temp_definitions_include']({});
				Blockly.Arduino.definitions_['one_wire_temp']=JST['one_wire_temp_definitions_include']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_one_wire'+dropdown_pin]=JST['one_wire_temp_definitions_variables']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_dallas'+dropdown_pin]=JST['dallas_temp_definitions_variables']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['one_wire_definitions_checkTempSensorDeviceAddress'+dropdown_pin]=JST['one_wire_definitions_checkTempSensorDeviceAddress']({pin : dropdown_pin});
				
			var high = Blockly.Arduino.statementToCode(this, 'HIGH');
			var low = Blockly.Arduino.statementToCode(this, 'LOW');
			handlerCode +='float temp;\n';
			//handlerCode +='tempSensor'+dropdown_pin+'.requestTemperaturesByAddress(deviceAddress);\n';
			handlerCode +='temp=tempSensor'+dropdown_pin+'.getTempC(deviceAddress);\n';
			handlerCode += '     \n      if (temp>=(float)tempSensor'+dropdown_pin+'.getHighAlarmTemp(deviceAddress)&&checkTempSensorDeviceAddress'+dropdown_pin+'(deviceAddress,0)) {\n'+high+'    }';
			handlerCode += '     \n      if (temp<=(float)tempSensor'+dropdown_pin+'.getLowAlarmTemp(deviceAddress)&&checkTempSensorDeviceAddress'+dropdown_pin+'(deviceAddress,0)) {\n'+low+'    }';
			Blockly.Arduino.definitions_['one_wire_temp_alarmHandler'+dropdown_pin]=JST['one_wire_definitions_alarmHandler']({pin : dropdown_pin, code: handlerCode});
			if (Facilino.isVariable(dropdown_pin)) {
				code += JST['dallas_temp_setups']({pin: dropdown_pin});
			} else {
				Blockly.Arduino.setups_['setup_dallas_temp' + dropdown_pin] = JST['dallas_temp_setups']({pin: dropdown_pin});
			}
			if (Facilino.isVariable(dropdown_pin)) {
				code += JST['one_wire_temp_alarm_setups']({pin: dropdown_pin});
			} else {
				Blockly.Arduino.setups_['setup_one_wire_alarm_temp' + dropdown_pin] = JST['one_wire_temp_alarm_setups']({pin: dropdown_pin});
			}
			code = 'tempSensor'+dropdown_pin+'.processAlarms();\n';
			
			return code;
        };
 
        Blockly.Blocks.ambient_temp_alarm = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_alarm'),
			examples: ['ambient_temp_alarm_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_ALARM','LANG_TEMP_BUS_PIN','LANG_TEMP_ALARM_TOOLTIP'],
            init: function() {
            this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_TEMP_ALARM')).appendField(new Blockly.FieldImage("img/blocks/DS18B20.svg",48*options.zoom,48*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_TEMP_BUS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('HIGH').appendField(new Blockly.FieldImage("img/blocks/thermometer_high.png",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
				this.appendStatementInput('LOW').appendField(new Blockly.FieldImage("img/blocks/thermometer_low.png",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                this.setInputsInline(false);
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_TEMP_ALARM_TOOLTIP'));
            }
        };
         
		
		Blockly.Arduino.ambient_temp_set_alarm = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var option = this.getFieldValue('OPTION');
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_one_wire_temp'] = a['code'];
				dropdown_pin = a['pin'];
			var value_pin = Blockly.Arduino.valueToCode(this, 'VALUE', Blockly.Arduino.ORDER_NONE);
			
            Blockly.Arduino.definitions_['dallas_temp']=JST['dallas_temp_definitions_include']({});
				Blockly.Arduino.definitions_['one_wire_temp']=JST['one_wire_temp_definitions_include']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_one_wire'+dropdown_pin]=JST['one_wire_temp_definitions_variables']({pin : dropdown_pin});
				Blockly.Arduino.definitions_['declare_var_define_dht_dallas'+dropdown_pin]=JST['dallas_temp_definitions_variables']({pin : dropdown_pin});
				if (Facilino.isVariable(dropdown_pin)) {
					code += JST['dallas_temp_setups']({pin: dropdown_pin});
				} else {
					Blockly.Arduino.setups_['setup_dallas_temp' + dropdown_pin] = JST['dallas_temp_setups']({pin: dropdown_pin});
				}
        var code='';
				
        if (option==='1'){
			Blockly.Arduino.definitions_['declare_var_define_deviceAddress'+dropdown_pin] = 'DeviceAddress _deviceAddress'+dropdown_pin+';\n';
			code+='tempSensor'+dropdown_pin+'.getAddress(_deviceAddress'+dropdown_pin+',0);\n';
			code+='tempSensor'+dropdown_pin+'.setHighAlarmTemp(_deviceAddress'+dropdown_pin+','+value_pin+');\n';
		}
        if (option==='2'){
			Blockly.Arduino.definitions_['declare_var_define_deviceAddress'+dropdown_pin] = 'DeviceAddress _deviceAddress'+dropdown_pin+';\n';
			code+='tempSensor'+dropdown_pin+'.getAddress(_deviceAddress'+dropdown_pin+',0);\n';
			code+='tempSensor'+dropdown_pin+'.setLowAlarmTemp(_deviceAddress'+dropdown_pin+','+value_pin+');\n';
		}
            return code;
        };

        Blockly.Blocks.ambient_temp_set_alarm = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_set_alarm'),
			examples: ['ambient_temp_alarm_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_ALARM_SET','LANG_TEMP_ALARM_HIGH','LANG_TEMP_ALARM_LOW','LANG_TEMP_BUS_PIN','LANG_TEMP_CELSIUS','LANG_TEMP_ALARM_SET_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_TEMP_ALARM_SET')||'Set').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_TEMP_ALARM_HIGH'), '1'],
        [Facilino.locales.getKey('LANG_TEMP_ALARM_LOW'), '2']
        ]),'OPTION').appendField(new Blockly.FieldImage('img/blocks/DS18B20.svg', 48*options.zoom, 48*options.zoom));
		this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_TEMP_BUS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		//this.appendValueInput('IDX').appendField(Facilino.locales.getKey('LANG_TEMP_IDX')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_TEMP_CELSIUS')||'Celsius').setAlign(Blockly.ALIGN_RIGHT);
        this.setPreviousStatement(true,'code');
        this.setNextStatement(true,'code');
		this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_TEMP_ALARM_SET_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };
		
		Blockly.Arduino.ambient_temp_toCelsius = function() {
				var code = '';
				var temp_pin = Blockly.Arduino.valueToCode(this, 'TEMP', Blockly.Arduino.ORDER_ATOMIC);
				var a = Facilino.findPinMode(temp_pin);
				code += a['code'];
				dropdown_pin = a['pin'];
				Blockly.Arduino.definitions_['dallas_temp']=JST['dallas_temp_definitions_include']({});
				code += 'DallasTemperature::toCelsius('+temp_pin+')';
            return [code,Blockly.Arduino.CODE_ATOMIC];
        };
		
		Blockly.Blocks.ambient_temp_toCelsius = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_toCelsius'),
			examples: ['ambient_temp_conversion_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_F2C','LANG_TEMP_TO_CELSIUS_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
			this.appendValueInput('TEMP').appendField(new Blockly.FieldImage("img/blocks/thermometer_celsius.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_TEMP_F2C')).appendField(new Blockly.FieldImage("img/blocks/thermometer_fahrenheit.png",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_TEMP_TO_CELSIUS_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_temp_toFahrenheit = function() {
				var code = '';
				var temp_pin = Blockly.Arduino.valueToCode(this, 'TEMP', Blockly.Arduino.ORDER_ATOMIC);
				var a = Facilino.findPinMode(temp_pin);
				code += a['code'];
				dropdown_pin = a['pin'];
				Blockly.Arduino.definitions_['dallas_temp']=JST['dallas_temp_definitions_include']({});
				code += 'DallasTemperature::toFahrenheit('+temp_pin+')';
            return [code,Blockly.Arduino.CODE_ATOMIC];
        };
		
		Blockly.Blocks.ambient_temp_toFahrenheit = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_toFahrenheit'),
			examples: ['ambient_temp_conversion_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_C2F','LANG_TEMP_TO_FAHRENHEIT_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
			this.appendValueInput('TEMP').appendField(new Blockly.FieldImage("img/blocks/thermometer_fahrenheit.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_TEMP_C2F')).appendField(new Blockly.FieldImage("img/blocks/thermometer_celsius.png",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_TEMP_TO_FAHRENHEIT_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_humid_humidityDHT = function() {
				var code = '';
				var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				dropdown_pin = a['pin'];
				var type = this.getFieldValue('TYPE');
				Blockly.Arduino.definitions_['dht']=JST['dht_definitions_include']({});
				Blockly.Arduino.definitions_['declare_var_define_dht'+type+dropdown_pin]=JST['dht_definitions_variables']({pin : dropdown_pin, type: type});
				if (Facilino.isVariable(dropdown_pin)) {
					code += JST['dht_setups']({pin: dropdown_pin, type: type});
				} else {
					Blockly.Arduino.setups_['setup_dht' + dropdown_pin] = JST['dht_setups']({pin: dropdown_pin, type: type});
				}
				code += 'sensor'+type+'_'+dropdown_pin+'.readHumidity()'
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_humid_humidityDHT = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_HUMIDITY'),
            tags: ['humidity','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_humid_humidityDHT'),
			examples: ['ambient_humid_humidityDHT_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_HUMIDITY,
			keys: ['LANG_HUMID_READ_HUMID','LANG_HUMID_PIN','LANG_HUMID_READ_HUMID_DHT_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_HUMIDITY);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/humidity.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_HUMID_READ_HUMID')).appendField(new Blockly.FieldDropdown([['DHT11','DHT11'],['DHT21','DHT21'],['DHT22','DHT22']]),'TYPE').appendField(new Blockly.FieldImage("img/blocks/dht11.svg",63*options.zoom,63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_HUMID_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_HUMID_READ_HUMID_DHT_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_humid_alarm = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code = '';
			var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				dropdown_pin = a['pin'];
			var high = Blockly.Arduino.statementToCode(this,'HIGH') || '';
            var low = Blockly.Arduino.statementToCode(this,'LOW') || '';
			var type = this.getFieldValue('TYPE');
			Blockly.Arduino.definitions_['dht']=JST['dht_definitions_include']({});
			Blockly.Arduino.definitions_['declare_var_define_dht'+type+dropdown_pin]=JST['dht_definitions_variables']({pin : dropdown_pin, type: type});
			code += JST['dht_humid_alarm']({pin: dropdown_pin, type: type, high: high, low: low});
			return code;
        };

		Blockly.Blocks.ambient_humid_alarm = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_HUMIDITY'),
            tags: ['humidity','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_humid_alarm'),
			examples: ['ambient_humid_alarm_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_HUMIDITY,
			keys: ['LANG_HUMID_ALARM','LANG_HUMID_PIN','LANG_HUMID_ALARM_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_HUMIDITY);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_HUMID_ALARM')).appendField(new Blockly.FieldDropdown([['DHT11','DHT11'],['DHT21','DHT21'],['DHT22','DHT22']]),'TYPE').appendField(new Blockly.FieldImage("img/blocks/dht11.svg",63*options.zoom,63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_HUMID_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('HIGH').appendField(new Blockly.FieldImage("img/blocks/humidity_high.png", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
				this.appendStatementInput('LOW').appendField(new Blockly.FieldImage("img/blocks/humidity_low.png", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
				this.setInputsInline(false);
                //this.setOutput(true, Number);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_HUMID_ALARM_TOOLTIP'));
            }
        };

		Blockly.Arduino.ambient_humid_set_alarm = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
		var code='';
			var option = this.getFieldValue('OPTION');
			var type = this.getFieldValue('TYPE');
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_one_wire_temp'] = a['code'];
				dropdown_pin = a['pin'];
			var value_pin = Blockly.Arduino.valueToCode(this, 'VALUE', Blockly.Arduino.ORDER_NONE);
			
			Blockly.Arduino.definitions_['declare_var_define_dht_const'+option+type+dropdown_pin]=JST['dht_humid_definitions_consts']({pin : dropdown_pin, type: type, option: option});
            
			code+='_dht_'+option+'_'+type+'_'+dropdown_pin+'='+value_pin+';\n';
				
            return code;
        };

        Blockly.Blocks.ambient_humid_set_alarm = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_HUMIDITY'),
            tags: ['humidity','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_humid_set_alarm'),
			examples: ['ambient_humid_alarm_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_HUMIDITY,
			keys: ['LANG_HUMID_ALARM_SET','LANG_HUMID_ALARM_HIGH','LANG_HUMID_ALARM_LOW','LANG_HUMID_PIN','LANG_HUMID_PERCENTAGE','LANG_HUMID_ALARM_SET_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_HUMIDITY);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_HUMID_ALARM_SET')||'Set').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_HUMID_ALARM_HIGH'), 'H'],
        [Facilino.locales.getKey('LANG_HUMID_ALARM_LOW'), 'L']
        ]),'OPTION').appendField(new Blockly.FieldDropdown([['DHT11','DHT11'],['DHT21','DHT21'],['DHT22','DHT22']]),'TYPE').appendField(new Blockly.FieldImage('img/blocks/dht11.svg', 63*options.zoom, 63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_HUMID_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_HUMID_PERCENTAGE')||'%').setAlign(Blockly.ALIGN_RIGHT);
			this.setPreviousStatement(true,'code');
			this.setNextStatement(true,'code');
			this.setInputsInline(false);
			this.setTooltip(Facilino.locales.getKey('LANG_HUMID_ALARM_SET_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_temp_temperatureDHT = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				dropdown_pin = a['pin'];
				var type = this.getFieldValue('TYPE');
				Blockly.Arduino.definitions_['dht']=JST['dht_definitions_include']({});
				Blockly.Arduino.definitions_['declare_var_define_dht'+type+dropdown_pin]=JST['dht_definitions_variables']({pin : dropdown_pin, type: type});
				if (Facilino.isVariable(dropdown_pin)) {
					code += JST['dht_setups']({pin: dropdown_pin, type: type});
				} else {
					Blockly.Arduino.setups_['setup_dht' + dropdown_pin] = JST['dht_setups']({pin: dropdown_pin, type: type});
				}
				code += 'sensor'+type+'_'+dropdown_pin+'.readTemperature()'
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_temp_temperatureDHT = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature_sensor','meteo'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_temperatureDHT'),
			examples: ['ambient_temp_temperatureDHT_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_TEMP_READ_HUMID','LANG_TEMP_PIN','LANG_TEMP_READ_TEMP_DHT_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/thermometer_celsius.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_TEMP_READ_HUMID')).appendField(new Blockly.FieldDropdown([['DHT11','DHT11'],['DHT21','DHT21'],['DHT22','DHT22']]),'TYPE').appendField(new Blockly.FieldImage("img/blocks/dht11.svg",63*options.zoom,63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_TEMP_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_TEMP_READ_TEMP_DHT_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_raindrop = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';

            code += JST['dyor_read_analog']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };
		
		Blockly.Blocks.ambient_raindrop = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_RAIN'),
            tags: ['raindrop','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_raindrop'),
			examples: ['ambient_raindrop.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_RAIN,
			keys: ['LANG_RAINDROP','LANG_RAINDROP_PIN','LANG_RAINDROP_ANALOG_TOOLTIP'],
            //infrared initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_AMBIENT_RAIN);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/rain.png",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_RAINDROP')).appendField(new Blockly.FieldImage('img/blocks/yl_83.svg', 73*options.zoom, 49*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_RAINDROP_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_RAINDROP_ANALOG_TOOLTIP'));
            }
        };

		Blockly.Arduino.ambient_raindrop_digital = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			
            if (Facilino.isVariable(dropdown_pin)) {
                code += JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pin,
                });
            } else {
                Blockly.Arduino.setups_['setup_green_digital_read' + dropdown_pin] = JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pin,
                });
            }

            code += JST['dyor_read_digital']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.ambient_raindrop_digital = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_RAIN'),
            tags: ['raindrop_sensor','meteo'],
            helpUrl: Facilino.getHelpUrl('ambient_raindrop_digital'),
			examples: ['ambient_raindrop_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_RAIN,
			keys: ['LANG_RAINDROP','LANG_RAINDROP_PIN','LANG_RAINDROP_DIGITAL_TOOPTIP'],
            //infrared initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_AMBIENT_RAIN);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/rain.png",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_RAINDROP')).appendField(new Blockly.FieldImage('img/blocks/yl_83.svg', 73*options.zoom, 49*options.zoom));
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_RAINDROP_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Boolean);
                this.setTooltip(Facilino.locales.getKey('LANG_RAINDROP_DIGITAL_TOOPTIP'));
            }
        };
		
		Blockly.Arduino.ambient_raindrop_alarm = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code = '';
			var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
			var rain = Blockly.Arduino.statementToCode(this,'RAIN') || '';
			var wet = Blockly.Arduino.statementToCode(this,'WET') || '';
			var dry = Blockly.Arduino.statementToCode(this,'DRY') || '';
			Blockly.Arduino.definitions_['declare_var_define_raindrop'+dropdown_pin]=JST['raindrop_definitions_variables']({pin : dropdown_pin});
			code += JST['raindrop_alarm']({pin: dropdown_pin, wet: wet, rain: rain, dry: dry});
			return code;
        };

		Blockly.Blocks.ambient_raindrop_alarm = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_RAIN'),
            tags: ['raindrop','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_raindrop_alarm'),
			examples: ['ambient_raindrop_alarm_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_RAIN,
			keys: ['LANG_RAINDROP_LEVEL','LANG_RAINDROP_PIN','LANG_RAINDROP_LEVEL_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_RAIN);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_RAINDROP_LEVEL')).appendField(new Blockly.FieldImage("img/blocks/yl_83.svg",73*options.zoom,49*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_RAINDROP_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('RAIN').appendField(new Blockly.FieldImage("img/blocks/rain_drop.png", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
				this.appendStatementInput('WET').appendField(new Blockly.FieldImage("img/blocks/wet.png", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
				this.appendStatementInput('DRY').appendField(new Blockly.FieldImage("img/blocks/sun.png", 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
				this.setInputsInline(false);
                //this.setOutput(true, Number);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_RAINDROP_LEVEL_TOOLTIP'));
            }
        };

		Blockly.Arduino.ambient_raindrop_set_alarm = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
		var code='';
			var option = this.getFieldValue('OPTION');
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var a = Facilino.findPinMode(dropdown_pin);
				Blockly.Arduino.setups_['setup_one_wire_temp'] = a['code'];
				dropdown_pin = a['pin'];
			var value_pin = Blockly.Arduino.valueToCode(this, 'VALUE', Blockly.Arduino.ORDER_NONE);
			
			
            Blockly.Arduino.definitions_['declare_var_define_raindrop'+dropdown_pin]=JST['raindrop_definitions_variables']({pin : dropdown_pin});
			code+='_raindrop_'+option+'_'+dropdown_pin+'='+value_pin+';\n';
				
            return code;
        };

        Blockly.Blocks.ambient_raindrop_set_alarm = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_RAIN'),
            tags: ['raindrop','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_raindrop_set_alarm'),
			examples: ['ambient_raindrop_alarm_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_RAIN,
			keys: ['LANG_RAINDROP_LEVEL_SET','LANG_RAINDROP_LEVEL_RAIN','LANG_RAINDROP_LEVEL_WET','LANG_RAINDROP_PIN','LANG_RAINDROP_VALUE','LANG_RAINDROP_SET_LEVEL_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_RAIN);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_RAINDROP_LEVEL_SET')||'Set').appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_RAINDROP_LEVEL_RAIN'), 'rain'],
        [Facilino.locales.getKey('LANG_RAINDROP_LEVEL_WET'), 'wet']
        ]),'OPTION').appendField(new Blockly.FieldImage('img/blocks/yl_83.svg', 73*options.zoom, 49*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_RAINDROP_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
		this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_RAINDROP_VALUE')||'Value').setAlign(Blockly.ALIGN_RIGHT);
        this.setPreviousStatement(true,'code');
        this.setNextStatement(true,'code');
		this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_RAINDROP_SET_LEVEL_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };
		
		Blockly.Arduino.ambient_gas_analog_read = function() {
			var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            code += JST['dyor_read_analog']({
                'dropdown_pin': dropdown_pin
            });
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

		Blockly.Blocks.ambient_gas_analog_read = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GAS'),
            tags: ['gas','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_gas_analog_read'),
			examples: ['ambient_gas_analog_read_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_GAS,
			keys: ['LANG_GAS_ANALOG_READ','LANG_GAS_PIN','LANG_GAS_ANALOG_READ_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_GAS);
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_GAS_ANALOG_READ')).appendField(new Blockly.FieldImage("img/blocks/co2.svg",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_GAS_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_GAS_ANALOG_READ_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_gas_digital_read = function() {
			var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			
            if (Facilino.isVariable(dropdown_pin)) {
                code += JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pin,
                });
            } else {
                Blockly.Arduino.setups_['setup_green_digital_read' + dropdown_pin] = JST['inout_digital_read_setups']({
                    'dropdown_pin': dropdown_pin,
                });
            }

            code += JST['dyor_read_digital']({
                'dropdown_pin': dropdown_pin
            });

            //  code=code.substring(0,code.length-1);
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };

		Blockly.Blocks.ambient_gas_digital_read = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GAS'),
            tags: ['gas','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_gas_digital_read'),
			examples: ['ambient_gas_digital_read_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_GAS,
			keys: ['LANG_GAS_DIGITAL_READ','LANG_GAS_PIN','LANG_GAS_DIGITAL_READ_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_GAS);
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_GAS_DIGITAL_READ')).appendField(new Blockly.FieldImage("img/blocks/co2.svg",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_GAS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_GAS_DIGITAL_READ_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_gas_calibrate = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				Blockly.Arduino.definitions_['define_calibrate_gas_sensor'] = JST['calibrate_gas_sensor']({});
				Blockly.Arduino.definitions_['define_resistance_gas_sensor'] = JST['resistance_gas_sensor']({});
				var sensor = this.getFieldValue('SENSOR');
				if (sensor==='MQ2')
					code='calibrate_gas_sensor('+dropdown_pin+',9.83)';
				else if (sensor==='MQ3')
					code='calibrate_gas_sensor('+dropdown_pin+',61)';
				else if (sensor==='MQ4')
					code='calibrate_gas_sensor('+dropdown_pin+',4.4)';
				else if (sensor==='MQ5')
					code='calibrate_gas_sensor('+dropdown_pin+',6.4)';
				else if (sensor==='MQ6')
					code='calibrate_gas_sensor('+dropdown_pin+',9.83)';
				else if (sensor==='MQ8')
					code='calibrate_gas_sensor('+dropdown_pin+',70)';
				else if (sensor==='MQ9')
					code='calibrate_gas_sensor('+dropdown_pin+',9.83)';
				else if (sensor==='MQ135')
					code='calibrate_gas_sensor('+dropdown_pin+',3.6)';
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_gas_calibrate = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GAS'),
            tags: ['gas','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_gas_calibrate'),
			examples: ['ambient_gas_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_GAS,
			keys: ['LANG_GAS_CALIBRATE','LANG_GAS_PIN','LANG_GAS_SENSOR','LANG_GAS_CALIBRATE_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_GAS);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/resistor.svg",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_GAS_CALIBRATE')).appendField(new Blockly.FieldImage("img/blocks/co2.svg",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_GAS_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_GAS_SENSOR')).appendField(new Blockly.FieldDropdown([['MQ2','MQ2'],['MQ3','MQ3'],['MQ4','MQ4'],['MQ5','MQ5'],['MQ6','MQ6'],['MQ8','MQ8'],['MQ9','MQ9'],['MQ135','MQ135']]),'SENSOR').setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_GAS_CALIBRATE_TOOLTIP'));
            }
        };

		Blockly.Arduino.ambient_gas_read_calibrated = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE);
				var sensor = this.getFieldValue('SENSOR');
				if (sensor ==='MQ2')
					var r0_default = '0.28';
				else
					var r0_default ='';
				var r0 = Blockly.Arduino.valueToCode(this, 'R0', Blockly.Arduino.ORDER_NONE) || r0_default;
				var a = Facilino.findPinMode(dropdown_pin);
				code += a['code'];
				dropdown_pin = a['pin'];
				Blockly.Arduino.definitions_['define_calibrated_gas_sensor'] = JST['calibrated_gas_sensor']({});
				Blockly.Arduino.definitions_['define_resistance_gas_sensor'] = JST['resistance_gas_sensor']({});
				
				var gas_type = this.getFieldValue('GAS_TYPE');
				code='calibrated_gas_sensor('+JST['dyor_read_analog']({'dropdown_pin': dropdown_pin})+',_'+sensor+'_'+gas_type+','+r0+')';
				if (sensor==='MQ2')
				{   
					if (gas_type==='H2')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.318063334962762,-0.470608305646543};\n';
					else if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.204119982655925,-0.454838058661866};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.477121254719662,-0.375681832141500};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.716003343634799,-0.335423996010616};\n';
					else if (gas_type==='ALCOHOL')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.462397997898956,-0.382281405556614};\n';
					else if (gas_type==='SMOKE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.531478917042255,-0.415195155029891};\n';
					else if (gas_type==='PROPANE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.230448921378274,-0.461038681105012};\n';
					
				}
				else if (sensor==='MQ3')
				{
					if (gas_type==='ALCOHOL')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={-1.0,0.361727836017593,-0.660167575429684};\n';
				    else if (gas_type==='BENZINE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={-1.0,0.602059991327962,-0.354982694318741};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={-1.0,1.681241237375587,-0.039590623023812};\n';
					else if (gas_type==='HEXANE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={-1.0,1.698970004336019,-0.349485002168009};\n';
					else if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={-1.0,1.698970004336019,-0.276420984328890};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={-1.0,1.698970004336019,-0.247425010840047};\n';
				}
				else if (sensor==='MQ4')
				{
					if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.397940008672038,-0.311193421656487};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.255272505103306,-0.365988833197046};\n';
					else if (gas_type==='H2')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.579783596616810,-0.177183820135558};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.623249290397900,-0.054015299341032};\n';
					else if (gas_type==='ALCOHOL')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.602059991327962,-0.069312672784473};\n';
					else if (gas_type==='SMOKE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.591064607026499,-0.113671576226525};\n';
				}
				else if (sensor==='MQ5')
				{   
					if (gas_type==='H2')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.255272505103306,-0.280829710649381};\n';
					else if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,-0.154901959985743,-0.411408089932221};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,-0.026872146400301,-0.395591361954847};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.585460729508501,-0.137305668023437};\n';
					else if (gas_type==='ALCOHOL')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.544068044350276,-0.208206351658474};\n';
				}
				else if (sensor==='MQ6')
				{
					if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.311753861055754,-0.424191864594402};\n';
					else if (gas_type==='H2')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.763427993562937,-0.272163720794863};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.397940008672038,-0.387044690312107};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.949390006644913,-0.080329052104363};\n';
					else if (gas_type==='ALCOHOL')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.903089986991944,-0.170871839721304};\n';
				}
				else if (sensor==='MQ8')
				{
					if (gas_type==='H2')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.929418925714293,-1.452068560080013};\n';
					else if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,1.477121254719662,-0.213763575275574};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,1.740362689494244,-0.163607768757472};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,1.812913356642856,-0.124106585034912};\n';
					else if (gas_type==='ALCOHOL')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,1.361727836017593,-0.588591910067779};\n';
				}
				else if (sensor==='MQ9')
				{   
					if (gas_type==='LPG')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.315970345456918,-0.473279094054572};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.204119982655925,-0.438492194892732};\n';
					else if (gas_type==='CH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={2.301029995663981,0.487138375477186,-0.377899747390683};\n';
				}
				else if (sensor==='MQ135')
				{   
					if (gas_type==='CO2')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={1.0,0.361727836017593,-0.352519043030659};\n';
					else if (gas_type==='CO')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={1.0,0.454844860008510,-0.262024325986192};\n';
					else if (gas_type==='SMOKE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={1.0,0.255272505103306,-0.305865360520722};\n';
					else if (gas_type==='NH4')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={1.0,0.406540180433955,-0.404084909575708};\n';
					else if (gas_type==='BENZENE')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={1.0,0.176091259055681,-0.284321872904252};\n';
					else if (gas_type==='NH3')
					  Blockly.Arduino.definitions_['declare_var_'+sensor+'_'+gas_type]='float _'+sensor+'_'+gas_type+'[3]={1.0,0.161368002234975,-0.305865360520722};\n';
				}
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_gas_read_calibrated = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GAS'),
            tags: ['gas','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_gas_read_calibrated'),
			examples: ['ambient_gas_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_GAS,
			keys: ['LANG_GAS_READ_CALIBRATED','LANG_GAS_PIN','LANG_GAS_R0','LANG_GAS_SENSOR','LANG_GAS_TYPE','LANG_GAS_H2','LANG_GAS_ALCOHOL','LANG_GAS_LPG','LANG_GAS_CO2','LANG_GAS_CH4','LANG_GAS_CO','LANG_GAS_ALCOHOL','LANG_GAS_SMOKE','LANG_GAS_PROPANE','LANG_GAS_BENZENE','LANG_GAS_READ_CALIBRATED_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_GAS);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/ppm.svg",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_GAS_READ_CALIBRATED')).appendField(new Blockly.FieldImage("img/blocks/co2.svg",32*options.zoom,32*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_GAS_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('R0').appendField(Facilino.locales.getKey('LANG_GAS_R0')).appendField(new Blockly.FieldImage("img/blocks/resistor.svg", 20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_GAS_SENSOR')).appendField(new Blockly.FieldDropdown([['MQ2','MQ2'],['MQ3','MQ3'],['MQ4','MQ4'],['MQ5','MQ5'],['MQ6','MQ6'],['MQ8','MQ8'],['MQ9','MQ9'],['MQ135','MQ135']]),'SENSOR').setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput('GAS_TYPE').appendField(Facilino.locales.getKey('LANG_GAS_TYPE')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_H2'),'H2'],[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL'],[Facilino.locales.getKey('LANG_GAS_SMOKE'),'SMOKE'],[Facilino.locales.getKey('LANG_GAS_PROPANE'),'PROPANE']]),'GAS_TYPE').setAlign(Blockly.ALIGN_RIGHT);
			this._sensor=this.getFieldValue('SENSOR');
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_GAS_READ_CALIBRATED_TOOLTIP'));
            },
			onchange: function(){
				if (this.getFieldValue('SENSOR')!==this._sensor)
				{
					this._sensor=this.getFieldValue('SENSOR');
					this.getInput('GAS_TYPE').removeField('GAS_TYPE');
					if (this._sensor=='MQ2')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_H2'),'H2'],[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL'],[Facilino.locales.getKey('LANG_GAS_SMOKE'),'SMOKE'],[Facilino.locales.getKey('LANG_GAS_PROPANE'),'PROPANE']]),'GAS_TYPE');
					else if (this._sensor=='MQ3')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL'],[Facilino.locales.getKey('LANG_GAS_BENZINE'),'BENZINE'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_HEXANE'),'HEXANE'],[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO']]),'GAS_TYPE');
					else if (this._sensor=='MQ4')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_H2'),'H2'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL'],[Facilino.locales.getKey('LANG_GAS_SMOKE'),'SMOKE']]),'GAS_TYPE');
					else if (this._sensor=='MQ5')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_H2'),'H2'],[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL']]),'GAS_TYPE');
					else if (this._sensor=='MQ6')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_H2'),'H2'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL']]),'GAS_TYPE');
					else if (this._sensor=='MQ8')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_H2'),'H2'],[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_ALCOHOL'),'ALCOHOL']]),'GAS_TYPE');
					else if (this._sensor=='MQ9')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_LPG'),'LPG'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_CH4'),'CH4']]),'GAS_TYPE');
					else if (this._sensor=='MQ135')
						this.getInput('GAS_TYPE').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_GAS_CO2'),'CO2'],[Facilino.locales.getKey('LANG_GAS_CO'),'CO'],[Facilino.locales.getKey('LANG_GAS_SMOKE'),'SMOKE'],[Facilino.locales.getKey('LANG_GAS_NH4'),'NH4'],[Facilino.locales.getKey('LANG_GAS_BENZENE'),'BENZENE'],[Facilino.locales.getKey('LANG_GAS_NH3'),'NH3']]),'GAS_TYPE');					
				}
			}
        };			
		
		Blockly.Arduino.ambient_pressure_pressureBMP180 = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
				Blockly.Arduino.definitions_['bmp']=JST['bmp_definitions_include']({});
				Blockly.Arduino.definitions_['declare_var_define_bmp']='Adafruit_BMP085 bmp;\n';
				Blockly.Arduino.setups_['setup_bmp'] = 'bmp.begin();\n';
				
				code += 'bmp.readPressure()'
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_pressure_pressureBMP180 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OTHER'),
            tags: ['barometer','pressure','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_pressure_pressureBMP180'),
			examples: ['ambient_pressureBMP180_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_OTHER,
			keys: ['LANG_PRESSURE_READ_PRESSURE_BMP','LANG_PRESSURE_READ_PRESSURE_BMP_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_OTHER);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/barometer.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_PRESSURE_READ_PRESSURE_BMP')).appendField(new Blockly.FieldImage("img/blocks/bmp180.svg",63*options.zoom,63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_PRESSURE_READ_PRESSURE_BMP_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_temp_pressureBMP180 = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
				Blockly.Arduino.definitions_['bmp']=JST['bmp_definitions_include']({});
				Blockly.Arduino.definitions_['declare_var_define_bmp']='Adafruit_BMP085 bmp;\n';
				Blockly.Arduino.setups_['setup_bmp'] = 'bmp.begin();\n';
				
				code += 'bmp.readTemperature()'
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_temp_pressureBMP180 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_TEMPERATURE'),
            tags: ['temperature','barometer','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_temp_pressureBMP180'),
			examples: ['ambient_pressureBMP180_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE,
			keys: ['LANG_PRESSURE_READ_PRESSURE_BMP','LANG_TEMP_READ_TEMP_BMP_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_TEMPERATURE);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/thermometer_celsius.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_PRESSURE_READ_PRESSURE_BMP')).appendField(new Blockly.FieldImage("img/blocks/bmp180.svg",63*options.zoom,63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_TEMP_READ_TEMP_BMP_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_altitude_pressureBMP180 = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code = '';
				var pressure = Blockly.Arduino.valueToCode(this, 'VALUE', Blockly.Arduino.ORDER_NONE) || '101325';
				Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
				Blockly.Arduino.definitions_['bmp']=JST['bmp_definitions_include']({});
				Blockly.Arduino.definitions_['declare_var_define_bmp']='Adafruit_BMP085 bmp;\n';
				Blockly.Arduino.setups_['setup_bmp'] = 'bmp.begin();\n';
				
				code += 'bmp.readAltitude('+pressure+')';
				return [code,Blockly.Arduino.CODE_ATOMIC];
        };

		Blockly.Blocks.ambient_altitude_pressureBMP180 = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OTHER'),
            tags: ['altitude','barometer','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_altitude_pressureBMP180'),
			examples: ['ambient_pressureBMP180_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_OTHER,
			keys: ['LANG_PRESSURE_READ_PRESSURE_BMP','LANG_ALTITUDE_READ_ALTITUDE_BMP_SEALEVEL_PRESSURE','LANG_ALTITUDE_READ_ALTITUDE_BMP_TOOLTIP'],
            init: function() {
			this.setColour(Facilino.LANG_COLOUR_AMBIENT_OTHER);
			this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/altitude.png",32*options.zoom,32*options.zoom)).appendField(Facilino.locales.getKey('LANG_PRESSURE_READ_PRESSURE_BMP')).appendField(new Blockly.FieldImage("img/blocks/bmp180.svg",63*options.zoom,63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('VALUE').appendField(Facilino.locales.getKey('LANG_ALTITUDE_READ_ALTITUDE_BMP_SEALEVEL_PRESSURE')||'Pa').setAlign(Blockly.ALIGN_RIGHT);
			this.setInputsInline(false);
			this.setPreviousStatement(false);
            this.setNextStatement(false);
			this.setOutput(true,Number);
            this.setTooltip(Facilino.locales.getKey('LANG_ALTITUDE_READ_ALTITUDE_BMP_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.ambient_guva_s12sd = function() {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';

			if (this.getFieldValue('OPTION')==='mWcm2')
			 code += '2.0930232558139534883720930232558*((float)'+JST['dyor_read_analog']({'dropdown_pin': dropdown_pin})+')';
			else
			  code += '0.048828125*((float)'+JST['dyor_read_analog']({'dropdown_pin': dropdown_pin})+')';
            return [code, Blockly.Arduino.ORDER_ATOMIC];
        };


        Blockly.Blocks.ambient_guva_s12sd = {
            category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OTHER'),
            tags: ['uv','ambient'],
            helpUrl: Facilino.getHelpUrl('ambient_guva_s12sd'),
			examples: ['ambient_guva_s12sd_example.bly'],
			category_colour: Facilino.LANG_COLOUR_AMBIENT,
			colour: Facilino.LANG_COLOUR_AMBIENT_OTHER,
			keys: ['LANG_GUVA_S12SD','LANG_GUVA_S12SD_mWcm2','LANG_GUVA_S12SD_INDEX','LANG_GUVA_S12SD_PIN','LANG_GUVA_S12SD_TOOLTIP'],
            //infrared initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_AMBIENT_OTHER);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/radiation.png",24*options.zoom,24*options.zoom)).appendField(Facilino.locales.getKey('LANG_GUVA_S12SD')).appendField(new Blockly.FieldDropdown([
        [Facilino.locales.getKey('LANG_GUVA_S12SD_mWcm2'), 'mWcm2'],
        [Facilino.locales.getKey('LANG_GUVA_S12SD_INDEX'), 'index']
        ]),'OPTION').appendField(new Blockly.FieldImage('img/blocks/guva_s12sd.svg', 73*options.zoom, 73*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_GUVA_S12SD_PIN')).appendField(new Blockly.FieldImage("img/blocks/analog_signal.svg",20*options.zoom, 20*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.setOutput(true, Number);
                this.setTooltip(Facilino.locales.getKey('LANG_GUVA_S12SD_TOOLTIP'));
            }
        };
				
		//Blockly.Arduino.meteo_send_data = function() {
        //    var code = '';
		//	var url = Blockly.Arduino.valueToCode(this, 'URL', Blockly.Arduino.ORDER_ATOMIC) || 'http://meteo.roboticafacil.es';
		//	var date = Blockly.Arduino.valueToCode(this, 'DATE', Blockly.Arduino.ORDER_ATOMIC) || '"09/08/2017 17:01:00"';
		//	var temp = Blockly.Arduino.valueToCode(this, 'TEMP', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	var temp_max = '0'; //Max temperature
		//	var temp_min = '0'; //Min temperature
		//	var humid = Blockly.Arduino.valueToCode(this, 'HUMID', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	var pressure = Blockly.Arduino.valueToCode(this, 'PRESSURE', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	var wind = Blockly.Arduino.valueToCode(this, 'WIND', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	var bearing = Blockly.Arduino.valueToCode(this, 'BEARING', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	var rain = '0'; //Total rain
		//	var wind_gust = '0'; //Wind gust
		//	var rain_rate = Blockly.Arduino.valueToCode(this, 'RAIN', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	var radiation = Blockly.Arduino.valueToCode(this, 'RADIATION', Blockly.Arduino.ORDER_ATOMIC) || '0';
		//	Blockly.Arduino.definitions_['declare_getDate']=JST['GetDate']({});
		//	code+='int _year,_month,_day,_hour,_minute,_second;\n';
		//	code+='GetDate('+date+',_year,_month,_day,_hour,_minute,_second);\n';
		//	code+='String _url=String("/admin/tableAddAjax.php?")';
		//	code+='+String("y=")+_year+String("&m=")+_month+String("&d=")+_day+String("&h=")+_hour+String("&i=")+_minute';
		//	code+='+String("&T=")+'+temp+'+String("&Tmax=")+'+temp_max+'+String("&Tmin=")+'+temp_min;
		//	code+='+String("&H=")+'+humid+'+String("&P=")+'+pressure;
		//	code+='+String("&W=")+'+wind+'+String("&G=")+'+wind_gust;
		//	code+='+String("&R=")+'+rain+'+String("&RR=")+'+rain_rate;
		//	code+='+String("&B=")+'+bearing+'+String("&S=")+'+radiation+';\n';
        //    return code;
        //};
		
		//Blockly.Blocks.meteo_send_data = {
		//	category: Facilino.locales.getKey('LANG_CATEGORY_AMBIENT'),
        //    tags: ['meteo','html'],
        //    helpUrl: Facilino.getHelpUrl('meteo_send_data'),
        //    init: function() {
        //        this.setColour(this.colour);
		//		this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/html.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_SEND_DATA')).appendField(new Blockly.FieldImage('img/blocks/wifi.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        //        this.appendValueInput('URL').setCheck(String).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_SERVER')).appendField(new Blockly.FieldImage('img/blocks/meteo.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('DATE').setCheck('TIME').appendField(Facilino.locales.getKey('LANG_TIME_DATE')).appendField(new Blockly.FieldImage('img/blocks/calendar.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('TEMP').setCheck(Number).appendField(Facilino.locales.getKey('LANG_TEMP_TEMP')).appendField(new Blockly.FieldImage('img/blocks/thermometer_celsius.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('HUMID').setCheck(Number).appendField(Facilino.locales.getKey('LANG_HUMID_HUMID')).appendField(new Blockly.FieldImage('img/blocks/humidity.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('PRESSURE').setCheck(Number).appendField(Facilino.locales.getKey('LANG_PRESSURE_PRESSURE')).appendField(new Blockly.FieldImage('img/blocks/barometer.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('WIND').setCheck(Number).appendField(Facilino.locales.getKey('LANG_WIND_WIND')).appendField(new Blockly.FieldImage('img/blocks/wind.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('BEARING').setCheck(Number).appendField(Facilino.locales.getKey('LANG_BEARING_BEARING')).appendField(new Blockly.FieldImage('img/blocks/wind-rose.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('RAIN').setCheck(Number).appendField(Facilino.locales.getKey('LANG_RAIN_RAIN')).appendField(new Blockly.FieldImage('img/blocks/rain.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.appendValueInput('RADIATION').setCheck(Number).appendField(Facilino.locales.getKey('LANG_RADIATION_RADIATION')).appendField(new Blockly.FieldImage('img/blocks/radiation.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//		this.setInputsInline(false);
        //        this.setPreviousStatement(true);
        //        this.setNextStatement(true);
		//		this.setOutput(true,String);
        //        this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_SEND_DATA_TOOLTIP'));
        //this.contextMenu = true;
        //    }
        //};
		
		Blockly.Arduino.html_doc = function() {
			var code = 'String("<!DOCTYPE html>\\r\\n';
			code += '<html>\\r\\n';
			var doc = Blockly.Arduino.statementToCode(this,'DOC') || '+';
			code += doc;
			code += '</html>\\r\\n")';
            return [code,Blockly.Arduino.ORDER_NONE];
		}
		
		Blockly.Blocks.html_doc = {
            category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_HTML'),
            tags: ['html'],
            helpUrl: Facilino.getHelpUrl('html_doc'),
			examples: ['communications_wifi_html_server_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_DOC','LANG_WIFI_ESP8266_HTML_DOC_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
                this.appendDummyInput().appendField(new Blockly.FieldImage('img/blocks/html.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_DOC'));
                this.appendStatementInput('DOC').setAlign(Blockly.ALIGN_RIGHT).setCheck('html_tag');
				this.setInputsInline(false);
                this.setPreviousStatement(false, null);
                this.setNextStatement(false, null);
				this.setOutput(true,String);
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_DOC_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.html_tag = function() {
			var n = 1;
			var attributes="";
            for (n = 1; n <= this.itemCount_; n++)
			{
				attributes += Blockly.Arduino.valueToCode(this, 'ATTRIBUTE' + n, Blockly.Arduino.ORDER_NONE);
				//attributes=attributes.replace('"', "'").replace('"', "'");
			}
			
			var tag = this.getFieldValue('TAG');
			var code = '<'+tag+' ' +attributes+'>\\r\\n'+Blockly.Arduino.statementToCode(this,'DOC') + '\\r\\n</'+tag+'>\\r\\n';
            return code;
		}
		
		Blockly.Blocks.html_tag = {
            category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_HTML'),
            tags: ['html'],
            helpUrl: Facilino.getHelpUrl('html_tag'),
			examples: ['communications_wifi_html_server_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_TAG','LANG_WIFI_ESP8266_HTML_ATTRIBUTES','LANG_WIFI_ESP8266_HTML_TAG_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
                this.appendDummyInput().appendField(new Blockly.FieldImage('img/blocks/html.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_TAG')).appendField(new Blockly.FieldDropdown([
        ['head', 'head'],
        ['body', 'body'],
        ['h1', 'h1'],
        ['h2', 'h2'],
        ['h3', 'h3'],
        ['h4', 'h4'],
        ['h5', 'h5'],
        ['h6', 'h6'],
		['hr', 'hr'],
        ['p', 'p'],
		['br', 'br'],
        ['a', 'a'],
        ['img', 'img'],
		['ul','ul'],
		['ol','ol'],
		['li','li'],
		['table','table'],
		['tr','tr'],
		['th','th'],
		['td','td'],
		['div','div'],
		['span','span'],
		['style','style'],
		['title', 'title'],
		['caption','caption'],
		['meta','meta'],
		['link','link'],
		['base','base'],
		['script','script'],
		['iframe','iframe']
        ]),'TAG').setAlign(Blockly.ALIGN_RIGHT);
				this.appendStatementInput('DOC').setAlign(Blockly.ALIGN_RIGHT).setCheck('html');
				this.appendDummyInput('ATTRIBUTES').appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTES')+' '+this.getFieldValue('TAG')).setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
                this.setPreviousStatement(true,'html_tag');
                this.setNextStatement(true,'html_tag');
				this.setOutput(false);
				this.setMutator(new Blockly.Mutator(['html_attribute_item']));
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_TAG_TOOLTIP'));
				this.itemCount_=0;
				this.last_tag=-1;
            },
        mutationToDom: function() {
                if (!this.itemCount_ ) {
                    return null;
                }
                var container = document.createElement('mutation');
                if (this.itemCount_) {
                    container.setAttribute('item', this.itemCount_);
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.itemCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
				this.appendDummyInput('ATTRIBUTES').appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTES')+' '+this.getFieldValue('TAG')).setAlign(Blockly.ALIGN_RIGHT);
                for (var x = 1; x <= this.itemCount_; x++) {
                    this.appendValueInput('ATTRIBUTE' + x).setCheck('ATTRIBUTE').appendField(new Blockly.FieldImage('img/blocks/attribute.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                    this.setInputsInline(false);
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('html_tag_attributes');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 1; x <= this.itemCount_; x++) {
                    var itemBlock = workspace.newBlock('html_attribute_item');
                    itemBlock.initSvg();
                    connection.connect(itemBlock.previousConnection);
                    connection = itemBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the items input blocks and remove the inputs.
				for (var x = this.itemCount_; x > 0; x--) {
                    this.removeInput('ATTRIBUTE' + x);
                }
				this.removeInput('ATTRIBUTES');
				this.appendDummyInput('ATTRIBUTES').appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTES')+' '+this.getFieldValue('TAG')).setAlign(Blockly.ALIGN_RIGHT);
				this.itemCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'html_attribute_item':
                            this.itemCount_++;
                            this.setInputsInline(false);
                            var attrInput = this.appendValueInput('ATTRIBUTE' + this.itemCount_).setCheck('ATTRIBUTE').appendField(new Blockly.FieldImage('img/blocks/attribute.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                attrInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 1;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'html_attribute_item':
                            var inputData = this.getInput('ATTRIBUTE' + x);
                            clauseBlock.valueConnection_ =
                                inputData && inputData.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
			onchange: function() {
				if (!this.workspace) {
                     // Block has been deleted.
                     return;
                 }
				 if (this.last_tag!=this.getFieldValue('TAG'))
				 {
					 this.last_tag=this.getFieldValue('TAG');
				     for (var x = this.itemCount_; x > 0; x--) {
                       this.removeInput('ATTRIBUTE' + x);
                     }
				     this.removeInput('ATTRIBUTES');
				     this.appendDummyInput('ATTRIBUTES').appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTES')+' '+this.getFieldValue('TAG')).setAlign(Blockly.ALIGN_RIGHT);
				     this.itemCount_ = 0;
				 }
			}
        };
		
		Blockly.Blocks.html_tag_attributes = {
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_TAG','LANG_WIFI_ESP8266_HTML_TAG_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_TAG')).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('html_attribute');
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_TAG_TOOLTIP'));
                this.contextMenu = false;
            }
        };
     
    Blockly.Blocks.html_attribute_item = {
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_ATTRIBUTE','LANG_WIFI_ESP8266_HTML_ATTRIBUTE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTE'));
                this.setPreviousStatement(true,'html_attribute');
                this.setNextStatement(true,'html_attribute');
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTE_TOOLTIP'));
        this.contextMenu = false;
            }
        };
		
		Blockly.Arduino.html_attribute = function() {
			var attr = this.getFieldValue('ATTRIBUTE');
			var attr_text = Blockly.Arduino.valueToCode(this,'ATTRIBUTE_TEXT',Blockly.Arduino.ORDER_ATOMIC);
			var code ='';
			try{
			if (this.getInputTargetBlock('ATTRIBUTE_TEXT').type==='text'||this.getInputTargetBlock('ATTRIBUTE_TEXT').type==='math_number')
			{
			  attr_text=attr_text.replace('"','');
			  attr_text=attr_text.replace('"','');
			  code=attr+'=\\"'+attr_text+'\\" ';
			}
			else if (this.getInputTargetBlock('ATTRIBUTE_TEXT').type==='variables_get')
			{				
			  code = attr+'=\\"")+'+attr_text+'+String("\\" ';
			}
		    }
			catch(e) {}
			return [code,Blockly.Arduino.ORDER_NONE];
		}
		
		Blockly.Blocks.html_attribute = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_HTML'),
            tags: ['html'],
            helpUrl: Facilino.getHelpUrl('html_attribute'),
			examples: ['communications_wifi_html_server_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_ATTRIBUTE_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
				this.appendValueInput('ATTRIBUTE_TEXT').appendField(new Blockly.FieldImage('img/blocks/attribute.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldDropdown([
        ['id','id'],
		['href', 'href'],
		['style','style'],
		['disabled','disabled'],
        ['src', 'src'],
        ['width', 'width'],
        ['height', 'height'],
        ['alt', 'alt'],
        ['title', 'title'],
		['colspan','colspan'],
		['rowspan','rowspan']
        ]),'ATTRIBUTE');
                    this.setInputsInline(false);
                this.setPreviousStatement(false);
                this.setNextStatement(false);
				this.setOutput(true,'ATTRIBUTE');
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_ATTRIBUTE_TOOLTIP'));
        this.contextMenu = true;
            }
		
        };
		
		Blockly.Arduino.html_text = function() {
			var code ='';
			
			var textInput = Blockly.Arduino.valueToCode(this,'TEXT',Blockly.Arduino.ORDER_ATOMIC);
			try{
			if (this.getInputTargetBlock('TEXT').type==='text'||this.getInputTargetBlock('TEXT').type==='math_number')
			{
			  textInput=textInput.replace('"','');
			  textInput=textInput.replace('"','');
			  code = textInput;
			}
			else if (this.getInputTargetBlock('TEXT').type==='variables_get')
			{				
			  code = '")+'+textInput+'+String("';
			}
		    }
			catch(e) {}
			return code;
		}
		
		Blockly.Blocks.html_text = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_HTML'),
            tags: ['html'],
            helpUrl: Facilino.getHelpUrl('html_text'),
			examples: ['communications_wifi_html_server_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_TEXT_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
				this.appendValueInput('TEXT').appendField(new Blockly.FieldImage('img/blocks/text-font.png', 20*options.zoom, 20*options.zoom)).setCheck(String).setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
                this.setPreviousStatement(true,'html');
                this.setNextStatement(true,'html');
				this.setOutput(false);
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_TEXT_TOOLTIP'));
			this.contextMenu = true;
            }
        };
		
		Blockly.Arduino.html_text_format = function() {
			var format = this.getFieldValue('TEXT_FORMAT') || '';
			var textInput = Blockly.Arduino.valueToCode(this,'TEXT',Blockly.Arduino.ORDER_ATOMIC);
			try{
			if (this.getInputTargetBlock('TEXT').type==='text'||this.getInputTargetBlock('TEXT').type==='math_number')
			{
			  textInput=textInput.replace('"','');
			  textInput=textInput.replace('"','');
			  code ='<'+format+'>'+textInput+'</'+format+'>'; 
			}
			else if (this.getInputTargetBlock('TEXT').type==='variables_get')
			{				
			  code = '")+'+textInput+'+String("';
			}
		    }
			catch(e) {}
			return code;
		}
		
		Blockly.Blocks.html_text_format = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_HTML'),
            tags: ['html'],
            helpUrl: Facilino.getHelpUrl('html_text_format'),
			examples: ['communications_wifi_html_server_example2.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_HTML,
			keys: ['LANG_WIFI_ESP8266_HTML_TEXT_FORMAT_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_HTML);
				this.appendValueInput('TEXT').appendField(new Blockly.FieldImage('img/blocks/text-font.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldDropdown([
		['b', 'b'],
		['strong','strong'],
		['i','i'],
		['em','em'],
        ['mark', 'mark'],
        ['small', 'small'],
        ['del', 'del'],
        ['ins', 'ins'],
        ['sub', 'sub'],
		['sup', 'sup']
        ]),'TEXT_FORMAT');
                this.setInputsInline(false);
                this.setPreviousStatement(true,'html');
                this.setNextStatement(true,'html');
				this.setOutput(false);
                this.setTooltip(Facilino.locales.getKey('LANG_WIFI_ESP8266_HTML_TEXT_FORMAT_TOOLTIP'));
			this.contextMenu = true;
            }
        };
		

		if ((Facilino.locales.processor==='NodeMCU')||(Facilino.locales.processor==='ESP32')|| (Facilino.locales.processor===null))
		{
			Blockly.Blocks['espui'] = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_ESPUI'),
			helpUrl: Facilino.getHelpUrl('espui'),
			tags: ['webinterface'],
			examples: ['lol.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_ESPUI,
			keys: ['LANG_ESPUI_ESPUI_TITLE','LANG_ESPUI_ESPUI_HOTSPOT','LANG_ESPUI_ESPUI_TOOLTIP'],
			init: function() {
				var wifiOptions = [['No', false],['Yes', true]];
				this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_ESPUI_TITLE')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_ESPUI_TITLE')), 'ui_name');
			   this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_ESPUI_HOTSPOT')).appendField(new Blockly.FieldDropdown(wifiOptions), 'wifi_option');
				this.appendStatementInput('ui_elements').setCheck('ui_element');
				this.setColour(Facilino.LANG_COLOUR_ESPUI);
				this.setTooltip(Facilino.locales.getKey('LANG_ESPUI_ESPUI_TOOLTIP'));
				}
			};

	Blockly.Arduino['espui'] = function(block) {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var ui_name = block.getFieldValue('ui_name');
		var wifi_option = block.getFieldValue('wifi_option');
		var ui_elements = Blockly.Arduino.statementToCode(block, 'ui_elements');
		Blockly.Arduino.definitions_['define_wifi_h'] = '#include <WiFi.h>';
		Blockly.Arduino.definitions_['define_espui_h'] = '#include <ESPUI.h>';
		Blockly.Arduino.setups_['setup_espui'] = '\n';
		if(wifi_option){
		  Blockly.Arduino.setups_['setup_espui'] +=
		  '    Serial.begin(115200);\n\n' +
		  '    WiFi.mode(WIFI_AP);\n' +
		  '    WiFi.softAP("' + ui_name + '");\n' +
		  '    Serial.print("IP address: ");\n' +
		  '    Serial.println(WiFi.softAPIP());\n\n';
		}
		Blockly.Arduino.setups_['setup_espui'] += ui_elements;
		Blockly.Arduino.setups_['setup_espui'] += '    ESPUI.begin("' + ui_name + '");\n';
		return null;
	};

//Elements

	Blockly.Blocks['espui_button'] = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_ESPUI'),
			helpUrl: Facilino.getHelpUrl('espui_button'),
			tags: ['webinterface'],
			examples: ['lol.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_ESPUI,
			keys: ['LANG_ESPUI_BUTTON_BUTTON','LANG_ESPUI_NAME','LANG_ESPUI_COLOR','LANG_ESPUI_TEXT','LANG_ESPUI_BUTTON_TOOLTIP'],
		init: function() {
			var colour = new Blockly.FieldColour('#000000');
			colour.setColours(['#000000','#40e0d0','#50c878','#3498dc','#687894','#e4d422','#eb8921','#e32636']).setColumns(2);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_BUTTON_BUTTON')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_NAME')), 'ui_name');
			//this.appendDummyInput().appendField('UI Color').appendField(new Blockly.FieldDropdown(colorOptions), 'ui_color');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_COLOR')).appendField(colour, 'ui_color');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_TEXT')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_TEXT')), 'button_text');
			this.setColour(Facilino.LANG_COLOUR_ESPUI);
			this.setPreviousStatement(true, 'ui_element');
			this.setNextStatement(true, 'ui_element');
			this.setTooltip(Facilino.locales.getKey('LANG_ESPUI_BUTTON_TOOLTIP'));
			this.appendStatementInput('on_down').appendField(new Blockly.FieldImage('img/blocks/button_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck(null);
			this.appendStatementInput('on_up').appendField(new Blockly.FieldImage('img/blocks/button_released.svg', 20*options.zoom, 20*options.zoom)).setCheck(null);
		}
	};

	Blockly.Arduino['espui_button'] = function(block) {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var ui_name = block.getFieldValue('ui_name');
		var color = block.getFieldValue('ui_color');
		var colorOptions = {"#000000": "COLOR_NONE", "#40e0d0": "COLOR_TURQUOISE", "#50c878": "COLOR_EMERALD", "#3498dc": "COLOR_PETERRIVER", "#687894": "COLOR_WETASPHALT", "#e4d422": "COLOR_SUNFLOWER", "#eb8921": "COLOR_CARROT", "#e32636": "COLOR_ALIZARIN"};
		var ui_color = colorOptions[color];
		var button_text = block.getFieldValue('button_text');
		var ui_name_clean = ui_name.replace(' ', '_');
		var on_down = Blockly.Arduino.statementToCode(block, 'on_down');
		var on_up = Blockly.Arduino.statementToCode(block, 'on_up');
		Blockly.Arduino.definitions_['define_ui_button_' + ui_name_clean] =
			'void button_' + ui_name_clean + '(Control c, int type) {\n' +
			' switch(type){\n' +
			'  case B_DOWN:\n' +
			on_down + '    break;\n' +
			'  case B_UP:\n' +
			on_up + '    break;\n' +
			' }\n' +
			'}\n';

		var code = '  ESPUI.button("' + ui_name + '", &button_' + ui_name_clean + ', ' + ui_color + ', "' + button_text + '");\n';
		return code;
	};

	Blockly.Blocks['espui_label'] = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_ESPUI'),
			helpUrl: Facilino.getHelpUrl('espui_label'),
			tags: ['webinterface'],
			examples: ['lol.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_ESPUI,
			keys: ['LANG_ESPUI_LABEL_LABEL','LANG_ESPUI_NAME','LANG_ESPUI_COLOR','LANG_ESPUI_TEXT','LANG_ESPUI_LABEL_TOOLTIP'],
		init: function() {
			var colour = new Blockly.FieldColour('#000000');
			colour.setColours(['#000000','#40e0d0','#50c878','#3498dc','#687894','#e4d422','#eb8921','#e32636']).setColumns(2);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_LABEL_LABEL')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_NAME')), 'ui_name');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_COLOR')).appendField(colour, 'ui_color');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_TEXT')).appendField(new Blockly.FieldTextInput('value'), 'start_value');
			this.setColour(Facilino.LANG_COLOUR_ESPUI);
			this.setPreviousStatement(true, 'ui_element');
			this.setNextStatement(true, 'ui_element');
			this.setTooltip(Facilino.locales.getKey('LANG_ESPUI_LABEL_TOOLTIP'));
		}
	};

	Blockly.Arduino['espui_label'] = function(block) {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var ui_name = block.getFieldValue('ui_name');
		var ui_color = block.getFieldValue('ui_color');
		var ui_name_clean = ui_name.replace(' ', '_');
		var start_value = block.getFieldValue('start_value');
		var code = '  ESPUI.label("' + ui_name_clean + '", ' + ui_color + ', "' + start_value + '");\n';
		return code;
	};
	
	Blockly.Blocks['espui_label_print'] = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_ESPUI'),
			helpUrl: Facilino.getHelpUrl('espui_label'),
			tags: ['webinterface'],
			examples: ['lol.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_ESPUI,
			keys: ['LANG_ESPUI_LABEL_LABEL','LANG_ESPUI_NAME','LANG_ESPUI_TEXT','LANG_ESPUI_LABEL_PRINT_TOOLTIP'],
		init: function() {
			var colour = new Blockly.FieldColour('#000000');
			colour.setColours(['#000000','#40e0d0','#50c878','#3498dc','#687894','#e4d422','#eb8921','#e32636']).setColumns(2);
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_LABEL_LABEL')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_NAME')), 'ui_name');
			this.appendValueInput('value').appendField(Facilino.locales.getKey('LANG_ESPUI_TEXT')).setCheck(String);
			this.setColour(Facilino.LANG_COLOUR_ESPUI);
			this.setPreviousStatement(true, 'code');
			this.setNextStatement(true, 'code');
			this.setTooltip(Facilino.locales.getKey('LANG_ESPUI_LABEL_PRINT_TOOLTIP'));
		}
	};

	Blockly.Arduino['espui_label_print'] = function(block) {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var ui_name = block.getFieldValue('ui_name');
		var ui_name_clean = ui_name.replace(' ', '_');
		var value = Blockly.Arduino.valueToCode(this,'value',Blockly.Arduino.ORDER_ATOMIC);
		var code = '  ESPUI.print("' + ui_name_clean + '", ' + value + '");\n';
		return code;
	};

	Blockly.Blocks['espui_switcher'] = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_ESPUI'),
			helpUrl: Facilino.getHelpUrl('espui_switcher'),
			tags: ['webinterface'],
			examples: ['lol.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_ESPUI,
			keys: ['LANG_ESPUI_SWITCH_SWITCH','LANG_ESPUI_NAME','LANG_ESPUI_COLOR','LANG_ESPUI_STATE','LANG_ESPUI_SWITCH_TOOLTIP'],
		init: function() {
			var colour = new Blockly.FieldColour('#000000');
			colour.setColours(['#000000','#40e0d0','#50c878','#3498dc','#687894','#e4d422','#eb8921','#e32636']).setColumns(2);
			var stateOptions = [['Off', 'false'],['On', 'true']];
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_SWITCH_SWITCH')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_NAME')), 'ui_name');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_COLOR')).appendField(colour, 'ui_color');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_STATE')).appendField(new Blockly.FieldDropdown(stateOptions), 'switcher_state');
			this.setColour(Facilino.LANG_COLOUR_ESPUI);
			this.setPreviousStatement(true, 'ui_element');
			this.setNextStatement(true, 'ui_element');
			this.setTooltip(Facilino.locales.getKey('LANG_ESPUI_SWITCH_TOOLTIP')); //''
			this.appendStatementInput('on_on').appendField(new Blockly.FieldImage('img/blocks/switch_on.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_off').appendField(new Blockly.FieldImage('img/blocks/switch_off.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
		}
	};

	Blockly.Arduino['espui_switcher'] = function(block) {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
		var ui_name = block.getFieldValue('ui_name');
		var color = block.getFieldValue('ui_color');
		var colorOptions = {"#000000": "COLOR_NONE", "#40e0d0": "COLOR_TURQUOISE", "#50c878": "COLOR_EMERALD", "#3498dc": "COLOR_PETERRIVER", "#687894": "COLOR_WETASPHALT", "#e4d422": "COLOR_SUNFLOWER", "#eb8921": "COLOR_CARROT", "#e32636": "COLOR_ALIZARIN"};
		var ui_color = colorOptions[color];
		var switcher_state = block.getFieldValue('switcher_state');
		var ui_name_clean = ui_name.replace(' ', '_');
		var on_on = Blockly.Arduino.statementToCode(block, 'on_down');
		var on_off = Blockly.Arduino.statementToCode(block, 'on_up');
		Blockly.Arduino.definitions_['define_ui_switcher_' + ui_name_clean] =
			'void switcher_' + ui_name_clean + '(Control c, int type) {\n' +
			' switch(type){\n' +
			'  case S_ACTIVE:\n' +
			on_on + '\n    break;\n' +
			'  case S_INACTIVE:\n' +
			on_off + '\n    break;\n' +
			' }\n' +
			'}\n';

		var code = '  ESPUI.switcher("' + ui_name + '", ' + switcher_state + ', &switcher_' + ui_name_clean + ', ' + ui_color + ');\n';
		return code;
	};

	Blockly.Blocks['espui_pad'] = {
			category: Facilino.locales.getKey('LANG_CATEGORY_WEB_INTERFACE'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_ESPUI'),
			helpUrl: Facilino.getHelpUrl('espui_pad'),
			tags: ['webinterface'],
			examples: ['lol.bly'],
			category_colour: Facilino.LANG_COLOUR_HTML,
			colour: Facilino.LANG_COLOUR_ESPUI,
			keys: ['LANG_ESPUI_PAD_PAD','LANG_ESPUI_NAME','LANG_ESPUI_COLOR','LANG_ESPUI_PAD_CENTER','LANG_ESPUI_PAD_TOOLTIP'],
		init: function() {
			var colour = new Blockly.FieldColour('#000000');
			colour.setColours(['#000000','#40e0d0','#50c878','#3498dc','#687894','#e4d422','#eb8921','#e32636']).setColumns(2);
			var centerOptions = [['Yes', 'false'],['No', 'true']];
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_PAD_PAD')).appendField(new Blockly.FieldTextInput(Facilino.locales.getKey('LANG_ESPUI_NAME')), 'ui_name');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_COLOR')).appendField(colour, 'ui_color');
			this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_ESPUI_PAD_CENTER')).appendField(new Blockly.FieldDropdown(centerOptions), 'pad_center');
			this.setColour(Facilino.LANG_COLOUR_ESPUI);
			this.setPreviousStatement(true, 'ui_element');
			this.setNextStatement(true, 'ui_element');
			this.setTooltip(Facilino.locales.getKey('LANG_ESPUI_PAD_TOOLTIP'));
			this.appendStatementInput('on_down_for').appendField(new Blockly.FieldImage('img/blocks/controller_up_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_up_for').appendField(new Blockly.FieldImage('img/blocks/controller_up_released.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_down_back').appendField(new Blockly.FieldImage('img/blocks/controller_down_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_up_back').appendField(new Blockly.FieldImage('img/blocks/controller_down_released.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_down_left').appendField(new Blockly.FieldImage('img/blocks/controller_right_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_up_left').appendField(new Blockly.FieldImage('img/blocks/controller_right_released.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_down_right').appendField(new Blockly.FieldImage('img/blocks/controller_left_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_up_right').appendField(new Blockly.FieldImage('img/blocks/controller_left_released.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_down_center').appendField(new Blockly.FieldImage('img/blocks/controller_center_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.appendStatementInput('on_up_center').appendField(new Blockly.FieldImage('img/blocks/controller_center_released.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
			this.lastOption=this.getFieldValue('pad_center');
		},
		onchange: function()
		{
			if (this.lastOption!==this.getFieldValue('pad_center'))
			{
				if (this.getFieldValue('pad_center')==='false')
				{
					try{
						
						this.removeInput('on_down_center');
						this.removeInput('on_up_center');
						this.appendStatementInput('on_down_center').appendField(new Blockly.FieldImage('img/blocks/controller_center_pressed.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
						this.appendStatementInput('on_up_center').appendField(new Blockly.FieldImage('img/blocks/controller_center_released.svg', 20*options.zoom, 20*options.zoom)).setCheck('code');
					}
					catch(e)
					{
					}
				}
				else
				{
					try{
						this.removeInput('on_down_center');
						this.removeInput('on_up_center');
					}
					catch(e)
					{
					}
				}
				this.lastOption=this.getFieldValue('pad_center');
			}
		}
	};

	Blockly.Arduino['espui_pad'] = function(block) {
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
			var ui_name = block.getFieldValue('ui_name');
			var color = block.getFieldValue('ui_color');
			var colorOptions = {"#000000": "COLOR_NONE", "#40e0d0": "COLOR_TURQUOISE", "#50c878": "COLOR_EMERALD", "#3498dc": "COLOR_PETERRIVER", "#687894": "COLOR_WETASPHALT", "#e4d422": "COLOR_SUNFLOWER", "#eb8921": "COLOR_CARROT", "#e32636": "COLOR_ALIZARIN"};
			var ui_color = colorOptions[color];
			var pad_center = block.getFieldValue('pad_center');
			var ui_name_clean = ui_name.replace(' ', '_');
			var on_down_for = Blockly.Arduino.statementToCode(block, 'on_down_for');
			var on_up_for = Blockly.Arduino.statementToCode(block, 'on_up_for');
			var on_down_back = Blockly.Arduino.statementToCode(block, 'on_down_back');
			var on_up_back = Blockly.Arduino.statementToCode(block, 'on_up_back');
			var on_down_left = Blockly.Arduino.statementToCode(block, 'on_down_left');
			var on_up_left = Blockly.Arduino.statementToCode(block, 'on_up_left');
			var on_down_right = Blockly.Arduino.statementToCode(block, 'on_down_right');
			var on_up_right = Blockly.Arduino.statementToCode(block, 'on_up_right');
			var on_down_center = Blockly.Arduino.statementToCode(block, 'on_down_center');
			var on_up_center = Blockly.Arduino.statementToCode(block, 'on_up_center');
			Blockly.Arduino.definitions_['define_ui_pad_' + ui_name_clean] =
			'void pad_' + ui_name_clean + '(Control c, int type) {\n' +
			' switch(type){\n' +
			'   case P_FOR_DOWN:\n' +
			on_down_for + '\n    break;\n' +
			'   case P_FOR_UP:\n' +
			on_up_for + '\n    break;\n' +

			'   case P_BACK_DOWN:\n' +
			on_down_back + '\n    break;\n' +
			'   case P_BACK_UP:\n' +
			on_up_back + '\n   break;\n' +

			'   case P_RIGHT_DOWN:\n' +
			on_down_left + '\n    break;\n' +
			'   case P_RIGHT_UP:\n' +
			on_up_left + '\n    break;\n' +

			'  case P_LEFT_DOWN:\n' +
			on_down_right + '\n    break;\n' +
			'  case P_LEFT_UP:\n' +
			on_up_right + '\n    break;\n' +

			'  case P_CENTER_DOWN:\n' +
			on_down_center + '\n    break;\n' +
			'  case P_CENTER_UP:\n' +
			on_up_center + '\n    break;\n' +
			' }\n' +
			'}\n';
			var code = '  ESPUI.pad("' + ui_name + '", ' + pad_center + ', &pad_' + ui_name_clean + ', ' + ui_color + ');\n';
			return code;
		};
		
		}
		
		Blockly.Arduino['led_strip'] = function(block) {
			  var pixel = Blockly.Arduino.valueToCode(this,'PIXEL',Blockly.Arduino.ORDER_ATOMIC) || '';
			  var input_color = this.getFieldValue('COLOR');
			  var input_pin = Blockly.Arduino.valueToCode(this,'PIN',Blockly.Arduino.ORDER_NONE) || '';
			  //Blockly.Arduino.definitions_['define_simpleexpressions_h'] = '#include <SimpleExpressions.h>';
			  Blockly.Arduino.definitions_['define_neopixel_h'] = '#include <Adafruit_NeoPixel.h>';
			  Blockly.Arduino.definitions_['define_avr_power_h'] = '#ifdef __AVR__\n  #include <avr/power.h>\n#endif';
			  Blockly.Arduino.definitions_['declare_var_led_strip_'+input_pin]='Adafruit_NeoPixel _led_strip_'+input_pin+'(7,'+input_pin+', NEO_GRB + NEO_KHZ800);\n';

			  Blockly.Arduino.setups_['setup_simpleexpressions_led_strip'+input_pin] = '_led_strip_'+input_pin+'.begin();\n  clearpixels_'+input_pin+'();\n  _led_strip_'+input_pin+'.setBrightness(map(10,0,100,0,255));\n';
			  
			  Blockly.Arduino.definitions_['define_clearpixels'+input_pin]='void clearpixels_'+input_pin+'()\n{\n  uint16_t n=_led_strip_'+input_pin+'.numPixels();\n  for(uint16_t i = 0; i < n; i++) {\n    _led_strip_'+input_pin+'.setPixelColor(i, 0);\n  }\n  delay(1);\n}\n';
			  Blockly.Arduino.definitions_['define_writepixel'+input_pin]='void writepixel_'+input_pin+'(uint16_t pixel, int r, int g, int b)\n{ _led_strip_'+input_pin+'.setPixelColor(pixel, _led_strip_'+input_pin+'.Color(r, g, b));\n  _led_strip_'+input_pin+'.show();\n}\n';
			  
			  var color_rgb=Facilino.hexToRgb(input_color);
			  var code='writepixel_'+input_pin+'('+pixel+','+color_rgb.r +','+color_rgb.g+','+color_rgb.b+');\n' ;
			  return code;
			};
			
			Blockly.Blocks['led_strip'] = {
			  category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			  subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			  helpUrl: Facilino.getHelpUrl('led_strip'),
			  tags: ['led_strip','RGB','LED'],
			  examples: [],
			  keys: ['LANG_SIMPLEEXPRESSIONS_LED_STRIP','LANG_SIMPLEEXPRESSIONS_PIN','LANG_SIMPLEEXPRESSIONS_PIXEL','LANG_SIMPLEEXPRESSIONS_LED_STRIP_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP')).appendField(new Blockly.FieldImage('img/blocks/led_strip.svg', 40*options.zoom, 20*options.zoom));
				this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_PIN')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number);
				this.appendValueInput('PIXEL').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_PIXEL')).appendField(new Blockly.FieldImage('img/blocks/led_pixel.svg', 18*options.zoom, 18*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number);
				var colour = new Blockly.FieldColour('#000000');
				colour.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				this.appendDummyInput('').appendField('Color').appendField(colour,'COLOR').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setInputsInline(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_TOOLTIP'));
			  }
			};
			
			
			Blockly.Arduino['led_strip_brightness'] = function(block) {
			  var brightness = Blockly.Arduino.valueToCode(this,'BRIGHTNESS',Blockly.Arduino.ORDER_ATOMIC) || '';
			  var input_pin = Blockly.Arduino.valueToCode(this,'PIN',Blockly.Arduino.ORDER_NONE) || '';
			  //Blockly.Arduino.definitions_['define_simpleexpressions_h'] = '#include <SimpleExpressions.h>';
			  Blockly.Arduino.definitions_['define_neopixel_h'] = '#include <Adafruit_NeoPixel.h>';
			  Blockly.Arduino.definitions_['define_avr_power_h'] = '#ifdef __AVR__\n  #include <avr/power.h>\n#endif';
			  Blockly.Arduino.definitions_['declare_var_led_strip_'+input_pin]='Adafruit_NeoPixel _led_strip_'+input_pin+'(7,'+input_pin+', NEO_GRB + NEO_KHZ800);\n';

			  Blockly.Arduino.setups_['setup_simpleexpressions_led_strip'+input_pin] = '_led_strip_'+input_pin+'.begin();\n  clearpixels_'+input_pin+'();\n  _led_strip_'+input_pin+'.setBrightness(map(10,0,100,0,255));\n';
			  
			  var code='_led_strip_'+input_pin+'.setBrightness(map('+brightness+',0,100,0,255));\n' ;
			  return code;
			};
			
			Blockly.Blocks['led_strip_brightness'] = {
			  category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			  subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			  helpUrl: Facilino.getHelpUrl('led_strip_brightness'),
			  tags: ['led_strip','RGB','LED'],
			  examples: [],
			  keys: ['LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS','LANG_SIMPLEEXPRESSIONS_PIN','LANG_SIMPLEEXPRESSIONS_BRIGHTNESS','LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS')).appendField(new Blockly.FieldImage('img/blocks/led_strip.svg', 40*options.zoom, 20*options.zoom));
				this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_PIN')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number);
				this.appendValueInput('BRIGHTNESS').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_BRIGHTNESS')+' [%]').appendField(new Blockly.FieldImage('img/blocks/sun.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setInputsInline(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS_TOOLTIP'));
			  }
			};
			
			Blockly.Arduino['led_strip_generic'] = function(block) {
			  if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			  var input_expression = Blockly.Arduino.valueToCode(this,'EXPRESSION',Blockly.Arduino.ORDER_NONE) || '';
			  var input_pin = Blockly.Arduino.valueToCode(this,'PIN',Blockly.Arduino.ORDER_NONE) || '';
			  Blockly.Arduino.definitions_['define_neopixel_h'] = '#include <Adafruit_NeoPixel.h>';
			  Blockly.Arduino.definitions_['define_avr_power_h'] = '#ifdef __AVR__\n  #include <avr/power.h>\n#endif';
			  Blockly.Arduino.definitions_['declare_var_led_strip_'+input_pin]='Adafruit_NeoPixel _led_strip_'+input_pin+'(7,'+input_pin+', NEO_GRB + NEO_KHZ800);\n';

			  Blockly.Arduino.setups_['setup_simpleexpressions_led_strip'+input_pin] = '_led_strip_'+input_pin+'.begin();\n  clearpixels_'+input_pin+'();\n  _led_strip_'+input_pin+'.setBrightness(map(10,0,100,0,255));\n';
			  
			  Blockly.Arduino.definitions_['define_clearpixels'+input_pin]='void clearpixels_'+input_pin+'()\n{\n  uint16_t n=_led_strip_'+input_pin+'.numPixels();\n  for(uint16_t i = 0; i < n; i++) {\n    _led_strip_'+input_pin+'.setPixelColor(i, 0);\n  }\n  delay(1);\n}\n';
			  Blockly.Arduino.definitions_['define_writepixels'+input_pin]=' void writepixels_'+input_pin+'(uint32_t data0,uint32_t data1,uint32_t data2,uint32_t data3,uint32_t data4,uint32_t data5,uint32_t data6){\n  _led_strip_'+input_pin+'.setPixelColor(0, _led_strip_'+input_pin+'.Color((data0>>16)&0x0000ff,(data0>>8)&0x0000ff,data0&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(1, _led_strip_'+input_pin+'.Color((data1>>16)&0x0000ff,(data1>>8)&0x0000ff,data1&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(2, _led_strip_'+input_pin+'.Color((data2>>16)&0x0000ff,(data2>>8)&0x0000ff,data2&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(3, _led_strip_'+input_pin+'.Color((data3>>16)&0x0000ff,(data3>>8)&0x0000ff,data3&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(4, _led_strip_'+input_pin+'.Color((data4>>16)&0x0000ff,(data4>>8)&0x0000ff,data4&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(5, _led_strip_'+input_pin+'.Color((data5>>16)&0x0000ff,(data5>>8)&0x0000ff,data5&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(6, _led_strip_'+input_pin+'.Color((data6>>16)&0x0000ff,(data6>>8)&0x0000ff,data6&0x0000ff));\n  _led_strip_'+input_pin+'.show();}\n';
			  
			  var code='writepixels_'+input_pin+'('+input_expression+');\n' ;
			  return code;
			};
			
			Blockly.Blocks['led_strip_generic'] = {
			  category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			  subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			  helpUrl: Facilino.getHelpUrl('led_strip'),
			  tags: ['led_strip','RGB','LED'],
			  examples: [],
			  keys: ['LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH','LANG_SIMPLEEXPRESSIONS_PIN','LANG_SIMPLEEXPRESSIONS_EXPRESSION','LANG_SIMPLEEXPRESSIONS_LED_STRIP_GENERIC_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH')).appendField(new Blockly.FieldImage('img/blocks/round_led_strip.svg', 24*options.zoom, 24*options.zoom));
				this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_PIN')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number);
				this.appendValueInput('EXPRESSION').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_EXPRESSION')).appendField(new Blockly.FieldImage('img/blocks/dot-strip.png', 24*options.zoom, 24*options.zoom)).setCheck('RGB_LEDs_EXPRESSION').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setInputsInline(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_GENERIC_TOOLTIP'));
			  }
			};
			
			Blockly.Arduino['led_strip_predefined'] = function(block) {
			  var code='';
			  var expression = Number(this.getFieldValue('EXPRESSION'));
			  var input_color = this.getFieldValue('COLOR');
			  input_color=input_color.replace('#','0x');
			  for(var i = 0; i < 7; i++)
			  {
				if (((expression >> i) & 1)===1)
				  code+=input_color+',';
				else
				  code+='0x000000'+',';
			  }
			  code=code.substr(0,code.length-1);
			  return [code,Blockly.Arduino.ORDER_ATOMIC];
			};
			
			Blockly.Blocks['led_strip_predefined'] = {
			  category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			  subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			  helpUrl: Facilino.getHelpUrl('led_strip'),
			  tags: ['led_strip','RGB','LED'],
			  examples: [],
			  keys: ['LANG_SIMPLEEXPRESSIONS_LED_STRIP_PREDEFINED_TOOLTIP'],
			  init: function() {
				var colour = new Blockly.FieldColour('#000000');
				colour.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/dot-strip.png', 24*options.zoom, 24*options.zoom)).appendField(new Blockly.FieldDropdown([['Zeros','0'],['Happy Small','12'],['Happy Full','30'],['Sad Small','96'],['Sad Full','114'],['Neutral','19'],['Circle','126'],['Center','1'],['Hook','89'],['Upsidedown Hook','53'],['Kooh','39'],['Upsidedown Kooh','75'],['Cross','109'],['Rect','108'],['Left Arrow','59'],['Right Arrow','87'],['Left Half','56'],['Right Half','70']]),'EXPRESSION').appendField(colour,'COLOR').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(false);
				this.setNextStatement(false);
				this.setOutput(true,'RGB_LEDs_EXPRESSION');
				this.setInputsInline(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_PREDEFINED_TOOLTIP'));
			  }
			};
			
			Blockly.Arduino['led_strip_customized'] = function(block) {
			  var code='';
			  for (var i=0;i<7;i++)
			  {
				var input_color = this.getFieldValue('COLOR'+i);
				code+=input_color.replace('#','0x')+',';
			  }
			  code=code.substr(0,code.length-1);
			  return [code,Blockly.Arduino.ORDER_ATOMIC];
			};
			
			Blockly.Blocks['led_strip_customized'] = {
			  category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			  subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			  helpUrl: Facilino.getHelpUrl('led_strip'),
			  tags: ['led_strip','RGB','LED'],
			  examples: [],
			  keys: ['LANG_SIMPLEEXPRESSIONS_LED_STRIP_CUSTOMIZED_TOOLTIP'],
			  init: function() {
				var colour0 = new Blockly.FieldColour('#000000');
				colour0.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				var colour1 = new Blockly.FieldColour('#000000');
				colour1.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				var colour2 = new Blockly.FieldColour('#000000');
				colour2.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				var colour3 = new Blockly.FieldColour('#000000');
				colour3.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				var colour4 = new Blockly.FieldColour('#000000');
				colour4.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				var colour5 = new Blockly.FieldColour('#000000');
				colour5.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				var colour6 = new Blockly.FieldColour('#000000');
				colour6.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				this.appendDummyInput('').appendField(' ').appendField(colour5,'COLOR5').appendField(colour6,'COLOR6');
				this.appendDummyInput('').appendField(colour4,'COLOR4').appendField(colour0,'COLOR0').appendField(colour1,'COLOR1');
				this.appendDummyInput('').appendField(' ').appendField(colour3,'COLOR3').appendField(colour2,'COLOR2');
				this.setPreviousStatement(false);
				this.setNextStatement(false);
				this.setOutput(true,'RGB_LEDs_EXPRESSION');
				this.setInputsInline(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_CUSTOMIZED_TOOLTIP'));
			  }
			};
			
			Blockly.Arduino['led_strip_stream'] = function(block) {
			  if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			  var input_expression = Blockly.Arduino.valueToCode(this,'STREAM',Blockly.Arduino.ORDER_NONE) || '';
			  var input_pin = Blockly.Arduino.valueToCode(this,'PIN',Blockly.Arduino.ORDER_NONE) || '';
			  var delay = Blockly.Arduino.valueToCode(this,'DELAY',Blockly.Arduino.ORDER_NONE) || '';
			  var background = this.getFieldValue('BACKGROUND');
			  var code='';
			  Blockly.Arduino.definitions_['define_neopixel_h'] = '#include <Adafruit_NeoPixel.h>';
			  Blockly.Arduino.definitions_['define_avr_power_h'] = '#ifdef __AVR__\n  #include <avr/power.h>\n#endif';
			  Blockly.Arduino.definitions_['declare_var_led_strip_'+input_pin]='Adafruit_NeoPixel _led_strip_'+input_pin+'(7,'+input_pin+', NEO_GRB + NEO_KHZ800);\n';

			  Blockly.Arduino.setups_['setup_simpleexpressions_led_strip'+input_pin] = '_led_strip_'+input_pin+'.begin();\n  clearpixels_'+input_pin+'();\n  _led_strip_'+input_pin+'.setBrightness(map(10,0,100,0,255));\n';
			  
			  Blockly.Arduino.definitions_['define_clearpixels'+input_pin]='void clearpixels_'+input_pin+'()\n{\n  uint16_t n=_led_strip_'+input_pin+'.numPixels();\n  for(uint16_t i = 0; i < n; i++) {\n    _led_strip_'+input_pin+'.setPixelColor(i, 0);\n  }\n  delay(1);\n}\n';
			  //.Arduino.definitions_['define_writepixels'+input_pin]=' void writepixels_2(uint32_t data0,uint32_t data1,uint32_t data2,uint32_t data3,uint32_t data4,uint32_t data5,uint32_t data6){\n  _led_strip_2.setPixelColor(0, _led_strip_2.Color((data0>>16)&0x0000ff,(data0>>8)&0x0000ff,data0&0x0000ff));\n  _led_strip_2.setPixelColor(1, _led_strip_2.Color((data1>>16)&0x0000ff,(data1>>8)&0x0000ff,data1&0x0000ff));\n  _led_strip_2.setPixelColor(2, _led_strip_2.Color((data2>>16)&0x0000ff,(data2>>8)&0x0000ff,data2&0x0000ff));\n  _led_strip_2.setPixelColor(3, _led_strip_2.Color((data3>>16)&0x0000ff,(data3>>8)&0x0000ff,data3&0x0000ff));\n  _led_strip_2.setPixelColor(4, _led_strip_2.Color((data4>>16)&0x0000ff,(data4>>8)&0x0000ff,data4&0x0000ff));\n  _led_strip_2.setPixelColor(5, _led_strip_2.Color((data5>>16)&0x0000ff,(data5>>8)&0x0000ff,data5&0x0000ff));\n  _led_strip_2.setPixelColor(6, _led_strip_2.Color((data6>>16)&0x0000ff,(data6>>8)&0x0000ff,data6&0x0000ff));\n  _led_strip_2.show();}\n';
			  Blockly.Arduino.definitions_['define_writepixels'+input_pin]=' void writepixels_'+input_pin+'(uint32_t data0,uint32_t data1,uint32_t data2,uint32_t data3,uint32_t data4,uint32_t data5,uint32_t data6){\n  _led_strip_'+input_pin+'.setPixelColor(0, _led_strip_'+input_pin+'.Color((data0>>16)&0x0000ff,(data0>>8)&0x0000ff,data0&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(1, _led_strip_'+input_pin+'.Color((data1>>16)&0x0000ff,(data1>>8)&0x0000ff,data1&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(2, _led_strip_'+input_pin+'.Color((data2>>16)&0x0000ff,(data2>>8)&0x0000ff,data2&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(3, _led_strip_'+input_pin+'.Color((data3>>16)&0x0000ff,(data3>>8)&0x0000ff,data3&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(4, _led_strip_'+input_pin+'.Color((data4>>16)&0x0000ff,(data4>>8)&0x0000ff,data4&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(5, _led_strip_'+input_pin+'.Color((data5>>16)&0x0000ff,(data5>>8)&0x0000ff,data5&0x0000ff));\n  _led_strip_'+input_pin+'.setPixelColor(6, _led_strip_'+input_pin+'.Color((data6>>16)&0x0000ff,(data6>>8)&0x0000ff,data6&0x0000ff));\n  _led_strip_'+input_pin+'.show();}\n';
			  var stream='{'+input_expression+'};';
			  var stream_name='_RGBstream'+this.NumRGBLEDStripStreams;
			  Blockly.Arduino.definitions_['declare_var'+stream_name]='const uint32_t '+stream_name+'[][7] PROGMEM ='+stream+'\n';
			  
			  if (background==='TRUE')
				{
					Blockly.Arduino.definitions_['define_prepare_RGBstream'] = JST['dyor_definitions_prepare_RGBstream']({'pin': input_pin});
					Blockly.Arduino.definitions_['declare_var_current_RGBstream_'+input_pin+'_ptr']='volatile uint32_t* _current_RGBstream_'+input_pin+'_ptr;\n';
					Blockly.Arduino.definitions_['declare_var_RGBstream_'+input_pin+'_pin']='volatile int _RGBstream_'+input_pin+'_pin=0;\n';
					Blockly.Arduino.definitions_['declare_var_RGBstream_'+input_pin+'_counter']='volatile int _RGBstream_'+input_pin+'_counter=0;\n';
					Blockly.Arduino.definitions_['declare_var_RGBstream_'+input_pin+'_length']='volatile int _RGBstream_'+input_pin+'_length=0;\n';
					Blockly.Arduino.definitions_['declare_var_RGBstream_'+input_pin+'_status']='volatile uint8_t _RGBstream_'+input_pin+'_status=-1;\n';
					Blockly.Arduino.definitions_['declare_var_RGBstream_'+input_pin+'_duration']='volatile int _RGBstream_'+input_pin+'_duration=0;\n';
					Blockly.Arduino.definitions_['declare_var_RGBstream_'+input_pin+'_next_time']='volatile unsigned long _RGBstream_'+input_pin+'_next_time=0;\n';
					
					Blockly.Arduino.definitions_['define_play_RGBstream_interrupt'] = JST['dyor_definitions_play_RGBstream_interrupt']({'pin': input_pin});
					Blockly.Arduino.play_RGBstream = 'playRGBStreamInterrupt_'+input_pin+'();\n';
					//Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER1_COMPA_vect){\n _currentTime=millis(); \n ';
					/*Blockly.Arduino.definitions_['define_backgroundtask'] = 'SIGNAL (TIMER0_COMPA_vect){\n ';
					Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
					Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_melody;	
					Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_led_matrix_stream;	
					Blockly.Arduino.definitions_['define_backgroundtask'] += Blockly.Arduino.play_RGBstream;					
					//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
					Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
					//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
					Blockly.Arduino.definitions_['define_backgroundtask'] += '}\n';*/
					
					var Blocks=Blockly.getMainWorkspace().getAllBlocks();
					var block_found = Blocks.find(function (block){return (block.type=='dyor_task');});
					if (block_found===undefined)
					{
						Blockly.Arduino.definitions_['define_task'] = 'SIGNAL (TIMER0_COMPA_vect){\n';
						Blockly.Arduino.definitions_['declare_var_currentTime']='unsigned long _currentTime;\n';
						Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_melody;	
						Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_led_matrix_stream;	
						Blockly.Arduino.definitions_['define_task'] += Blockly.Arduino.play_RGBstream;				
						//Check if other "tasks must be executed too such as LED Matrix, servos, etc... whatever we might need in the future...
						Blockly.Arduino.setups_['setup_int0_enable']='OCR0A=0xAF;\n  TIMSK0 |= _BV(OCIE0A);\n';
						//Blockly.Arduino.setups_['setup_int1_enable']='OCR1A = 0x1F40;\n  TCCR1B |= (1 << WGM12);\n  TCCR1B |= (1 << CS11);\n  TIMSK1 |= (1 << OCIE1A);\n';
						Blockly.Arduino.definitions_['define_task'] += '}\n';
					}
					
					code += JST['dyor_prepare_RGBstream']({
							'pin': input_pin,
							'stream': stream_name,
							'duration' : delay
						});
				}
				else
				{
					Blockly.Arduino.definitions_['define_play_RGBstream_'+input_pin] = JST['dyor_definitions_play_RGBstream']({'pin': input_pin});
					Blockly.Arduino.play_RGBstream='';
					code += JST['dyor_play_RGBstream']({
							'pin': input_pin,
							'stream': stream_name,
							'duration' : delay
						});
				}
			  
//var code='writepixels_'+input_pin+'('+input_expression+');\n' ;
			  return code;
			};
			
			Blockly.Blocks['led_strip_stream'] = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
            helpUrl: Facilino.getHelpUrl('led_strip_stream'),
			tags: ['led_strip','RGB','LED'],
			examples: [],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			keys: ['LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH','LANG_SIMPLEEXPRESSIONS_PIN','LANG_SIMPLEEXPRESSIONS_EXPRESSION','LANG_SIMPLEEXPRESSIONS_DELAY_WAIT','LANG_SIMPLEEXPRESSIONS_WAIT','LANG_SIMPLEEXPRESSIONS_LED_STRIP_STREAM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH')).appendField(new Blockly.FieldImage('img/blocks/round_led_strip.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_PIN')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number);
				this.appendValueInput('STREAM').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_EXPRESSION')).appendField(new Blockly.FieldImage('img/blocks/dot-strip_stream.png', 48*options.zoom, 24*options.zoom)).setCheck('RGB_LEDs_EXPRESSION').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('DELAY').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_DELAY_WAIT')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_WAIT')).appendField(new Blockly.FieldCheckbox('FALSE'),'BACKGROUND').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				Facilino.NumRGBLEDStripStreams=Facilino.NumRGBLEDStripStreams+1;
				this.NumRGBLEDStripStreams=Facilino.NumRGBLEDStripStreams;
				//this.setOutput(true,'Expression');
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_LED_STRIP_STREAM_TOOLTIP'));
				}
			};
			
			Blockly.Arduino.led_strip_sequentially = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = '';
		var i=1;
		for (i=1;i<=this.itemCount_;i++)
		{
			var expr= Blockly.Arduino.valueToCode(this, 'DATA'+i, Blockly.Arduino.ORDER_ATOMIC);
			code+='{'+expr+'},';
		}
		code=code.substr(0,code.length-1);
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    };

    Blockly.Blocks.led_strip_sequentially = {
            category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATERGORY_WS2812'),
            tags: ['led_strip','RGB','LED'],
            helpUrl: Facilino.getHelpUrl('led_strip_sequentially'),
			examples: [],
			category_colour: Facilino.LANG_COLOUR_SCREEN,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			keys: ['LANG_LED_STRIP_SEQUENTIALLY_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/dot-strip_stream.png", 48*options.zoom, 24*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setMutator(new Blockly.Mutator(['led_strip_sequentially_item']));
				this.itemCount_ = 0;
				this.setInputsInline(true);
				this.setOutput(true,'RGB_LEDs_EXPRESSION');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_STRIP_SEQUENTIALLY_TOOLTIP'));
            },
			mutationToDom: function() {
                if (!this.itemCount_ ) {
                    return null;
                }
                var container = document.createElement('mutation');
                if (this.itemCount_) {
                    container.setAttribute('item', this.itemCount_);
                }
                return container;
            },
            domToMutation: function(xmlElement) {
                this.itemCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 1; x <= this.itemCount_; x++) {
					this.appendValueInput('DATA' + x).setCheck('DATA').setCheck('RGB_LEDs_EXPRESSION').setAlign(Blockly.ALIGN_RIGHT);
					this.setInputsInline(true);
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('led_strip_sequentially_mutator');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 1; x <= this.itemCount_; x++) {
                    var itemBlock = workspace.newBlock('led_strip_sequentially_item');
                    itemBlock.initSvg();
                    connection.connect(itemBlock.previousConnection);
                    connection = itemBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the items input blocks and remove the inputs.
                for (var x = this.itemCount_; x > 0; x--) {
                    this.removeInput('DATA' + x);
                }
                this.itemCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'led_strip_sequentially_item':
                            this.itemCount_++;
							this.setInputsInline(true);
							var dataInput = this.appendValueInput('DATA' + this.itemCount_).setCheck('RGB_LEDs_EXPRESSION').setAlign(Blockly.ALIGN_RIGHT);
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                dataInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            if (clauseBlock.statementConnection_) {
                                itemInput.connection.connect(clauseBlock.statementConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 1;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'led_strip_sequentially_item':
                            var inputData = this.getInput('DATA' + x);
                            clauseBlock.valueConnection_ =
                                inputData && inputData.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            }
        };
		
		Blockly.Blocks.led_strip_sequentially_mutator = {
            // App
			colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			keys: ['LANG_LED_STRIP_SEQUENTIALLY_MUTATOR_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
                this.appendDummyInput().appendField(new Blockly.FieldImage("img/blocks/dot-strip_stream.png", 48*options.zoom, 48*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('led_strip_item');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_STRIP_SEQUENTIALLY_MUTATOR_TOOLTIP'));
                this.contextMenu = false;
            }
        };
    
		Blockly.Blocks.led_strip_sequentially_item = {
			colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			keys: ['LANG_LED_STRIP_SEQUENTIALLY_ITEM_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
                this.appendDummyInput().appendField(new Blockly.FieldImage("img/blocks/dot-strip.png", 24*options.zoom, 24*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
                this.setPreviousStatement(true,'led_strip_item');
                this.setNextStatement(true,'led_strip_item');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_STRIP_SEQUENTIALLY_ITEM_TOOLTIP'));
        this.contextMenu = false;
            }
        };
		
		Blockly.Arduino.oled_128x32_set_text = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var text= Blockly.Arduino.valueToCode(this,'TEXT', Blockly.Arduino.ORDER_ATOMIC);
			var x= Blockly.Arduino.valueToCode(this,'X', Blockly.Arduino.ORDER_ATOMIC);
			var y= Blockly.Arduino.valueToCode(this,'Y', Blockly.Arduino.ORDER_ATOMIC);
			var s= this.getFieldValue('SIZE');
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.definitions_['define_set_text']='void setText(String msg, int16_t x, int16_t y, uint8_t s){\n  int16_t x1;\n  int16_t y1;\n  int16_t w;\n  int16_t h;\n  oled_display.setTextSize(s);\n  oled_display.getTextBounds(msg.c_str(),x,y,&x1,&y1,&w,&h);\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.setCursor(x,y);\n  oled_display.print(msg);\n  oled_display.display();\n  delay(1);\n}\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			code='setText('+text+','+x+','+y+','+s+');\n';
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_text = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_text'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_TEXT','LANG_OLED_SET_TEXT_TOOLTIP'],
			  init: function() {
				this.appendValueInput('TEXT').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_TEXT')).setCheck(String).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('X').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			  this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_OLED_SET_TEXT_SIZE')).appendField(new Blockly.FieldDropdown([['1','1'],['2','2'],['3','3']]),'SIZE').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setInputsInline(false);
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_TEXT_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_set_image = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var image= Blockly.Arduino.valueToCode(this,'IMAGE', Blockly.Arduino.ORDER_ATOMIC);
			var x= Blockly.Arduino.valueToCode(this,'X', Blockly.Arduino.ORDER_ATOMIC);
			var y= Blockly.Arduino.valueToCode(this,'Y', Blockly.Arduino.ORDER_ATOMIC);
			var block = this.getInputTargetBlock('IMAGE');
			if (block!==null)
			{
				if (block.type==='oled_128x32_image_browse')
				{
					
					var image_data = JSON.parse(block.data);
					if (image_data!==null)
					{
						var image_name = image_data.name;
						var image_width = image_data.width;
						var image_height = image_data.height;
					}
					else
					{
						var image_name = '';
						var image_width=0;
						var image_height=0;
					}
					//console.log(image_width);
					//console.log(image_height);
				}
				else if (block.type==='oled_128x32_main_image')
				{
					var image_name = this.getInputTargetBlock('IMAGE').getFieldValue('ICON').toLowerCase();
					var image_width = 96;
					var image_height = 16;
				}
				else if (block.type==='oled_128x32_small_icon')
				{
					var image_name = this.getInputTargetBlock('IMAGE').getFieldValue('ICON').toLowerCase();
					var image_width = 8;
					var image_height = 8;
				}
				else if (block.type==='oled_128x32_large_icon')
				{
					var image_name = this.getInputTargetBlock('IMAGE').getFieldValue('ICON').toLowerCase();
					var image_width = 16;
					var image_height = 16
				}
			}
			else
				var image_name='';
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['declare_var_oled_display_'+image_name]='const unsigned char _oled_display_'+image_name+'[] PROGMEM = {'+image+'};\n';
			if (block!==null)
			{
				if (block.type==='oled_128x32_image_empty')
				{
					Blockly.Arduino.definitions_['define_clear_oled']='void clearOLED(int16_t x, int16_t y, int16_t w, int16_t h){\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					code='clearOLED('+x+','+y+',128,32);\n';
				}
				else
				{
					Blockly.Arduino.definitions_['define_set_image']='void setImage(const unsigned char *icon, int16_t x, int16_t y, int16_t w, int16_t h){\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.drawBitmap(x,y,icon,w,h,WHITE,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					code='setImage(_oled_display_'+image_name+','+x+','+y+','+image_width+','+image_height+');\n';
				}
			}
			return code;
		};
		
		Blockly.Blocks.oled_128x32_set_image = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_image'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_IMAGE','LANG_OLED_SET_COORDINATE_X','LANG_OLED_SET_COORDINATE_Y','LANG_OLED_SET_IMAGE_TOOLTIP'],
			  init: function() {
				this.appendValueInput('IMAGE').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_IMAGE')).setCheck(['oled_128x32_small_icon','oled_128x32_large_icon','oled_central_image','oled_custom_image','oled_empty_image']).appendField(new Blockly.FieldImage("img/blocks/oled_image.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('X').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_IMAGE_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_clear = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var x= Blockly.Arduino.valueToCode(this,'X', Blockly.Arduino.ORDER_ATOMIC);
			var y= Blockly.Arduino.valueToCode(this,'Y', Blockly.Arduino.ORDER_ATOMIC);
			var w= Blockly.Arduino.valueToCode(this,'W', Blockly.Arduino.ORDER_ATOMIC);
			var h= Blockly.Arduino.valueToCode(this,'H', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['define_clear_oled']='void clearOLED(int16_t x, int16_t y, int16_t w, int16_t h){\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
			code='clearOLED('+x+','+y+','+w+','+h+');\n';
			return code;
		};
		
		Blockly.Blocks.oled_128x32_clear = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_clear'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_CLEAR','LANG_OLED_SET_COORDINATE_X','LANG_OLED_SET_COORDINATE_Y','LANG_OLED_SET_COORDINATE_WIDTH','LANG_OLED_SET_COORDINATE_HEIGHT','LANG_OLED_CLEAR_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_CLEAR'))
				this.appendValueInput('X').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('W').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_WIDTH')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('H').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_HEIGHT')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setInputsInline(true);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_CLEAR_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_set_header_text = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var text= Blockly.Arduino.valueToCode(this,'TEXT', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.definitions_['define_set_header_text']='void setHeaderText(String msg){\n  int16_t x;\n  int16_t y;\n  int16_t w;\n  int16_t h;\n  oled_display.setTextSize(1);\n  oled_display.getTextBounds(msg.c_str(),0,0,&x,&y,&w,&h);\n  if (w>110){\n    String msg2;\n    uint8_t i=0;\n    for (i=0;i<=(msg.length()-18);i++)\n    {\n      msg2=msg.substring(i,18+i);\n      oled_display.fillRect(8,0,112,8,BLACK);\n      oled_display.setCursor(8,0);\n      oled_display.print(msg2);\n      oled_display.display();\n      delay(100);\n      if (i==0)\n        delay(300);\n    }\n  }\n  else\n  {\n    oled_display.fillRect(8,0,112,8,BLACK);\n    x=(128-w)/2;\n    oled_display.setCursor(x,0);\n    oled_display.print(msg);\n    oled_display.display();\n    delay(1);\n  }\n}\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			code='setHeaderText('+text+');\n';
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_header_text = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_header_text'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_HEADER_TEXT','LANG_OLED_SET_HEADER_TEXT_TOOLTIP'],
			  init: function() {
				this.appendValueInput('TEXT').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_HEADER_TEXT')).setCheck(String).appendField(new Blockly.FieldImage("img/blocks/oled_header_text.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_HEADER_TEXT_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_set_main_text = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var text= Blockly.Arduino.valueToCode(this,'TEXT', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.definitions_['define_set_main_text']='void setMainText(String msg){\n  oled_display.setTextSize(2);\n  int16_t x;\n  int16_t y;\n  int16_t w;\n  int16_t h;\n  oled_display.fillRect(16,8,96,16,BLACK);\n  oled_display.getTextBounds(msg.c_str(),0,0,&x,&y,&w,&h);\n  if (w>94)\n  {\n    msg=msg.substring(0,8);\n    oled_display.getTextBounds(msg.c_str(),0,0,&x,&y,&w,&h);\n  }\n  x=(128-w)/2;\n  oled_display.setCursor(x,9);\n  oled_display.print(msg);\n  oled_display.display();\n  delay(1);\n}\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			code='setMainText('+text+');\n';
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_main_text = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_main_text'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_MAIN_TEXT','LANG_OLED_SET_MAIN_TEXT_TOOLTIP'],
			  init: function() {
				this.appendValueInput('TEXT').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_MAIN_TEXT')).appendField(new Blockly.FieldImage("img/blocks/oled_main_text.svg", 40*options.zoom, 20*options.zoom, "*")).setCheck(String).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_MAIN_TEXT_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_set_footer_text = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var text= Blockly.Arduino.valueToCode(this,'TEXT', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.definitions_['define_set_footer_text']='void setFooterText(String msg){\n  int16_t x;\n  int16_t y;\n  int16_t w;\n  int16_t h;\n  int16_t pos=8;\n  oled_display.setTextSize(1);\n  oled_display.getTextBounds(msg.c_str(),0,0,&x,&y,&w,&h);\n  if (w>110)\n  {\n    String msg2;\n    uint8_t i=0;\n    for (i=0;i<=(msg.length()-18);i++)\n    {\n      msg2=msg.substring(i,18+i);\n      oled_display.fillRect(8,24,112,8,BLACK);\n      oled_display.setCursor(8,24);\n      oled_display.print(msg2);\n      oled_display.display();\n      delay(100);\n      if (i==0)\n        delay(300);\n    }\n  }\n  else\n  {\n    x=(128-w)/2;\n    oled_display.fillRect(8,24,112,8,BLACK);\n    oled_display.setCursor(x,24);\n    oled_display.print(msg);\n    oled_display.display();\n    delay(1);  }\n}\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			code='setFooterText('+text+');\n';
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_footer_text = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_footer_text'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_FOOTER_TEXT','LANG_OLED_SET_FOOTER_TEXT_TOOLTIP'],
			  init: function() {
				this.appendValueInput('TEXT').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_FOOTER_TEXT')).setCheck(String).appendField(new Blockly.FieldImage("img/blocks/oled_footer_text.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_FOOTER_TEXT_TOOLTIP'));
			  }
		};
		
		/*Blockly.Arduino.oled_128x32_set_char = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var inp= Blockly.Arduino.valueToCode(this,'CHAR', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			var pos=this.getFieldValue('POS');
			if (pos==='TOP_LEFT')
			{
				Blockly.Arduino.definitions_['define_set_top_left_char']='void setTopLeftChar(char c){\n  oled_display.setTextSize(1);\n  oled_display.fillRect(0,0,8,8,BLACK);\n  oled_display.setCursor(1,0);\n  oled_display.print(c);\n  oled_display.display();\n  delay(1);\n}\n';
				code='setTopLeftChar('+inp+');\n';
			}
			else if (pos==='TOP_RIGHT')
			{
				Blockly.Arduino.definitions_['define_set_top_right_char']='void setTopRightChar(char c){\n  oled_display.setTextSize(1);\n  oled_display.fillRect(120,0,8,8,BLACK);\n  oled_display.setCursor(121,0);\n  oled_display.print(c);\n  oled_display.display();\n  delay(1);\n}\n';
				code='setTopRightChar('+inp+');\n';
			}
			else if (pos==='BOTTOM_LEFT')
			{
				Blockly.Arduino.definitions_['define_set_bottom_left_char']='void setBottomLeftChar(char c){\n  oled_display.setTextSize(1);\n  oled_display.fillRect(0,24,8,8,BLACK);\n  oled_display.setCursor(1,24);\n  oled_display.print(c);\n  oled_display.display();\n  delay(1);\n}\n';
				code='setBottomLeftChar('+inp+');\n';
			}
			else if (pos==='BOTTOM_RIGHT')
			{
				Blockly.Arduino.definitions_['define_set_bottom_right_char']='void setBottomRightChar(char c){\n  oled_display.setTextSize(1);\n  oled_display.fillRect(120,24,8,8,BLACK);\n  oled_display.setCursor(121,24);\n  oled_display.print(c);\n  oled_display.display();\n  delay(1);\n}\n';
				code='setBottomRightChar('+inp+');\n';
			}
			else if (pos==='LEFT')
			{
				Blockly.Arduino.definitions_['define_set_left_char']='void setLeftChar(char c){\n  oled_display.setTextSize(2);\n  oled_display.fillRect(0,8,16,16,BLACK);\n  oled_display.setCursor(1,9);\n  oled_display.print(c);\n  oled_display.display();\n  delay(1);\n}\n';
				code='setLeftChar('+inp+');\n';
			}
			else if (pos==='RIGHT')
			{
				Blockly.Arduino.definitions_['define_set_ight_char']='void setRightChar(char c){\n  oled_display.setTextSize(2);\n  oled_display.fillRect(112,8,16,16,BLACK);\n  oled_display.setCursor(115,9);\n  oled_display.print(c);\n  oled_display.display();\n  delay(1);\n}\n';
				code='setRightChar('+inp+');\n';
			}
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_char = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_char'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_CHAR','LANG_OLED_SET_CHAR_TOOLTIP'],
			  init: function() {
				this.appendValueInput('CHAR').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_CHAR')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_TOP_LEFT'),'TOP_LEFT'],
				[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_TOP_RIGHT'),'TOP_RIGHT'],
				[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_BOTTOM_LEFT'),'BOTTOM_LEFT'],
				[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_BOTTOM_RIGHT'),'BOTTOM_RIGHT'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_LEFT'),'LEFT'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_RIGHT'),'RIGHT']]),'POS').setCheck(Number).appendField(new Blockly.FieldImage("img/blocks/oled_char.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_CHAR_TOOLTIP'));
			  }
		};*/
		
		Blockly.Arduino.oled_128x32_set_small_icon = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var image= Blockly.Arduino.valueToCode(this,'IMAGE', Blockly.Arduino.ORDER_ATOMIC);
			var block = this.getInputTargetBlock('IMAGE');
			if (block!==null)
			{
				if (block.type==='oled_128x32_small_icon')
					var image_name = this.getInputTargetBlock('IMAGE').getFieldValue('ICON').toLowerCase();
				else if (block.type==='oled_128x32_image_browse')
				{
					var image_name = 'custom'+block.NumImages;
					var image_data = JSON.parse(block.data);
					if ((image_data.width!==8)&&(image_data.height!==8))
						this.setWarningText('Incorrect image size');
					else
						this.setWarningText(null);
				}
			}
			else
				var image_name='';
			var icon = this.getFieldValue('ICON');
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['declare_var_oled_display_'+image_name]='const unsigned char _oled_display_'+image_name+'[] PROGMEM = {'+image+'};\n';	
			if (block!==null)
			{
				if(block.type==='oled_128x32_image_empty')
				{
					Blockly.Arduino.definitions_['define_clear_oled']='void clearOLED(int16_t x, int16_t y, int16_t w, int16_t h){\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					if (icon==='TOP_LEFT')
						code='clearOLED(0,0,8,8);\n';
					else if (icon==='TOP_RIGHT')
						code='clearOLED(120,0,8,8);\n';
					else if (icon==='BOTTOM_LEFT')
						code='clearOLED(0,24,8,8);\n';
					else if (icon==='BOTTOM_RIGHT')
						code='clearOLED(120,24,8,8);\n';
				}
				else
				{
					if (icon==='TOP_LEFT')
					{
					  Blockly.Arduino.definitions_['define_set_top_left_icon']='void setTopLeftIcon(const unsigned char *icon){\n  oled_display.fillRect(0,0,8,8,BLACK);\n  oled_display.drawBitmap(0,0,icon,8,8,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
					  code='setTopLeftIcon(_oled_display_'+image_name+');\n';
					}
					else if (icon==='TOP_RIGHT')
					{
						Blockly.Arduino.definitions_['define_set_top_right_icon']='void setTopRightIcon(const unsigned char *icon){\n  oled_display.fillRect(120,0,8,8,BLACK);\n  oled_display.drawBitmap(120,0,icon,8,8,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
						code='setTopRightIcon(_oled_display_'+image_name+');\n';
					}
					else if (icon==='BOTTOM_LEFT')
					{
						Blockly.Arduino.definitions_['define_set_bottom_left_icon']='void setBottomLeftIcon(const unsigned char *icon){\n  oled_display.fillRect(0,24,8,8,BLACK);\n  oled_display.drawBitmap(0,24,icon,8,8,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
						code='setBottomLeftIcon(_oled_display_'+image_name+');\n';
					}
					else if (icon==='BOTTOM_RIGHT')
					{
						Blockly.Arduino.definitions_['define_set_bottom_right_icon']='void setBottomRightIcon(const unsigned char *icon){\n  oled_display.fillRect(120,24,8,8,BLACK);\n  oled_display.drawBitmap(120,24,icon,8,8,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
						code='setBottomRightIcon(_oled_display_'+image_name+');\n';
					}
				}
			}
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_small_icon = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_small_icon'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_SMALL_ICON','LANG_OLED_SMALL_ICON_TOP_LEFT','LANG_OLED_SMALL_ICON_TOP_RIGHT','LANG_OLED_SMALL_ICON_BOTTOM_LEFT','LANG_OLED_SMALL_ICON_BOTTOM_RIGHT','LANG_OLED_SET_SMALL_ICON_TOOLTIP'],
			  init: function() {
				this.appendValueInput('IMAGE').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_SMALL_ICON')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_TOP_LEFT'),'TOP_LEFT'],
				[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_TOP_RIGHT'),'TOP_RIGHT'],
				[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_BOTTOM_LEFT'),'BOTTOM_LEFT'],
				[Facilino.locales.getKey('LANG_OLED_SMALL_ICON_BOTTOM_RIGHT'),'BOTTOM_RIGHT']]),'ICON').setCheck(['oled_small_icon','oled_custom_image','oled_empty_image']).appendField(new Blockly.FieldImage("img/blocks/oled_small_icons.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_SMALL_ICON_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_set_large_icon = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var image= Blockly.Arduino.valueToCode(this,'IMAGE', Blockly.Arduino.ORDER_ATOMIC);
			var block = this.getInputTargetBlock('IMAGE');
			if (block!==null)
			{
				if (block.type==='oled_128x32_large_icon')
					var image_name = this.getInputTargetBlock('IMAGE').getFieldValue('ICON').toLowerCase();
				else if (block.type==='oled_128x32_image_browse')
				{
					var image_name = 'custom'+block.NumImages;
					var image_data = JSON.parse(block.data);
					if ((image_data.width!==16)&&(image_data.height!==16))
						this.setWarningText('Incorrect image size');
					else
						this.setWarningText(null);
				}
			}
			else
				var image_name='';
			var icon = this.getFieldValue('ICON');
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['declare_var_oled_display_'+image_name]='const unsigned char _oled_display_'+image_name+'[] PROGMEM = {'+image+'};\n';	
			if (block!==null)
			{
				if (block.type==='oled_128x32_image_empty')
				{
					Blockly.Arduino.definitions_['define_clear_oled']='void clearOLED(int16_t x, int16_t y, int16_t w, int16_t h){\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					if (icon==='LEFT')
						code='clearOLED(0,8,16,16);\n';
					else if (icon==='RIGHT')
						code='clearOLED(112,8,16,16);\n';
				}
				else
				{
					if (icon==='LEFT')
					{
					  Blockly.Arduino.definitions_['define_set_left_icon']='void setLeftIcon(const unsigned char *icon){\n  oled_display.fillRect(0,8,16,16,BLACK);\n  oled_display.drawBitmap(0,8,icon,16,16,WHITE,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					  code='setLeftIcon(_oled_display_'+image_name+');\n';
					}
					else if (icon==='RIGHT')
					{
						Blockly.Arduino.definitions_['define_set_right_icon']='void setRightIcon(const unsigned char *icon){\n  oled_display.fillRect(112,8,16,16,BLACK);\n  oled_display.drawBitmap(112,8,icon,16,16,WHITE,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
						code='setRightIcon(_oled_display_'+image_name+');\n';
					}
				}
			}
			return code;
		};
		
			Blockly.Blocks.oled_128x32_set_large_icon = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_large_icon'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_LARGE_ICON','LANG_OLED_LARGE_ICON_LEFT','LANG_OLED_LARGE_ICON_RIGHT','LANG_OLED_SET_LARGE_ICON_TOOLTIP'],
			  init: function() {
				this.appendValueInput('IMAGE').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_LARGE_ICON')).appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_LEFT'),'LEFT'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_RIGHT'),'RIGHT']]),'ICON').setCheck(['oled_large_icon','oled_custom_image','oled_empty_image']).appendField(new Blockly.FieldImage("img/blocks/oled_large_icons.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_LARGE_ICON_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_set_main_image = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var image= Blockly.Arduino.valueToCode(this,'IMAGE', Blockly.Arduino.ORDER_ATOMIC);
			var block = this.getInputTargetBlock('IMAGE');
			if (block!==null)
			{
				if (block.type==='oled_128x32_main_image')
					var image_name = this.getInputTargetBlock('IMAGE').getFieldValue('ICON').toLowerCase();
				else if (block.type==='oled_128x32_image_browse')
				{
					var image_name = 'custom'+block.NumImages;
					var image_data = JSON.parse(block.data);
					if ((image_data.width!==96)&&(image_data.height!==16))
						this.setWarningText('Incorrect image size');
					else
						this.setWarningText(null);
				}
			}
			else
				var image_name='';
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['declare_var_oled_display_'+image_name]='const unsigned char _oled_display_'+image_name+'[] PROGMEM = {'+image+'};\n';
			if (block!==null)
			{
				if (block.type==='oled_128x32_image_empty')
				{
					Blockly.Arduino.definitions_['define_clear_oled']='void clearOLED(int16_t x, int16_t y, int16_t w, int16_t h){\n  oled_display.fillRect(x,y,w,h,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					code='clearOLED(16,8,96,16);\n';
				}
				else
				{
					Blockly.Arduino.definitions_['define_set_main_image']='void setMainImage(const unsigned char *icon){\n  oled_display.fillRect(16,8,96,16,BLACK);\n  oled_display.drawBitmap(16,8,icon,96,16,WHITE,BLACK);\n  oled_display.display();\n  delay(1);\n}\n';
					code='setMainImage(_oled_display_'+image_name+');\n';
				}
			}
			return code;
		};
		
		
		
		Blockly.Blocks.oled_128x32_set_main_image = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED_LAYOUT'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_set_main_image'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SET_MAIN_IMAGE','LANG_OLED_SET_MAIN_IMAGE_TOOLTIP'],
			  init: function() {
				this.appendValueInput('IMAGE').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SET_MAIN_IMAGE')).setCheck(['oled_central_image','oled_custom_image','oled_empty_image']).appendField(new Blockly.FieldImage("img/blocks/oled_main_image.svg", 40*options.zoom, 20*options.zoom, "*")).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SET_MAIN_IMAGE_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_small_icon = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
			var str = this.getFieldValue('ICON');
			var data='';
			if (str==='NO_CONN')
				data='0100000000000000';
			else if (str==='POOR_CONN')
				data='0504040000000000';
			else if (str==='GOOD_CONN')
				data='1514141010000000';
			else if (str==='EXCEL_CONN')
				data='5554545050404000';
			else if (str==='NO_BATT')
				data='3f21212121212121';
			else if (str==='LOW_BATT')
				data='3f212d2121212121';
			else if (str==='MEDIUM_BATT')
				data='3f212d212d212121';
			else if (str==='FULL_BATT')
				data='3f212d212d212d21';
			else if (str==='CORRECT')
				data='00040a1120408000';
			else if (str==='WRONG')
				data='0042241818244200';
			else if (str==='ARROW_UP')
				data='383838fe7c381000';
			else if (str==='ARROW_DOWN')
				data='10387cfe38383800';
			else if (str==='ARROW_RIGHT')
				data='10307efe7e301000';
			else if (str==='ARROW_LEFT')
				data='1018fcfefc181000';
			else if (str==='TRIAG_UP')
				data='fefe7c7c38381000';
			else if (str==='TRIAG_DOWN')
				data='1038387c7cfefe00';
			else if (str==='TRIAG_RIGHT')
				data='061e7efe7e1e0600';
			else if (str==='TRIAG_LEFT')
				data='c0f0fcfefcf0c000';
			else if (str==='SMILE')
				data='7c92aa82aa827c00';
			else if (str==='DIAMOND')
				data='183c7effff7e3c18';
			else if (str==='CROSS')
				data='3c185aff5a183c18';
			else if (str==='SPADE')
				data='38107cfe7c381000';
			else if (str==='CIRCLE_FULL')
				data='3c7effffffff7e3c';
			else if (str==='CIRCLE')
				data='3c4281818181423c';
			else if (str==='MALE')
				data='0c12129ca0c0f000';
			else if (str==='FEMALE')
				data='081c08081c22221c';
			else if (str==='NOTE')
				data='060e0c0808281800';
			else if (str==='NOTES')
				data='066eecc88898f000';
			else if (str==='SNOW')
				data='105438ee38541000';
			else if (str==='ARROW_UP_DOWN')
				data='1038541054381000';
			else if (str==='ARROW_LEFT_RIGHT')
				data='002844fe44280000';
			//var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
			var row1,row2,row3,row4,row5,row6,row7,row8;
			var col1,col2,col3,col4,col5,col6,col7,col8;
			var code='';
			row1=parseInt(data.substr(0,2) || '00',16);
			row2=parseInt(data.substr(2,2) || '00',16);
			row3=parseInt(data.substr(4,2) || '00',16);
			row4=parseInt(data.substr(6,2) || '00',16);
			row5=parseInt(data.substr(8,2) || '00',16);
			row6=parseInt(data.substr(10,2) || '00',16);
			row7=parseInt(data.substr(12,2) || '00',16);
			row8=parseInt(data.substr(14,2) || '00',16);
			col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
			col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
			col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
			col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
			col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
			col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
			col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
			col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
			col1 = Facilino.pad(col1.toString(16),0,2);
			col2 = Facilino.pad(col2.toString(16),0,2);
			col3 = Facilino.pad(col3.toString(16),0,2);
			col4 = Facilino.pad(col4.toString(16),0,2);
			col5 = Facilino.pad(col5.toString(16),0,2);
			col6 = Facilino.pad(col6.toString(16),0,2);
			col7 = Facilino.pad(col7.toString(16),0,2);
			col8 = Facilino.pad(col8.toString(16),0,2);
			data = col1+col2+col3+col4+col5+col6+col7+col8;
			row1=parseInt(data.substr(0,2) || '00',16);
			row2=parseInt(data.substr(2,2) || '00',16);
			row3=parseInt(data.substr(4,2) || '00',16);
			row4=parseInt(data.substr(6,2) || '00',16);
			row5=parseInt(data.substr(8,2) || '00',16);
			row6=parseInt(data.substr(10,2) || '00',16);
			row7=parseInt(data.substr(12,2) || '00',16);
			row8=parseInt(data.substr(14,2) || '00',16);
			code = row1 + ',' + row2 + ','+ row3 + ','+ row4 + ','+ row5 + ','+ row6 + ','+ row7 + ','+ row8;
			var row = code.split(',');
			var col = [];
			col[0] = ((row[0]%2)<1? 0 : 128) + ((row[1]%2)<1? 0 : 64) + ((row[2]%2)<1? 0 : 32) + ((row[3]%2)<1? 0 : 16) + ((row[4]%2)<1? 0 : 8) + ((row[5]%2)<1? 0 : 4) + ((row[6]%2)<1? 0 : 2) + ((row[7]%2)<1? 0 : 1);
			col[1] = ((row[0]%4)<2? 0 : 128) + ((row[1]%4)<2? 0 : 64) + ((row[2]%4)<2? 0 : 32) + ((row[3]%4)<2? 0 : 16) + ((row[4]%4)<2? 0 : 8) + ((row[5]%4)<2? 0 : 4) + ((row[6]%4)<2? 0 : 2) + ((row[7]%4)<2? 0 : 1);
			col[2] = ((row[0]%8)<4? 0 : 128) + ((row[1]%8)<4? 0 : 64) + ((row[2]%8)<4? 0 : 32) + ((row[3]%8)<4? 0 : 16) + ((row[4]%8)<4? 0 : 8) + ((row[5]%8)<4? 0 : 4) + ((row[6]%8)<4? 0 : 2) + ((row[7]%8)<4? 0 : 1);
			col[3] = ((row[0]%16)<8? 0 : 128) + ((row[1]%16)<8? 0 : 64) + ((row[2]%16)<8? 0 : 32) + ((row[3]%16)<8? 0 : 16) + ((row[4]%16)<8? 0 : 8) + ((row[5]%16)<8? 0 : 4) + ((row[6]%16)<8? 0 : 2) + ((row[7]%16)<8? 0 : 1);
			col[4] = ((row[0]%32)<16? 0 : 128) + ((row[1]%32)<16? 0 : 64) + ((row[2]%32)<16? 0 : 32) + ((row[3]%32)<16? 0 : 16) + ((row[4]%32)<16? 0 : 8) + ((row[5]%32)<16? 0 : 4) + ((row[6]%32)<16? 0 : 2) + ((row[7]%32)<16? 0 : 1);
			col[5] = ((row[0]%64)<32? 0 : 128) + ((row[1]%64)<32? 0 : 64) + ((row[2]%64)<32? 0 : 32) + ((row[3]%64)<32? 0 : 16) + ((row[4]%64)<32? 0 : 8) + ((row[5]%64)<32? 0 : 4) + ((row[6]%64)<32? 0 : 2) + ((row[7]%64)<32? 0 : 1);
			col[6] = ((row[0]%128)<64? 0 : 128) + ((row[1]%128)<64? 0 : 64) + ((row[2]%128)<64? 0 : 32) + ((row[3]%128)<64? 0 : 16) + ((row[4]%128)<64? 0 : 8) + ((row[5]%128)<64? 0 : 4) + ((row[6]%128)<64? 0 : 2) + ((row[7]%128)<64? 0 : 1);
			col[7] = (row[0]<128? 0 : 128) + (row[1]<128? 0 : 64) + (row[2]<128? 0 : 32) + (row[3]<128? 0 : 16) + (row[4]<128? 0 : 8) + (row[5]<128? 0 : 4) + (row[6]<128? 0 : 2) + (row[7]<128? 0 : 1);
			code = col[7] + ',' + col[6] + ','+ col[5] + ','+ col[4] + ','+ col[3] + ','+ col[2] + ','+ col[1] + ','+ col[0];
			
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
			Blockly.Blocks.oled_128x32_small_icon = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_small_icon'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_SMALL_ICON','LANG_LED_MATRIX_DRAWING_NO_CONNECTION','LANG_LED_MATRIX_DRAWING_POOR_CONNECTION','LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION','LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION','LANG_LED_MATRIX_DRAWING_NO_BATTERY','LANG_LED_MATRIX_DRAWING_LOW_BATTERY','LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY','LANG_LED_MATRIX_DRAWING_FULL_BATTERY','LANG_LED_MATRIX_DRAWING_CORRECT','LANG_LED_MATRIX_DRAWING_WRONG','LANG_LED_MATRIX_DRAWING_ARROW_UP','LANG_LED_MATRIX_DRAWING_ARROW_DOWN','LANG_LED_MATRIX_DRAWING_ARROW_RIGHT','LANG_LED_MATRIX_DRAWING_ARROW_LEFT','LANG_LED_MATRIX_DRAWING_TRIANGLE_UP','LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN','LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT','LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT','LANG_LED_MATRIX_DRAWING_SMILE','LANG_LED_MATRIX_DRAWING_DIAMOND','LANG_LED_MATRIX_DRAWING_CROSS','LANG_LED_MATRIX_DRAWING_SPADE','LANG_LED_MATRIX_DRAWING_CIRCLE_FULL','LANG_LED_MATRIX_DRAWING_CIRCLE','LANG_LED_MATRIX_DRAWING_MALE','LANG_LED_MATRIX_DRAWING_FEMALE','LANG_LED_MATRIX_DRAWING_NOTE','LANG_LED_MATRIX_DRAWING_NOTES','LANG_LED_MATRIX_DRAWING_SNOW','LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN','LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT','LANG_OLED_SMALL_ICON_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled_image.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_SMALL_ICON')).appendField(new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NO_CONNECTION'),'NO_CONN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_POOR_CONNECTION'),'POOR_CONN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION'),'GOOD_CONN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION'),'EXCEL_CONN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NO_BATTERY'),'NO_BATT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_LOW_BATTERY'),'LOW_BATT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY'),'MEDIUM_BATT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_FULL_BATTERY'),'FULL_BATT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CORRECT'),'CORRECT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_WRONG'),'WRONG'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_UP'),'ARROW_UP'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_DOWN'),'ARROW_DOWN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_RIGHT'),'ARROW_RIGHT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_LEFT'),'ARROW_LEFT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_UP'),'TRIAG_UP'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN'),'TRIAG_DOWN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT'),'TRIAG_RIGHT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT'),'TRIAG_LEFT'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SMILE'),'SMILE'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_DIAMOND'),'DIAMOND'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CROSS'),'CROSS'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SPADE'),'SPADE'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CIRCLE_FULL'),'CIRCLE_FULL'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CIRCLE'),'CIRCLE'], 
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_MALE'),'MALE'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_FEMALE'),'FEMALE'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NOTE'),'NOTE'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NOTES'),'NOTES'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SNOW'),'SNOW'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN'),'ARROW_UP_DOWN'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT'),'ARROW_LEFT_RIGHT']]),'ICON').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(false,null);
				this.setNextStatement(false,null);
				this.setOutput(true,'oled_small_icon');
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_SMALL_ICON_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_large_icon = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
			var str = this.getFieldValue('ICON');
			var data='';
			if (str==='HOME')
				data='07E00FF01FF83FFC7FFEFFFFC003C003C003CFF3CFF3CC33CC33CC33FC3FFC3F';
			else if (str==='ARROWUP')
				data='018003C007E00FF01E783C3C781EFC3FFC3F7C3E1C381C381C381FF81FF80FF0';
			else if (str==='ARROWDOWN')
				data='0FF01FF81FF81C381C381C387C3EFC3FFC3F781E3C3C1E780FF007E003C00180';
			else if (str==='ARROWLEFT')
				data='018003C007C00FFE1FFF3DFF7807F007F00778073DFF1FFF0FFE07C003C00180';
			else if (str==='ARROWRIGHT')
				data='018003C003E07FF0FFF8FFBCE01EE00FE00FE01EFFBCFFF87FF003E003C00180';
			else if (str==='BAT0')
				data='0000000000003FF87FFCFFFEE006E007E007E006FFFE7FFC3FF8000000000000';
			else if (str==='BAT1')
				data='0000000000003FF87FFCFFFEEC06EC07EC07EC06FFFE7FFC3FF8000000000000';
			else if (str==='BAT2')
				data='0000000000003FF87FFCFFFEED86ED87ED87ED86FFFE7FFC3FF8000000000000';
			else if (str==='BAT3')
				data='0000000000003FF87FFCFFFEEDB6EDB7EDB7EDB6FFFE7FFC3FF8000000000000';
			else if (str==='BAT4')
				data='0000000000003FF87FFCFFFEE006E067E7F7E306FFFE7FFC3FF8000000000000';
			else if (str==='BLUETOOTH')
				data='0000018001C0016009300D30076003C0018003C007600D300930016001C00180';
			else if (str==='BULB')
				data='000003E004100808100410041004100410040808041003E0022003E0022003E0';
			else if (str==='BULBON')
				data='000023E214140808100410041004100410040808141423E2022003E0022003E0';
			else if (str==='BULBOFF')
				data='000003E007F00FF81FFC1FFC1FFC1FFC1FFC0FF8041003E0022003E0022003E0';
			else if (str==='BULLET')
				data='000000000000000003800FE00FE01FF01FF01FF00FE00FE00380000000000000';
			else if (str==='CANCEL')
				data='00000000380E3C1E3E3E1F7C0FF807F003E007F00FF81F7C3E3E3C1E380E0000';
			else if (str==='CHECK')
				data='00000000000000000007000F001F703E787C7CF81FF00FE007C0038000000000';
			else if (str==='FILL1')
				data='00000000000000000000000000000000000000000000000000007FFE7FFE7FFE';
			else if (str==='FILL2')
				data='0000000000000000000000000000000000007FFE7FFE7FFE00007FFE7FFE7FFE';
			else if (str==='FILL3')
				data='000000000000000000007FFE7FFE7FFE00007FFE7FFE7FFE00007FFE7FFE7FFE';
			else if (str==='FILL4')
				data='00007FFE7FFE7FFE00007FFE7FFE7FFE00007FFE7FFE7FFE00007FFE7FFE7FFE';
			else if (str==='SPEAK')
				data='3FFC7FFEFFFFF00FE007E007E007E007E007E007F00FF1FE7BFC3FF81E000C00';
			else if (str==='HEART')
				data='000000003C787EFCFFFEFFFEFFFEFFFE7FFC7FFC3FF81FF00FE007C003800100';
			else if (str==='NOCONN')
				data='000003E00FF81FFC3E3E387E70FF71F773C777873F0E3E1E1FFC0FF803E00000';
			else if (str==='TOOL')
				data='0000006000E001C001C001E603FE07FC0FF81FC03F807F00FE00FC00F8007000';
			else if (str==='PLUG')
				data='00000000000006600660066006603FFC3FFC3FFC3FFC1FF80FF007E000000000';
			else if (str==='POWER_BUTTON')
				data='000001C00DD81DDC3DDE39CE71C771C771C77007380E3E1E1FFC0FF803E00000';
			else if (str==='WALL_PLUG')
				data='0000FFFF8001BFFDA005A005A005A005A665A665A005A005A005BFFD8001FFFF';
			else if (str==='WIFI1')
				data='000007E01FF83FFC700E67E60FF0181803C007E0042001800180000000000000';
			else if (str==='WIFI2')
				data='0000000000000000000007E00FF0181803C007E0042001800180000000000000';
			else if (str==='CLOCK')
				data='0000000003E007F00C18180C3006300630FE30863086188C0C1807F003E00000';
			else if (str==='TIMER')
				data='0000000003E007F00C98183C307630E639CE30863006180C0C9807F003E00000';
			else if (str==='WATERTAP')
				data='018007E001800FF0FFFEFFFFFFFFFFFF000F000F0000000C000C0000000C000C';
			else if (str==='HUMIDITY')
				data='0000018003C007E00E700C301C381818381C381C381C1C381FF80FF003C00000';
			else if (str==='HUMIDITY2')
				data='0000018003C007E00FF00FF01FF81FD83F9C3F9C3F1C1E381FF80FF003C00000';
			else if (str==='SUN')
				data='000020821084080801C007F007F00FF86FFB0FF807F007F011C4200240810080';
			else if (str==='TEMPERATURE')
				data='01C003E0072007E0072007E0072007E007200FF01FF81FF81FF81FF80FF007E0';
			else if (str==='NONINVERTED')
				data='00007FFE7FFE5FFE4FFE47FE43FE41FE40FE407E403E401E400E40067FFE0000';
			else if (str==='INVERTED')
				data='00007FFE6002700278027C027E027F027F827FC27FE27FF27FFA7FFE7FFE0000';
			else if (str==='LOCKCLOSED')
				data='3FFC3FFC381C381C381C7FFE7FFE7FFE7FFE7E7E7E7E7E7E7E7E7FFE7FFE0000';
			else if (str==='LOCKOPEN')
				data='3FFC3FFC381C380038007FFE7FFE7FFE7FFE7E7E7E7E7E7E7E7E7FFE7FFE0000';
			else if (str==='PERSON')
				data='07E00FF00FF01FF81FF81FF81FF80FF00FF007E007E03FFC7FFEFFFFFFFFFFFF';
			else if (str==='WINDOW')
				data='7FFF7FFF618F619B61B37FB37FB361B361B361B361B361B361B361B37FFF7FFF';
			else if (str==='DOOR')
				data='000000000FF80FF80BF808F808380838083808B808B8083808380C38032000E0';
			else if (str==='FACE')
				data='000001C00FF81DD8180C10042FFA7F7F677B6773208210200BE8041003E00000';
			else if (str==='SIREN')
				data='80814082208413E807F00FF80FB81F9C1F9C1F8C3F8E3F8E7FFF7FFF7FFF0000';
			else if (str==='WARNING')
				data='008001C001C003E00360077006300EB80C981C9C188C380E30867FFF7FFF0000';
			else if (str==='PLUS')
				data='00000000000001800180018001801FF81FF80180018001800180000000000000';
			else if (str==='MINUS')
				data='00000000000000000000000000001FF81FF80000000000000000000000000000';
			else if (str==='MOBILE')
				data='0000003000300FF80FF80C180C180C180C180FF80FF80FF80FF80FF80FF80FF8';
			else if (str==='SIGNAL1')
				data='00000000000000000000000000000000000000000000000000004000C000C000';
			else if (str==='SIGNAL2')
				data='00000000000000000000000000000000000004000C001C001C005C00DC00DC00';
			else if (str==='SIGNAL3')
				data='00000000000000000000004000C001C001C005C00DC01DC01DC05DC0DDC0DDC0';
			else if (str==='SIGNAL4')
				data='00000004000C001C001C005C00DC01DC01DC05DC0DDC1DDC1DDC5DDCDDDCDDDC';
			//var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
			var row1,row2,row3,row4,row5,row6,row7,row8;
			var col1,col2,col3,col4,col5,col6,col7,col8;
			var code='';
			var pos_ini=0;
			for (var i=0;i<32;i++)
			{
				code+='0x'+data.substr(pos_ini,2)+',';
				pos_ini+=2;
			}
			code=code.substr(0,code.length-1);
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
			Blockly.Blocks.oled_128x32_large_icon = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_large_icon'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_LARGE_ICON','LANG_OLED_LARGE_ICON_HOME','LANG_OLED_LARGE_ICON_ARROW_UP','LANG_OLED_LARGE_ICON_ARROW_DOWN','LANG_OLED_LARGE_ICON_ARROW_LEFT','LANG_OLED_LARGE_ICON_ARROW_RIGHT','LANG_OLED_LARGE_ICON_BAT0','LANG_OLED_LARGE_ICON_BAT1','LANG_OLED_LARGE_ICON_BAT2','LANG_OLED_LARGE_ICON_BAT3','LANG_OLED_LARGE_ICON_BAT4','LANG_OLED_LARGE_ICON_BLUETOOTH','LANG_OLED_LARGE_ICON_BULB','LANG_OLED_LARGE_ICON_BULB_ON','LANG_OLED_LARGE_ICON_BULB_OFF','LANG_OLED_LARGE_ICON_BULLET','LANG_OLED_LARGE_ICON_CANCEL','LANG_OLED_LARGE_ICON_CHECK','LANG_OLED_LARGE_ICON_FILL1','LANG_OLED_LARGE_ICON_FILL2','LANG_OLED_LARGE_ICON_FILL3','LANG_OLED_LARGE_ICON_FILL4','LANG_OLED_LARGE_ICON_SPEAK','LANG_OLED_LARGE_ICON_HEART','LANG_OLED_LARGE_ICON_NOCONN','LANG_OLED_LARGE_ICON_TOOL','LANG_OLED_LARGE_ICON_PLUG','LANG_OLED_LARGE_ICON_POWER_BUTTON','LANG_OLED_LARGE_ICON_WALL_PLUG','LANG_OLED_LARGE_ICON_WIFI1','LANG_OLED_LARGE_ICON_WIFI2','LANG_OLED_LARGE_ICON_CLOCK','LANG_OLED_LARGE_ICON_TIMER','LANG_OLED_LARGE_ICON_WATER_TAP','LANG_OLED_LARGE_ICON_HUMIDITY','LANG_OLED_LARGE_ICON_HUMIDITY2','LANG_OLED_LARGE_ICON_SUN','LANG_OLED_LARGE_ICON_TEMPERATURE','LANG_OLED_LARGE_ICON_NON_INVERTED','LANG_OLED_LARGE_ICON_INVERTED','LANG_OLED_LARGE_ICON_LOCK_CLOSED','LANG_OLED_LARGE_ICON_LOCK_OPEN','LANG_OLED_LARGE_ICON_PERSON','LANG_OLED_LARGE_ICON_WINDOW','LANG_OLED_LARGE_ICON_DOOR','LANG_OLED_LARGE_ICON_FACE','LANG_OLED_LARGE_ICON_SIREN','LANG_OLED_LARGE_ICON_WARNING','LANG_OLED_LARGE_ICON_PLUS','LANG_OLED_LARGE_ICON_MINUS','LANG_OLED_LARGE_ICON_MOBILE','LANG_OLED_LARGE_ICON_SIGNAL','LANG_OLED_LARGE_ICON_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled_image.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_LARGE_ICON')).appendField(new Blockly.FieldDropdown([
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_HOME'),'HOME'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_ARROW_UP'),'ARROWUP'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_ARROW_DOWN'),'ARROWDOWN'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_ARROW_LEFT'),'ARROWLEFT'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_ARROW_RIGHT'),'ARROWRIGHT'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BAT0'),'BAT0'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BAT1'),'BAT1'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BAT2'),'BAT2'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BAT3'),'BAT3'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BAT4'),'BAT4'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BLUETOOTH'),'BLUETOOTH'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BULB'),'BULB'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BULB_ON'),'BULBON'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BULB_OFF'),'BULBOFF'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_BULLET'),'BULLET'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_CANCEL'),'CANCEL'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_CHECK'),'CHECK'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_FILL1'),'FILL1'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_FILL2'),'FILL2'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_FILL3'),'FILL3'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_FILL4'),'FILL4'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SPEAK'),'SPEAK'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_HEART'),'HEART'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_NOCONN'),'NOCONN'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_TOOL'),'TOOL'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_PLUG'),'PLUG'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_POWER_BUTTON'),'POWER_BUTTON'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_WALL_PLUG'),'WALL_PLUG'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_WIFI1'),'WIFI1'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_WIFI2'),'WIFI2'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_CLOCK'),'CLOCK'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_TIMER'),'TIMER'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_WATER_TAP'),'WATERTAP'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_HUMIDITY'),'HUMIDITY'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_HUMIDITY2'),'HUMIDITY2'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SUN'),'SUN'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_TEMPERATURE'),'TEMPERATURE'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_NON_INVERTED'),'NONINVERTED'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_INVERTED'),'INVERTED'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_LOCK_CLOSED'),'LOCKCLOSED'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_LOCK_OPEN'),'LOCKOPEN'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_PERSON'),'PERSON'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_WINDOW'),'WINDOW'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_DOOR'),'DOOR'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_FACE'),'FACE'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SIREN'),'SIREN'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_WARNING'),'WARNING'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_PLUS'),'PLUS'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_MINUS'),'MINUS'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_MOBILE'),'MOBILE'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SIGNAL')+'1','SIGNAL1'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SIGNAL')+'2','SIGNAL2'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SIGNAL')+'3','SIGNAL3'],
				[Facilino.locales.getKey('LANG_OLED_LARGE_ICON_SIGNAL')+'4','SIGNAL4']]),'ICON').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(false,null);
				this.setNextStatement(false,null);
				this.setOutput(true,'oled_large_icon');
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_LARGE_ICON_TOOLTIP'));
			  }
		};
		
		
		Blockly.Arduino.oled_128x32_main_image = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
			var str = this.getFieldValue('ICON');
			var data ='';
			if (str==='BORED')
				data='0000000FFFFFFFFFF0000000000001FFFFFFFFFFFF80000000001FFFFFFFFFFFFFF8000000007FFFFFFFFFFFFFFE00000001FFFF00000000FFFF80000007FFE00000000007FFE000000FFF000000000000FFF000003FF80000000000001FF800003FF00000000000000FFC00007FC000000000000003FE0000FF8000000000000001FF0000FF8000000000000001FF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF00';
			else if (str==='CALM')
				data='000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF00007FFFFFFFFFFFFFFFFFFE00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
			else if (str==='CONFUSED')
				data='000001FFFF8000000000000000001FFFFFF80000000000000000FFFFFFFE0000000018000003FFFFFFFF80000000FF00001FFFFFFFFFE0000001FF00003FFFFFFFFFF8000003FF0000FFFFC003FFFC000007FF0000FFFC00007FFF00001FFF0000FFF000000FFFC0007FFE0000FF80000007FFF003FFF800007E00000001FFFFFFFFF000000000000000FFFFFFFFC0000000000000003FFFFFFF80000000000000000FFFFFFE000000000000000003FFFFF00000000000000000007FFF800000';
			else if (str==='COOL')
				data='00000000000000000003FF000000000000000000000FFF000000000000000000001FFF000000000000000000003FFF00000000000000000000FFFE00000000000000000001FFF800000000000000000007FFF00000000000000000003FFFE0000000000000000001FFFF8000000E00000000000FFFFE000000FFFE00000003FFFFF8000000FFFFFFFFFFFFFFFFC0000000FFFFFFFFFFFFFFFE000000007FFFFFFFFFFFFFF00000000007FFFFFFFFFFFE00000000000007FFFFFFFF8000000000';
			else if (str==='CRYING')
				data='0000000007FFFFE0000000000000000FFFFFFFFFF0000000000001FFFFFFFFFFFF00000000000FFF80000001FFE0000000007FF0000000000FFC00000001FF800000000001FF00000003FC0000000000007FC000000FF0007FFFFFFC001FE000001FC01FFFFFFFFFF007F800003F83FFFC00001FFF83F800007FBFFE000000003FFBFC00007FFFC00000000001FFFC0000FFFF800000000000FFFE0000FFFFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFFFE00000000000000000000000000';
			else if (str==='KISS')
				data='00000000000F80000000000000000000000FE0000000000000000000000FE00000000000000000000003F00000000000000000000000F00000000000000000000001F00000000000000000000003E00000000000000000000007E00000000000000000000007C00000000000000000000003C00000000000000000000003E00000000000000000000001E00000000000000000000003E0000000000000000000000FE0000000000000000000000FC0000000000000000000000F800000000000';
			else if (str==='KISS1')
				data='00000000000F80000000000000000000000FE0000000000000000000000FE7FE00000000000000000003FFFF00000000000000000000FFFF80000000000000000001FFFF80000000000000000003EF6780000000000000000007EF0F80000000000000000007CF8F80000000000000000003C7DF00000000000000000003E7FE00000000000000000001E3FE00000000000000000003E1FC0000000000000000000FE0F80000000000000000000FC0600000000000000000000F800000000000';
			else if (str==='KISS2')
				data='00000000000F80000000000000000000000FE0000000000000000000000FE7FE0FFC0000000000000003FFFF1FFE0000000000000000FFFF9FFF0000000000000001FFFF9FFF0000000000000003EF679ECF0000000000000007EF0F9E1F0000000000000007CF8F9F1F0000000000000003C7DF0FBE0000000000000003E7FE0FFC0000000000000001E3FE07FC0000000000000003E1FC03F8000000000000000FE0F801F0000000000000000FC06000C0000000000000000F800000000000';
			else if (str==='KISS3')
				data='00000000000F80000000000000000000000FE0000000000000000000000FE7FE0FFC1FF8000000000003FFFF1FFE3FFC000000000000FFFF9FFF3FFE000000000001FFFF9FFF3FFE000000000003EF679ECF3D9E000000000007EF0F9E1F3C3E000000000007CF8F9F1F3E3E000000000003C7DF0FBE1F7C000000000003E7FE0FFC1FF8000000000001E3FE07FC0FF8000000000003E1FC03F807F000000000000FE0F801F003E000000000000FC06000C0018000000000000F800000000000';
			else if (str==='MUSTACHE')
				data='000000000FFFFFF000000000000000007FFFFFFE0000000000000000FFFFFFFF0000000000000003FFFFFFFF8000000000000007FF0FF0FFE00000000000000FF803803FF00000000000001FF003C00FF8000000000001FFE007E007FF800000000001FFC00FF003FF800000000001FF003FF800FF800000000001FF807FFE01FF800000000000FFE1FFFF87FF0000000000007FFFFFFFFFFE0000000000001FFFFE7FFFF800000000000007FFF81FFFE000000000000001FFE007FF80000000';
			else if (str==='MUTE')
				data='0000000007C003E0000000000000000007F00FE0000000000000000007F81FE0000000000000000007FE7FE0000000000000000003FFFFC0000000000000000001FFFF800000000000000000007FFE000000000000000000003FFC000000000000000000003FFC000000000000000000007FFE00000000000000000001FFFF80000000000000000003FFFFC0000000000000000007FE7FE0000000000000000007F81FE0000000000000000007F00FE0000000000000000007C003E000000000';
			else if (str==='NERVOUS')
				data='000007F00007F00007F0000000000FF8001FF8000FF8000000003FFE003FFC003FFE000000007FFF007FFF00FFFF00000001FFFFC1FFFF81FFFF80000003FFFFE3FFFFE7FFFFE000000FFFFFFFFFFFFFFFFFF000001FFFFFFFFFFFFFFFFFF800003FFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFF0000FFFE3FFFFE7FFFFE7FFF0000FFFC1FFFFC1FFFF81FFF0000FFF007FFF00FFFF00FFF0000FFE003FFE007FFC007FF0000FF8000FFC001FF8001FF00007F00007F0000FE0000FE00';
			else if (str==='BAD')
				data='0000000001FFFFFFFFE00000000000007FFFFFFFFFFFE0000000000FFFFFFFFFFFFFFE000000007FFFFFFFFFFFFFFF00000003FFFFFFFFFFFFFFFF0000001FFFFFC00000007FFF0000007FFFF0000000000070000001FFFF80000000000000000007FFFC0000000000000000000FFFE00000000000000000001FFF800000000000000000007FFF00000000000000000000FFFC00000000000000000000FFF800000000000000000000FFF000000000000000000000FFC0000000000000000000';
			else if (str==='SAD')
				data='00000007FFFFFFFFE0000000000000FFFFFFFFFFFF000000000007FFFFFFFFFFFFF0000000003FFFFFFFFFFFFFFC00000000FFFE000000007FFF00000003FFE00000000007FFC000000FFF800000000000FFF000001FFC0000000000003FF800003FF80000000000000FFC00007FE000000000000007FE00007FC000000000000003FF0000FF8000000000000001FF0000FF0000000000000000FF0000FF0000000000000000FF0000FF0000000000000000FF0000FF00000000000000007F00';
			else if (str==='SHOUTING')
				data='0000000000FFFF00000000000000000007FFFFE000000000000000001FFE7FF800000000000000003FC003FC00000000000000007E00007E0000000000000000FC00003F0000000000000000F800001F0000000000000000F800001F0000000000000000F800001F0000000000000000F81FFE1F0000000000000000FDFFFFFF00000000000000007FFFFFFE00000000000000003FF003FC00000000000000001FFF7FF8000000000000000007FFFFE0000000000000000000FFFF0000000000';
			else if (str==='SICK')
				data='000000003C00003C00000000000000003E00007C00000000000000003E00007C00000000000000003F1FF0FC00000000000000001F7FFEF800000000000000001FFFFFF800000000000000000FFFFFF000000000000000000FFFFFF000000000000000000FF00FF000000000000000000FC003F000000000000000000F8001F000000000000000001F0000F800000000000000003F0000FC00000000000000003F0000FC00000000000000003E00007C00000000000000003C00003C00000000';
			else if (str==='SMILE')
				data='00FF8000000000000000FE0000FFC000000000000003FF0000FFC000000000000003FF0000FFC000000000000003FF0000FFE000000000000007FF0000FFF000000000000007FF00007FF80000000000001FFE00003FFE0000000000003FFE00001FFF800000000000FFFC00000FFFE00000000007FFF8000007FFFF000000007FFFE0000001FFFFFFFFFFFFFFFF800000007FFFFFFFFFFFFFFE000000000FFFFFFFFFFFFFF80000000000FFFFFFFFFFFF8000000000000FFFFFFFFFF0000000';
			else if (str==='SMILE_TEETH')
				data='003FFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF00007C00001E00001E00003E00007E00001E00001E00007E00003F00001E00001E0000FC00003FFFFFFFFFFFFFFFFFFC00001FDFFFF3FFFFF3FFFBF8000007C000000000000007E0000003F80000000000003FC0000000FF800000000001FF000000003FF0000000000FFC000000000FFFC0000003FFF00000000000FFFFFFFFFFFF0000000000000FFFFFFFFFF0000000000000001FFFFFF800000000';
			else if (str==='TONGUE')
				data='00FF8000000000000001FF0000FF8000000000000001FF0000FFC000000000000003FF0000FFE000000000000007FF00007FFC0000000000003FFE00001FFF800000000001FFF8000007FFFE000000007FFFE0000000FFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFFF00000000000000003FFC07FFC0000000000000000FFF81FFE00000000000000003FFE07FE00000000000000000FFFFFFE000000000000000003FFFFFC0000000000000000007FFFF000';
			else if (str==='WIDE_SMILE')
				data='00FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF0000FF8000000000000001FF0000FFC000000000000003FF00007FE000000000000007FE00003FF00000000000000FFC00001FFC0000000000003FF800000FFF800000000001FFF0000003FFF0000000000FFFC0000000FFFF80000001FFFF000000003FFFFFFFFFFFFFFC000000000FFFFFFFFFFFFFF00000000000FFFFFFFFFFFF00000000000007FFFFFFFFE0000000';
			//var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
			var row1,row2,row3,row4,row5,row6,row7,row8;
			var col1,col2,col3,col4,col5,col6,col7,col8;
			var code='';
			var pos_ini=0;
			for (var i=0;i<192;i++)
			{
				code+='0x'+data.substr(pos_ini,2)+',';
				pos_ini+=2;
			}
			code=code.substr(0,code.length-1);
			return [code, Blockly.Arduino.ORDER_ATOMIC];
		};
		
			Blockly.Blocks.oled_128x32_main_image = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_main_image'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_96x16_IMAGE','LANG_OLED_CENTRAL_ICON_BORED','LANG_OLED_CENTRAL_ICON_CALM','LANG_OLED_CENTRAL_ICON_CONFUSED','LANG_OLED_CENTRAL_ICON_COOL','LANG_OLED_CENTRAL_ICON_CRYING','LANG_OLED_CENTRAL_ICON_KISS','LANG_OLED_CENTRAL_ICON_KISS','LANG_OLED_CENTRAL_ICON_MUSTACHE','LANG_OLED_CENTRAL_ICON_MUTE','LANG_OLED_CENTRAL_ICON_NERVOUS','LANG_OLED_CENTRAL_ICON_BAD','LANG_OLED_CENTRAL_ICON_SAD','LANG_OLED_CENTRAL_ICON_SHOUTING','LANG_OLED_CENTRAL_ICON_SICK','LANG_OLED_CENTRAL_ICON_SMILE','LANG_OLED_CENTRAL_ICON_SMILE_TEETH','LANG_OLED_CENTRAL_ICON_TONGUE','LANG_OLED_CENTRAL_ICON_WIDE_SMILE','LANG_OLED_MAIN_IMAGE_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled_image.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_96x16_IMAGE')).appendField(new Blockly.FieldDropdown([
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_BORED'),'BORED'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_CALM'),'CALM'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_CONFUSED'),'CONFUSED'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_COOL'),'COOL'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_CRYING'),'CRYING'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_KISS'),'KISS'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_KISS')+'1','KISS1'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_KISS')+'2','KISS2'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_KISS')+'3','KISS3'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_MUSTACHE'),'MUSTACHE'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_MUTE'),'MUTE'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_NERVOUS'),'NERVOUS'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_BAD'),'BAD'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_SAD'),'SAD'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_SHOUTING'),'SHOUTING'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_SICK'),'SICK'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_SMILE'),'SMILE'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_SMILE_TEETH'),'SMILE_TEETH'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_TONGUE'),'TONGUE'],
				[Facilino.locales.getKey('LANG_OLED_CENTRAL_ICON_WIDE_SMILE'),'WIDE_SMILE']]),'ICON').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(false,null);
				this.setNextStatement(false,null);
				this.setOutput(true,'oled_central_image');
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_MAIN_IMAGE_TOOLTIP'));
			  }
		};
		
			
			Blockly.Arduino.oled_128x32_image_browse = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
					var code = '';
					//console.log(this.data);
					if (this.data!==null)
					{
						var image = JSON.parse(this.data);
						code=image.data;
					}
					return [code, Blockly.Arduino.ORDER_ATOMIC];
			};
				
			Blockly.Blocks.oled_128x32_image_browse = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
				tags: ['oled','screen'],
				helpUrl: Facilino.getHelpUrl('oled_128x32_image_browse'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
				colour: Facilino.LANG_COLOUR_SCREEN_OLED,
				keys: ['LANG_OLED_IMAGE_BROWSE_TOOLTIP'],
				init: function() {
					this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled_image.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(new Blockly.FieldTextInput('image_name'),'IMAGE_NAME').appendField(new Blockly.FieldButton('Browse...',null),'IMAGE').setAlign(Blockly.ALIGN_RIGHT);
					this.setPreviousStatement(false,null);
					this.setNextStatement(false,null);
					this.setOutput(true,'oled_custom_image');
					this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
					Facilino.NumImages=Facilino.NumImages+1;
					this.NumImages=Facilino.NumImages;
					//this.setFieldValue('Image'+this.NumImages,'IMAGE_LABEL');
					this.setTooltip(Facilino.locales.getKey('LANG_OLED_IMAGE_BROWSE_TOOLTIP'));
				},
				onchange: function()
				{
					if (this.data!==null){
						var image = JSON.parse(this.data);
						if (image.name!==undefined)
						{
							image.name=this.getFieldValue('IMAGE_NAME');
							this.data=JSON.stringify(image);
							this.setWarningText(null);
						}
						else
							this.setWarningText('No image selected!');
					}
					else
						this.setWarningText('No image selected!');
				}
			};
			
			Blockly.Arduino.oled_128x32_image_empty = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
					var code = '';
					return [code, Blockly.Arduino.ORDER_ATOMIC];
			};
				
			Blockly.Blocks.oled_128x32_image_empty = {
				category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
				tags: ['oled','screen'],
				helpUrl: Facilino.getHelpUrl('oled_128x32_image_empty'),
				examples: [''],
				category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
				colour: Facilino.LANG_COLOUR_SCREEN_OLED,
				keys: ['LANG_OLED_EMPTY','LANG_OLED_EMPTY_IMAGE_TOOLTIP'],
				init: function() {
					this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled_image.svg", 20*options.zoom, 20*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_EMPTY')).setAlign(Blockly.ALIGN_RIGHT);
					this.setPreviousStatement(false,null);
					this.setNextStatement(false,null);
					this.setOutput(true,'oled_empty_image');
					this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
					Facilino.NumImages=Facilino.NumImages+1;
					this.NumImages=Facilino.NumImages;
					//this.setFieldValue('Image'+this.NumImages,'IMAGE_LABEL');
					this.setTooltip(Facilino.locales.getKey('LANG_OLED_EMPTY_IMAGE_TOOLTIP'));
				}
			};
		
			Blockly.Arduino.oled_128x32_draw_line = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var x0= Blockly.Arduino.valueToCode(this,'X0', Blockly.Arduino.ORDER_ATOMIC);
			var y0= Blockly.Arduino.valueToCode(this,'Y0', Blockly.Arduino.ORDER_ATOMIC);
			var x1= Blockly.Arduino.valueToCode(this,'X1', Blockly.Arduino.ORDER_ATOMIC);
			var y1= Blockly.Arduino.valueToCode(this,'Y1', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['define_line_oled']='void lineOLED(int16_t x0, int16_t y0, int16_t x1, int16_t y1){\n  oled_display.drawLine(x0,y0,x1,y1,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
			code='lineOLED('+x0+','+y0+','+x1+','+y1+');\n';
			return code;
		};
		
		Blockly.Blocks.oled_128x32_draw_line = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GEOMETRY'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_draw_line'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_LINE','LANG_OLED_SET_COORDINATE_X','LANG_OLED_SET_COORDINATE_Y','LANG_OLED_LINE_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_LINE'))
				this.appendValueInput('X0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('X1').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'1').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y1').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'1').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setInputsInline(true);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_LINE_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_draw_rect = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var x0= Blockly.Arduino.valueToCode(this,'X0', Blockly.Arduino.ORDER_ATOMIC);
			var y0= Blockly.Arduino.valueToCode(this,'Y0', Blockly.Arduino.ORDER_ATOMIC);
			var w= Blockly.Arduino.valueToCode(this,'W', Blockly.Arduino.ORDER_ATOMIC);
			var h= Blockly.Arduino.valueToCode(this,'H', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['define_rect_oled']='void rectOLED(int16_t x0, int16_t y0, int16_t w, int16_t h, bool fill){\n  if (fill)\n    oled_display.fillRect(x0,y0,w,h,WHITE);\n  else\n    oled_display.drawRect(x0,y0,w,h,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
			if (this.getFieldValue('FILL')==='FALSE')
			  code='rectOLED('+x0+','+y0+','+w+','+h+',false);\n';
		    else
			  code='rectOLED('+x0+','+y0+','+w+','+h+',true);\n';
			return code;
		};
		
		Blockly.Blocks.oled_128x32_draw_rect = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GEOMETRY'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_draw_rect'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_RECT','LANG_OLED_FILL','LANG_OLED_SET_COORDINATE_X','LANG_OLED_SET_COORDINATE_Y','LANG_OLED_SET_COORDINATE_WIDTH','LANG_OLED_SET_COORDINATE_HEIGHT','LANG_OLED_RECT_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_RECT')).appendField(Facilino.locales.getKey('LANG_OLED_FILL')).appendField(new Blockly.FieldCheckbox('FALSE'),'FILL');
				this.appendValueInput('X0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('W').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_WIDTH')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('H').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_HEIGHT')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setInputsInline(true);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_RECT_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_draw_circle = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var x0= Blockly.Arduino.valueToCode(this,'X0', Blockly.Arduino.ORDER_ATOMIC);
			var y0= Blockly.Arduino.valueToCode(this,'Y0', Blockly.Arduino.ORDER_ATOMIC);
			var r= Blockly.Arduino.valueToCode(this,'R', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['define_circle_oled']='void circleOLED(int16_t x0, int16_t y0, int16_t r, bool fill){\n  if (fill)\n    oled_display.fillCircle(x0,y0,r,WHITE);\n  else\n    oled_display.drawCircle(x0,y0,r,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
			if (this.getFieldValue('FILL')==='FALSE')
			  code='circleOLED('+x0+','+y0+','+r+',false);\n';
		    else
			  code='circleOLED('+x0+','+y0+','+r+',true);\n';
			return code;
		};
		
		Blockly.Blocks.oled_128x32_draw_circle = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GEOMETRY'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_draw_circle'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_CIRCLE','LANG_OLED_FILL','LANG_OLED_SET_COORDINATE_X','LANG_OLED_SET_COORDINATE_Y','LANG_OLED_SET_RADIUS','LANG_OLED_CIRCLE_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_CIRCLE')).appendField(Facilino.locales.getKey('LANG_OLED_FILL')).appendField(new Blockly.FieldCheckbox('FALSE'),'FILL');
				this.appendValueInput('X0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('R').appendField(Facilino.locales.getKey('LANG_OLED_SET_RADIUS')).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setInputsInline(true);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_CIRCLE_TOOLTIP'));
			  }
		};
		
		Blockly.Arduino.oled_128x32_draw_triangle = function() 
		{
			if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			var code='';
			var x0= Blockly.Arduino.valueToCode(this,'X0', Blockly.Arduino.ORDER_ATOMIC);
			var y0= Blockly.Arduino.valueToCode(this,'Y0', Blockly.Arduino.ORDER_ATOMIC);
			var x1= Blockly.Arduino.valueToCode(this,'X1', Blockly.Arduino.ORDER_ATOMIC);
			var y1= Blockly.Arduino.valueToCode(this,'Y1', Blockly.Arduino.ORDER_ATOMIC);
			var x2= Blockly.Arduino.valueToCode(this,'X2', Blockly.Arduino.ORDER_ATOMIC);
			var y2= Blockly.Arduino.valueToCode(this,'Y2', Blockly.Arduino.ORDER_ATOMIC);
			Blockly.Arduino.definitions_['wire']=JST['wire_definitions_include']({});
			Blockly.Arduino.definitions_['adafruit_gfx']='#include <Adafruit_GFX.h>';
			Blockly.Arduino.definitions_['adafruit_ssd1306']='#include <Adafruit_SSD1306.h>';
			Blockly.Arduino.definitions_['declare_var_oled_display']='Adafruit_SSD1306 oled_display(4);\n';
			Blockly.Arduino.setups_['setup_oled_display']='oled_display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  oled_display.clearDisplay();\n  oled_display.setTextColor(WHITE);\n  oled_display.display();\n  delay(1);\n';
			Blockly.Arduino.definitions_['define_triangle_oled']='void triangleOLED(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, bool fill){\n  if (fill)\n    oled_display.fillTriangle(x0,y0,x1,y1,x2,y2,WHITE);\n  else\n    oled_display.drawTriangle(x0,y0,x1,y1,x2,y2,WHITE);\n  oled_display.display();\n  delay(1);\n}\n';
			if (this.getFieldValue('FILL')==='FALSE')
			  code='triangleOLED('+x0+','+y0+','+x1+','+y1+','+x2+','+y2+',false);\n';
		    else
			  code='triangleOLED('+x0+','+y0+','+x1+','+y1+','+x2+','+y2+',true);\n';
			return code;
		};
		
		Blockly.Blocks.oled_128x32_draw_triangle = {
			category: Facilino.locales.getKey('LANG_CATEGORY_SCREEN'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_OLED'),
			subsubcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_GEOMETRY'),
			  category_colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  colour: Facilino.LANG_COLOUR_SCREEN_OLED,
			  helpUrl: Facilino.getHelpUrl('oled_128x32_draw_triangle'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_OLED_TRIANGLE','LANG_OLED_FILL','LANG_OLED_SET_COORDINATE_X','LANG_OLED_SET_COORDINATE_Y','LANG_OLED_TRIANGLE_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/oled.svg", 24*options.zoom, 24*options.zoom, "*")).appendField(Facilino.locales.getKey('LANG_OLED_TRIANGLE')).appendField(Facilino.locales.getKey('LANG_OLED_FILL')).appendField(new Blockly.FieldCheckbox('FALSE'),'FILL');
				this.appendValueInput('X0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y0').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'0').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('X1').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'1').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y1').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'1').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('X2').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_X')+'2').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('Y2').appendField(Facilino.locales.getKey('LANG_OLED_SET_COORDINATE_Y')+'2').setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setInputsInline(true);
				this.setColour(Facilino.LANG_COLOUR_SCREEN_OLED);
				this.setTooltip(Facilino.locales.getKey('LANG_OLED_TRIANGLE_TOOLTIP'));
			  }
		};
		
			
			Blockly.Blocks['HIPPIE_init'] = {
				category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WALK'),
				category_colour: Facilino.LANG_COLOUR_MOVEMENT,
				colour: Facilino.LANG_COLOUR_MOVEMENT_WALK,
				helpUrl: Facilino.getHelpUrl('HIPPIE_init'),
				tags: [],
				examples: [],
				keys: ['LANG_MOVEMENT_HIPPIE_ROBOT','LANG_MOVEMENT_HIPPIE_YR','LANG_MOVEMENT_HIPPIE_YL','LANG_MOVEMENT_HIPPIE_RR','LANG_MOVEMENT_HIPPIE_RL','LANG_MOVEMENT_HIPPIE_OFFSET','LANG_HIPPIE_INIT_TOOLTIP'],
				init: function () {
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/hippie.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_ROBOT'));
					this.appendValueInput('YR').appendField(new Blockly.FieldImage('img/blocks/hippie_YR.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_YR')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('YL').appendField(new Blockly.FieldImage('img/blocks/hippie_YL.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_YL')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('RR').appendField(new Blockly.FieldImage('img/blocks/hippie_RR.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_RR')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('RL').appendField(new Blockly.FieldImage('img/blocks/hippie_RL.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_RL')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_OFFSET'));
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_YR')).appendField('+/-').appendField(new Blockly.FieldTextInput('0'), 'OYR').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_YL')).appendField('+/-').appendField(new Blockly.FieldTextInput('0'), 'OYL').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_RR')).appendField('+/-').appendField(new Blockly.FieldTextInput('0'), 'ORR').setAlign(Blockly.ALIGN_RIGHT);
					this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_MOVEMENT_HIPPIE_RL')).appendField('+/-').appendField(new Blockly.FieldTextInput('0'), 'ORL').setAlign(Blockly.ALIGN_RIGHT);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setInputsInline(false);
					this.setColour(Facilino.LANG_COLOUR_MOVEMENT_WALK);
					this.setTooltip(Facilino.locales.getKey('LANG_HIPPIE_INIT_TOOLTIP'));
				}
			};
			
			Blockly.Arduino['HIPPIE_init'] = function(block) {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code='';
				var input_YR = Blockly.Arduino.valueToCode(this,'YR',Blockly.Arduino.ORDER_NONE) || '26';
				var input_YL = Blockly.Arduino.valueToCode(this,'YL',Blockly.Arduino.ORDER_NONE) || '25';
				var input_RR = Blockly.Arduino.valueToCode(this,'RR',Blockly.Arduino.ORDER_NONE) || '17';
				var input_RL = Blockly.Arduino.valueToCode(this,'RL',Blockly.Arduino.ORDER_NONE) || '16';
				var input_OYR = Blockly.Arduino.valueToCode(this,'OYR',Blockly.Arduino.ORDER_NONE) || '0';
				var input_OYL = Blockly.Arduino.valueToCode(this,'OYL',Blockly.Arduino.ORDER_NONE) || '0';
				var input_ORR = Blockly.Arduino.valueToCode(this,'ORR',Blockly.Arduino.ORDER_NONE) || '0';
				var input_ORL = Blockly.Arduino.valueToCode(this,'ORL',Blockly.Arduino.ORDER_NONE) || '0';
				
				if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
				{
					Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
					Blockly.Arduino.definitions_['declare_var_servo_'+input_YR]=JST['servo_definitions_variables']({pin: input_YR});
					Blockly.Arduino.definitions_['declare_var_servo_'+input_YL]=JST['servo_definitions_variables']({pin: input_YL});
					Blockly.Arduino.definitions_['declare_var_servo_'+input_RR]=JST['servo_definitions_variables']({pin: input_RR});
					Blockly.Arduino.definitions_['declare_var_servo_'+input_RL]=JST['servo_definitions_variables']({pin: input_RL});
					Blockly.Arduino.definitions_['declare_var_DEG2GRAD']='#ifndef DEG2RAD\n  #define DEG2RAD(g) ((g)*M_PI)/180\n#endif\n';
					Blockly.Arduino.definitions_['declare_var_RAD2DEG']='#ifndef RAD2DEG\n  #define RAD2DEG(g) ((g)*180)/M_PI\n#endif\n';
				}
				else if (Facilino.locales.processor==='ESP32')
				{
					Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
					Blockly.Arduino.definitions_['declare_var_servo_'+input_YR]=JST['ESP_servo_definitions_variables']({pin: input_YR});
					Blockly.Arduino.definitions_['declare_var_servo_'+input_YL]=JST['ESP_servo_definitions_variables']({pin: input_YL});
					Blockly.Arduino.definitions_['declare_var_servo_'+input_RR]=JST['ESP_servo_definitions_variables']({pin: input_RR});
					Blockly.Arduino.definitions_['declare_var_servo_'+input_RL]=JST['ESP_servo_definitions_variables']({pin: input_RL});
				}
				Blockly.Arduino.definitions_['declare_var_define_bPED_servos']='Servo* _bPED_servos[4]={&_servo'+input_YR+',&_servo'+input_YL+',&_servo'+input_RR+',&_servo'+input_RL+'};\n';
				Blockly.Arduino.definitions_['declare_var_define_bPED_servo_pins']='int _bPED_servo_pins[4]={'+input_YR+','+input_YL+','+input_RR+','+input_RL+'};\n';
				Blockly.Arduino.definitions_['declare_var_define_bPED_servo_offsets']='int _bPED_servo_offsets[4]={'+input_OYR+','+input_OYL+','+input_ORR+','+input_ORL+'};\n';
				Blockly.Arduino.definitions_['declare_var_define_bPED_servo_positions']='int _bPED_servo_positions[4]={90,90,90,90};\n';
				
				Blockly.Arduino.definitions_['bPED_moveServos']='void bPED_moveServos(int T, int  servo_target[]) {\n  unsigned long partial_time;\n  unsigned long final_time;\n  double increment[4];\n  double Ts=30.0;\n  double N=(T/Ts);\n  for (int i = 0; i < 4; i++){ \n    increment[i] = ((servo_target[i]) - _bPED_servo_positions[i])/N;\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  if(T>10){\n    for (int x=1;x<=(int)N;x++)\n    {\n      for (int i = 0; i < 4; i++) _bPED_servos[i]->write(_bPED_servo_positions[i] + (x*increment[i])+_bPED_servo_offsets[i]);\n      delay((int)Ts);\n    }\n  }\n  else\n  {\n     for (int i = 0; i < 4; i++) _bPED_servos[i]->write(servo_target[i]+_bPED_servo_offsets[i]);\n     delay((int)Ts);\n  }\n  for (int i = 0; i < 4; i++) _bPED_servo_positions[i] = servo_target[i];\n}\n';
				Blockly.Arduino.definitions_['bPED_oscillateServos']='void bPED_oscillateServos(int A[], int O[], int T, double P[], float cycle){\n  double pos;\n  double Ts=30.0;\n  double N=(T*cycle/Ts);\n  double inc = 6.283185307179586476925286766559/N;\n  double phase=0;\nfor (int i = 0; i < 4; i++){\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  for (int x=0;x<=(int)N;x++){\n    for (int i=0; i<4; i++) {\n      pos = round(A[i]*sin(phase + P[i]) + O[i]);\n      _bPED_servo_positions[i]=(int)(pos+90);\n      _bPED_servos[i]->write(_bPED_servo_positions[i]+_bPED_servo_offsets[i]);\n    }\n    phase=phase+inc;\n    delay((int)Ts);\n  }\n}\n';
				Blockly.Arduino.definitions_['bPED_execute']='void bPED_execute(int A[], int O[], int T, double P[], int steps)\n{\n  float cycles=steps;\n  if (cycles >= 1)\n    for(int i = 0; i < cycles; i++)\n      bPED_oscillateServos(A,O, T,P,cycles+0.5);\n  bPED_home(T);\n}\n';
				Blockly.Arduino.definitions_['bPED_home']='void bPED_home(int T)\n{\n  int home[4]={90,90,90,90};\n  bPED_moveServos(T,home);\n  for (int i = 0; i < 4; i++){if (_bPED_servos[i]->attached()) {_bPED_servos[i]->detach();}}\n}\n';
				
				Blockly.Arduino.setups_['dyor_servo_move_' + input_YR] = JST['dyor_servo_setups']({'dropdown_pin': input_YR});
				Blockly.Arduino.setups_['dyor_servo_move_' + input_YL] = JST['dyor_servo_setups']({'dropdown_pin': input_YL});
				Blockly.Arduino.setups_['dyor_servo_move_' + input_RR] = JST['dyor_servo_setups']({'dropdown_pin': input_RR});
				Blockly.Arduino.setups_['dyor_servo_move_' + input_RL] = JST['dyor_servo_setups']({'dropdown_pin': input_RL});
				
				return code;
			};
			
			Blockly.Arduino['HIPPIE_movement'] = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code='';
				var movement = this.getFieldValue('MOVEMENT');
				Blockly.Arduino.definitions_['bPED_moveServos']='void bPED_moveServos(int T, int  servo_target[]) {\n  unsigned long partial_time;\n  unsigned long final_time;\n  double increment[4];\n  double Ts=30.0;\n  double N=(T/Ts);\n  for (int i = 0; i < 4; i++){ \n    increment[i] = ((servo_target[i]) - _bPED_servo_positions[i])/N;\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  if(T>10){\n    for (int x=1;x<=(int)N;x++)\n    {\n      for (int i = 0; i < 4; i++) _bPED_servos[i]->write(_bPED_servo_positions[i] + (x*increment[i])+_bPED_servo_offsets[i]);\n      delay((int)Ts);\n    }\n  }\n  else\n  {\n     for (int i = 0; i < 4; i++) _bPED_servos[i]->write(servo_target[i]+_bPED_servo_offsets[i]);\n     delay((int)Ts);\n  }\n  for (int i = 0; i < 4; i++) _bPED_servo_positions[i] = servo_target[i];\n}\n';
				Blockly.Arduino.definitions_['bPED_oscillateServos']='void bPED_oscillateServos(int A[], int O[], int T, double P[], float cycle){\n  double pos;\n  double Ts=30.0;\n  double N=(T*cycle/Ts);\n  double inc = 6.283185307179586476925286766559/N;\n  double phase=0;\nfor (int i = 0; i < 4; i++){\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  for (int x=0;x<=(int)N;x++){\n    for (int i=0; i<4; i++) {\n      pos = round(A[i]*sin(phase + P[i]) + O[i]);\n      _bPED_servo_positions[i]=(int)(pos+90);\n      _bPED_servos[i]->write(_bPED_servo_positions[i]+_bPED_servo_offsets[i]);\n    }\n    phase=phase+inc;\n    delay((int)Ts);\n  }\n}\n';
				Blockly.Arduino.definitions_['bPED_execute']='void bPED_execute(int A[], int O[], int T, double P[], int steps)\n{\n  float cycles=steps;\n  if (cycles >= 1)\n    for(int i = 0; i < cycles; i++)\n      bPED_oscillateServos(A,O,T/steps,P,cycles+0.5);\n  bPED_home(T);\n}\n';
				Blockly.Arduino.definitions_['bPED_home']='void bPED_home(int T)\n{\n  int home[4]={90,90,90,90};\n  bPED_moveServos(T,home);\n  for (int i = 0; i < 4; i++){if (_bPED_servos[i]->attached()) {_bPED_servos[i]->detach();}}\n}\n';
					
				if (movement==='0')
				{
					code+='bPED_home(1000);\n';
				}
				else if (movement==='1')
				{
					Blockly.Arduino.definitions_['bPED_droop']='void bPED_droop(int steps, int T)\n{\n  T=1000-map(T,0,100,200,800);\n  int droop[4]={90,90,160,15};\n  for (int i=0;i<steps;i++){\n    bPED_moveServos(T,droop);\n    bPED_home(1000);\n  }\n}\n';
					code+='bPED_droop(1,50);\n';
				}
				else if (movement==='2')
				{
					Blockly.Arduino.definitions_['bPED_walk']='void bPED_walk(int steps, int T, int dir)\n{\n  T=1500-map(T,0,100,300,1200);\n  int walk_A[4]= {15, 15, 50, 50};\n  int walk_O[4] = {0, 0, -10, 10};\n  double walk_P[4] = {0, 0, dir*DEG2RAD(-90), dir*DEG2RAD(-90)};\n  bPED_execute(walk_A,walk_O,T*steps,walk_P,steps);\n}\n';
					code+='bPED_walk(2,50,1);\n';
				}
				else if (movement==='3')
				{
					Blockly.Arduino.definitions_['bPED_walk']='void bPED_walk(int steps, int T, int dir)\n{\n  T=1500-map(T,0,100,300,1200);\n  int walk_A[4]= {15, 15, 50, 50};\n  int walk_O[4] = {0, 0, -10, 10};\n  double walk_P[4] = {0, 0, dir*DEG2RAD(-90), dir*DEG2RAD(-90)};\n  bPED_execute(walk_A,walk_O, T*steps, walk_P,steps);\n}\n';
					code+='bPED_walk(2,50,-1);\n';
				}
				else if (movement==='4')
				{
					Blockly.Arduino.definitions_['bPED_turn']='void bPED_turn(int steps, int T, int dir)\n{\n  T=1200-map(T,0,100,300,900);\n  int turn_A[4]= {15-dir*10, 15+dir*10, 50, 50};\n  int turn_O[4] = {0, 0, -10, 10};\n  double turn_P[4] = {0, 0, DEG2RAD(-90), DEG2RAD(-90)};\n  bPED_execute(turn_A,turn_O, T*steps,turn_P,steps);\n}\n';
					code+='bPED_turn(2,50,1);\n';
				}
				else if (movement==='5')
				{
					Blockly.Arduino.definitions_['bPED_turn']='void bPED_turn(int steps, int T, int dir)\n{\n  T=1200-map(T,0,100,300,900);\n  int turn_A[4]= {15-dir*10, 15+dir*10, 50, 50};\n  int turn_O[4] = {0, 0, -10, 10};\n  double turn_P[4] = {0, 0, DEG2RAD(-90), DEG2RAD(-90)};\n  bPED_execute(turn_A,turn_O, T*steps,turn_P,steps);\n}\n';
					code+='bPED_turn(2,50,-1);\n';
				}
				else if (movement==='6')
				{
					Blockly.Arduino.definitions_['bPED_bend']='void bPED_bend(int steps, int T, int dir){\n  T=2400-map(T,0,100,600,1800);\n  int bend[4]={90, 90, 90, 145};\n  int T2=T-300;\n  if(dir==-1){\n    bend[2]=35;\n    bend[3]=90;\n  }\n  if (T>=300){\n    int T2=T-300;\n    for (int i=0;i<steps;i++)\n    {\n      bPED_moveServos(T2/2,bend);\n      delay(T2/2);\n      bPED_home(300);\n    }\n  }\n}\n';
					code+='bPED_bend(1,50,1);\n';
				}
				else if (movement==='7')
				{
					Blockly.Arduino.definitions_['bPED_bend']='void bPED_bend(int steps, int T, int dir){\n  T=2400-map(T,0,100,600,1800);\n  int bend[4]={90, 90, 90, 145};\n  int T2=T-300;\n  if(dir==-1){\n    bend[2]=35;\n    bend[3]=90;\n  }\n  if (T>=300){\n    int T2=T-300;\n    for (int i=0;i<steps;i++)\n    {\n      bPED_moveServos(T2/2,bend);\n      delay(T2/2);\n      bPED_home(300);\n    }\n  }\n}\n';
					code+='bPED_bend(1,50,-1);\n';
				}
				else if (movement==='8')
				{
					Blockly.Arduino.definitions_['bPED_shakeLeg']='void bPED_shakeLeg(int steps,int T,int dir){\n  T=4600-map(T,0,100,600,4000);\n  int numberLegMoves=4;\n  int shake_leg0[4]={90, 90, 90, 140};\n  int shake_leg01[4]={90, 90, 150, 140};\n  int shake_leg1[4]={90, 90, 150, 40};\n  int shake_leg2[4]={90, 90, 150, 140};\n  int shake_leg3[4]={90, 90, 150, 40};\n  if(dir==-1)\n  {\nshake_leg0[2]=40;\n    shake_leg0[3]=90;\n    shake_leg01[2]=40;\n    shake_leg01[3]=50;\n    shake_leg1[2]=40;\n    shake_leg1[3]=50;\n    shake_leg2[2]=140;\n    shake_leg2[3]=50;\n    shake_leg3[2]=40;\n    shake_leg3[3]=50;\n  }\n  int T2=1000;\n  T=T-T2;\n  T=max(T,200*numberLegMoves);\n  for (int j=0; j<steps;j++)\n  {\n    bPED_moveServos(T2/2,shake_leg0);\n    bPED_moveServos(T2/2,shake_leg01);\n    bPED_moveServos(T2/2,shake_leg1);\n    bPED_moveServos(T2/2,shake_leg2);\n    for (int i=0;i<numberLegMoves;i++)\n    {\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg3);\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg2);\n    }\n    bPED_home(300);\n  }\n  delay(T);\n}\n';
					code+='bPED_shakeLeg(1,50,1);\n';
				}
				else if (movement==='9')
				{
					Blockly.Arduino.definitions_['bPED_shakeLeg']='void bPED_shakeLeg(int steps,int T,int dir){\n  T=4600-map(T,0,100,600,4000);\n  int numberLegMoves=4;\n  int shake_leg0[4]={90, 90, 90, 140};\n  int shake_leg01[4]={90, 90, 150, 140};\n  int shake_leg1[4]={90, 90, 150, 40};\n  int shake_leg2[4]={90, 90, 150, 140};\n  int shake_leg3[4]={90, 90, 150, 40};\n  if(dir==-1)\n  {\nshake_leg0[2]=40;\n    shake_leg0[3]=90;\n    shake_leg01[2]=40;\n    shake_leg01[3]=50;\n    shake_leg1[2]=40;\n    shake_leg1[3]=50;\n    shake_leg2[2]=140;\n    shake_leg2[3]=50;\n    shake_leg3[2]=40;\n    shake_leg3[3]=50;\n  }\n  int T2=1000;\n  T=T-T2;\n  T=max(T,200*numberLegMoves);\n  for (int j=0; j<steps;j++)\n  {\n    bPED_moveServos(T2/2,shake_leg0);\n    bPED_moveServos(T2/2,shake_leg01);\n    bPED_moveServos(T2/2,shake_leg1);\n    bPED_moveServos(T2/2,shake_leg2);\n    for (int i=0;i<numberLegMoves;i++)\n    {\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg3);\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg2);\n    }\n    bPED_home(300);\n  }\n  delay(T);\n}\n';
					code+='bPED_shakeLeg(1,50,-1);\n';
				}
				else if (movement==='10')
				{
					Blockly.Arduino.definitions_['bPED_up_down']='void bPED_up_down(int steps, int T, int height)\n{\n  T=1600-map(T,0,100,600,1000);\n  int angle=map(height,0,100,25,65);\n  int up_down[4]= {90, 90, 90-angle, 90+angle};\n  if (T>=400){\n    int T2=T-300;\n    for (int i=0;i<steps;i++)\n    {\n      bPED_moveServos(T2/2,up_down);\n      delay(T2/2);\n      bPED_home(300);\n    }\n  }\n}\n';
					code+='bPED_up_down(1,50,50);\n';
				}
				else if (movement==='11')
				{
					Blockly.Arduino.definitions_['bPED_swing']='void bPED_swing(int steps, int T, int angle)\n{\n  T=1600-map(T,0,100,600,1000);\n  angle=map(angle,0,100,15,45);\n  int swing_A[4]= {0, 0, angle, angle};\n  int swing_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  double swing_P[4] = {0, 0, DEG2RAD(0), DEG2RAD(0)};\n  bPED_execute(swing_A,swing_O,T,swing_P,steps);\n}\n';
					code+='bPED_swing(2,50,50);\n';
				}
				else if (movement==='12')
				{
					Blockly.Arduino.definitions_['bPED_tiptoeSwing']='void bPED_tiptoeSwing(int steps, int T, int angle)\n{\n  T=1500-map(T,0,100,300,1200);\n  angle=map(angle,0,100,10,30);\n  int tiptoeSwing_A[4]= {angle, angle, 0, 0};\n  int tiptoeSwing_O[4] = {0, 0,0,0};\n  double tiptoeSwing_P[4] = {0, 0, 0, 0};\n  bPED_execute(tiptoeSwing_A,tiptoeSwing_O,T,tiptoeSwing_P,steps);\n}\n';
					code+='bPED_tiptoeSwing(2,50,50);\n';
				}
				else if (movement==='13')
				{
					Blockly.Arduino.definitions_['bPED_jitter']='void bPED_jitter(int steps, int T, int angle)\n{\n  T=400-map(T,0,100,100,300);\n  angle=map(angle,0,100,10,30);\n  int jitter_A[4]= {angle, angle, 0, 0};\n  int jitter_O[4] = {0, 0, 0, 0};\n  double jitter_P[4] = {DEG2RAD(-90), DEG2RAD(90), 0, 0};\n  bPED_execute(jitter_A,jitter_O,T,jitter_P,steps);\n  delay(T);\n}\n';
					code+='bPED_jitter(8,50,50);\n';
				}
				else if (movement==='14')
				{
					Blockly.Arduino.definitions_['bPED_excited']='void bPED_excited(int steps, int T, int angle)\n{\n  T=1600-map(T,0,100,400,1200);\n  angle=map(angle,0,100,5,20);\n  int excited_A[4]= {angle, angle, angle, angle};\n  int excited_O[4] = {0, 0, angle-40, -angle+40};\n  double excited_P[4] = {DEG2RAD(-90), DEG2RAD(90), DEG2RAD(-90), DEG2RAD(90)};\n  bPED_execute(excited_A,excited_O,T,excited_P,steps);\n}\n';
					code+='bPED_excited(1,50,50);\n';
				}
				else if (movement==='15')
				{
					Blockly.Arduino.definitions_['bPED_moonwalker']='void bPED_moonwalker(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,15,30);\n  int moonwalker_A[4]= {0, 0, angle, angle};\n  int moonwalker_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  int phi = -dir * 90;\n  double moonwalker_P[4] = {0, 0, DEG2RAD(phi), DEG2RAD(-60 * dir + phi)};\n  bPED_execute(moonwalker_A,moonwalker_O,T,moonwalker_P,steps);\n}\n';
					code+='bPED_moonwalker(2,50,50,1);\n';
				}
				else if (movement==='16')
				{
					Blockly.Arduino.definitions_['bPED_moonwalker']='void bPED_moonwalker(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,15,30);\n  int moonwalker_A[4]= {0, 0, angle, angle};\n  int moonwalker_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  int phi = -dir * 90;\n  double moonwalker_P[4] = {0, 0, DEG2RAD(phi), DEG2RAD(-60 * dir + phi)};\n  bPED_execute(moonwalker_A,moonwalker_O,T,moonwalker_P,steps);\n}\n';
					code+='bPED_moonwalker(2,50,50,-1);\n';
				}
				else if (movement==='17')
				{
					Blockly.Arduino.definitions_['bPED_crusaito']='void bPED_crusaito(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,5,30);\n  int crusaito_A[4]= {25, 25, angle+10, angle+10};\n  int crusaito_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  double crusaito_P[4] = {90, 90, DEG2RAD(0), DEG2RAD(-60 * dir)};\n  bPED_execute(crusaito_A,crusaito_O,T,crusaito_P,steps);\n}\n';
					code+='bPED_crusaito(2,50,50,1);\n';
				}
				else if (movement==='18')
				{
					Blockly.Arduino.definitions_['bPED_crusaito']='void bPED_crusaito(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,5,30);\n  int crusaito_A[4]= {25, 25, angle+10, angle+10};\n  int crusaito_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  double crusaito_P[4] = {90, 90, DEG2RAD(0), DEG2RAD(-60 * dir)};\n  bPED_execute(crusaito_A,crusaito_O,T,crusaito_P,steps);\n}\n';
					code+='bPED_crusaito(2,50,50,-1);\n';
				}
				else if (movement==='19')
				{
					Blockly.Arduino.definitions_['bPED_flapping']='void bPED_flapping(int steps, int T, int angle, int dir)\n{\n  T=2000-map(T,0,100,500,1500);\n  angle=map(angle,0,100,10,20);\n  int flapping_A[4]= {20, 20, angle,angle};\n  int flapping_O[4] = {0, 0,angle - 40, -angle + 40};\n  double flapping_P[4] = {DEG2RAD(0), DEG2RAD(180), DEG2RAD(-90 * dir), DEG2RAD(90 * dir)};\n  bPED_execute(flapping_A,flapping_O,T,flapping_P,steps);\n}\n';
					code+='bPED_flapping(2,50,50,1);\n';
				}
				else if (movement==='20')
				{
					Blockly.Arduino.definitions_['bPED_flapping']='void bPED_flapping(int steps, int T, int angle, int dir)\n{\n  T=2000-map(T,0,100,500,1500);\n  angle=map(angle,0,100,10,20);\n  int flapping_A[4]= {20, 20, angle,angle};\n  int flapping_O[4] = {0, 0,angle - 40, -angle + 40};\n  double flapping_P[4] = {DEG2RAD(0), DEG2RAD(180), DEG2RAD(-90 * dir), DEG2RAD(90 * dir)};\n  bPED_execute(flapping_A,flapping_O,T,flapping_P,steps);\n}\n';
					code+='bPED_flapping(2,50,50,-1);\n';
				}
				return code;
			}

			Blockly.Blocks['HIPPIE_movement'] = {
				category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WALK'),
				tags: [],
				helpUrl: Facilino.getHelpUrl('HIPPIE_movement'),
				examples: [],
				category_colour: Facilino.LANG_COLOUR_MOVEMENT,
				colour: Facilino.LANG_COLOUR_MOVEMENT_WALK,
				keys: ['LANG_HIPPIE_MOVEMENT_HOME','LANG_HIPPIE_MOVEMENT_DROOP','LANG_HIPPIE_MOVEMENT_WALK','LANG_HIPPIE_MOVEMENT_TURN','LANG_HIPPIE_MOVEMENT_BEND','LANG_HIPPIE_MOVEMENT_SHAKE_LEG','LANG_HIPPIE_MOVEMENT_UPDOWN','LANG_HIPPIE_MOVEMENT_SWING','LANG_HIPPIE_MOVEMENT_TIPTOE_SWING','LANG_HIPPIE_MOVEMENT_JITTER','LANG_HIPPIE_MOVEMENT_EXCITED','LANG_HIPPIE_MOVEMENT_MOONWALKER','LANG_HIPPIE_MOVEMENT_CRUSAITO','LANG_HIPPIE_MOVEMENT_FLAPPING','LANG_HIPPIE_MOVEMENT','LANG_HIPPIE_MOVEMENT_MOVEMENT','LANG_HIPPIE_MOVEMENT_TOOLTIP','LANG_HIPPIE_MOVEMENT_FORWARD','LANG_HIPPIE_MOVEMENT_BACKWARD','LANG_HIPPIE_MOVEMENT_LEFT','LANG_HIPPIE_MOVEMENT_RIGHT'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_MOVEMENT_WALK);
					var movement = new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_HOME'),'0'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_DROOP'),'1'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_WALK')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FORWARD'),'2'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_WALK')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BACKWARD'),'3'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TURN')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'4'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TURN')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'5'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BEND')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'6'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BEND')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'7'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SHAKE_LEG')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'8'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SHAKE_LEG')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'9'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_UPDOWN'),'10'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SWING'),'11'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TIPTOE_SWING'),'12'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_JITTER'),'13'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_EXCITED'),'14'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOONWALKER')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'15'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOONWALKER')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'16'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_CRUSAITO')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'17'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_CRUSAITO')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'18'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FLAPPING')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FORWARD'),'19'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FLAPPING')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BACKWARD'),'20']
					]);
				this.appendDummyInput().appendField(new Blockly.FieldImage('img/blocks/hippie.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT'));
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOVEMENT')).appendField(movement,'MOVEMENT').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
				this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TOOLTIP'));
				}
			};
			
			Blockly.Arduino['HIPPIE_adv_movement'] = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code='';
				var movement = this.getFieldValue('MOVEMENT');
				Blockly.Arduino.definitions_['bPED_moveServos']='void bPED_moveServos(int T, int  servo_target[]) {\n  unsigned long partial_time;\n  unsigned long final_time;\n  double increment[4];\n  double Ts=30.0;\n  double N=(T/Ts);\n  for (int i = 0; i < 4; i++){ \n    increment[i] = ((servo_target[i]) - _bPED_servo_positions[i])/N;\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  if(T>10){\n    for (int x=1;x<=(int)N;x++)\n    {\n      for (int i = 0; i < 4; i++) _bPED_servos[i]->write(_bPED_servo_positions[i] + (x*increment[i])+_bPED_servo_offsets[i]);\n      delay((int)Ts);\n    }\n  }\n  else\n  {\n     for (int i = 0; i < 4; i++) _bPED_servos[i]->write(servo_target[i]+_bPED_servo_offsets[i]);\n     delay((int)Ts);\n  }\n  for (int i = 0; i < 4; i++) _bPED_servo_positions[i] = servo_target[i];\n}\n';
				Blockly.Arduino.definitions_['bPED_oscillateServos']='void bPED_oscillateServos(int A[], int O[], int T, double P[], float cycle){\n  double pos;\n  double Ts=30.0;\n  double N=(T*cycle/Ts);\n  double inc = 6.283185307179586476925286766559/N;\n  double phase=0;\nfor (int i = 0; i < 4; i++){\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  for (int x=0;x<=(int)N;x++){\n    for (int i=0; i<4; i++) {\n      pos = round(A[i]*sin(phase + P[i]) + O[i]);\n      _bPED_servo_positions[i]=(int)(pos+90);\n      _bPED_servos[i]->write(_bPED_servo_positions[i]+_bPED_servo_offsets[i]);\n    }\n    phase=phase+inc;\n    delay((int)Ts);\n  }\n}\n';
				Blockly.Arduino.definitions_['bPED_execute']='void bPED_execute(int A[], int O[], int T, double P[], int steps)\n{\n  float cycles=steps;\n  if (cycles >= 1)\n    for(int i = 0; i < cycles; i++)\n      bPED_oscillateServos(A,O,T/steps,P,cycles+0.5);\n  bPED_home(T);\n}\n';
				Blockly.Arduino.definitions_['bPED_home']='void bPED_home(int T)\n{\n  int home[4]={90,90,90,90};\n  bPED_moveServos(T,home);\n  for (int i = 0; i < 4; i++){if (_bPED_servos[i]->attached()) {_bPED_servos[i]->detach();}}\n}\n';
				//console.log(movement);
				if (movement==='2')
				{
					Blockly.Arduino.definitions_['bPED_walk']='void bPED_walk(int steps, int T, int dir)\n{\n  T=1500-map(T,0,100,300,1200);\n  int walk_A[4]= {15, 15, 50, 50};\n  int walk_O[4] = {0, 0, -10, 10};\n  double walk_P[4] = {0, 0, dir*DEG2RAD(-90), dir*DEG2RAD(-90)};\n  bPED_execute(walk_A,walk_O,T*steps,walk_P,steps);\n}\n';
					code+='bPED_walk('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '2')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='3')
				{
					Blockly.Arduino.definitions_['bPED_walk']='void bPED_walk(int steps, int T, int dir)\n{\n  T=1500-map(T,0,100,300,1200);\n  int walk_A[4]= {15, 15, 50, 50};\n  int walk_O[4] = {0, 0, -10, 10};\n  double walk_P[4] = {0, 0, dir*DEG2RAD(-90), dir*DEG2RAD(-90)};\n  bPED_execute(walk_A,walk_O,T*steps,walk_P,steps);\n}\n';
					code+='bPED_walk('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '4')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				else if (movement==='4')
				{
					Blockly.Arduino.definitions_['bPED_turn']='void bPED_turn(int steps, int T, int dir)\n{\n  T=1200-map(T,0,100,300,900);\n  int turn_A[4]= {15-dir*10, 15+dir*10, 50, 50};\n  int turn_O[4] = {0, 0, -10, 10};\n  double turn_P[4] = {0, 0, DEG2RAD(-90), DEG2RAD(-90)};\n  bPED_execute(turn_A,turn_O, T*steps,turn_P,steps);\n}\n';
					code+='bPED_turn('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '2')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='5')
				{
					Blockly.Arduino.definitions_['bPED_turn']='void bPED_turn(int steps, int T, int dir)\n{\n  T=1200-map(T,0,100,300,900);\n  int turn_A[4]= {15-dir*10, 15+dir*10, 50, 50};\n  int turn_O[4] = {0, 0, -10, 10};\n  double turn_P[4] = {0, 0, DEG2RAD(-90), DEG2RAD(-90)};\n  bPED_execute(turn_A,turn_O, T*steps,turn_P,steps);\n}\n';
					code+='bPED_turn('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '2')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				else if (movement==='6')
				{
					Blockly.Arduino.definitions_['bPED_bend']='void bPED_bend(int steps, int T, int dir){\n  T=2400-map(T,0,100,600,1800);\n  int bend[4]={90, 90, 90, 145};\n  int T2=T-300;\n  if(dir==-1){\n    bend[2]=35;\n    bend[3]=90;\n  }\n  if (T>=300){\n    int T2=T-300;\n    for (int i=0;i<steps;i++)\n    {\n      bPED_moveServos(T2/2,bend);\n      delay(T2/2);\n      bPED_home(300);\n    }\n  }\n}\n';
					code+='bPED_bend('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='7')
				{
					Blockly.Arduino.definitions_['bPED_bend']='void bPED_bend(int steps, int T, int dir){\n  T=2400-map(T,0,100,600,1800);\n  int bend[4]={90, 90, 90, 145};\n  int T2=T-300;\n  if(dir==-1){\n    bend[2]=35;\n    bend[3]=90;\n  }\n  if (T>=300){\n    int T2=T-300;\n    for (int i=0;i<steps;i++)\n    {\n      bPED_moveServos(T2/2,bend);\n      delay(T2/2);\n      bPED_home(300);\n    }\n  }\n}\n';
					code+='bPED_bend('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				else if (movement==='8')
				{
					Blockly.Arduino.definitions_['bPED_shakeLeg']='void bPED_shakeLeg(int steps,int T,int dir){\n  T=4600-map(T,0,100,600,4000);\n  int numberLegMoves=4;\n  int shake_leg0[4]={90, 90, 90, 140};\n  int shake_leg01[4]={90, 90, 150, 140};\n  int shake_leg1[4]={90, 90, 150, 40};\n  int shake_leg2[4]={90, 90, 150, 140};\n  int shake_leg3[4]={90, 90, 150, 40};\n  if(dir==-1)\n  {\nshake_leg0[2]=40;\n    shake_leg0[3]=90;\n    shake_leg01[2]=40;\n    shake_leg01[3]=50;\n    shake_leg1[2]=40;\n    shake_leg1[3]=50;\n    shake_leg2[2]=140;\n    shake_leg2[3]=50;\n    shake_leg3[2]=40;\n    shake_leg3[3]=50;\n  }\n  int T2=1000;\n  T=T-T2;\n  T=max(T,200*numberLegMoves);\n  for (int j=0; j<steps;j++)\n  {\n    bPED_moveServos(T2/2,shake_leg0);\n    bPED_moveServos(T2/2,shake_leg01);\n    bPED_moveServos(T2/2,shake_leg1);\n    bPED_moveServos(T2/2,shake_leg2);\n    for (int i=0;i<numberLegMoves;i++)\n    {\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg3);\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg2);\n    }\n    bPED_home(300);\n  }\n  delay(T);\n}\n';
					code+='bPED_shakeLeg('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='9')
				{
					Blockly.Arduino.definitions_['bPED_shakeLeg']='void bPED_shakeLeg(int steps,int T,int dir){\n  T=4600-map(T,0,100,600,4000);\n  int numberLegMoves=4;\n  int shake_leg0[4]={90, 90, 90, 140};\n  int shake_leg01[4]={90, 90, 150, 140};\n  int shake_leg1[4]={90, 90, 150, 40};\n  int shake_leg2[4]={90, 90, 150, 140};\n  int shake_leg3[4]={90, 90, 150, 40};\n  if(dir==-1)\n  {\nshake_leg0[2]=40;\n    shake_leg0[3]=90;\n    shake_leg01[2]=40;\n    shake_leg01[3]=50;\n    shake_leg1[2]=40;\n    shake_leg1[3]=50;\n    shake_leg2[2]=140;\n    shake_leg2[3]=50;\n    shake_leg3[2]=40;\n    shake_leg3[3]=50;\n  }\n  int T2=1000;\n  T=T-T2;\n  T=max(T,200*numberLegMoves);\n  for (int j=0; j<steps;j++)\n  {\n    bPED_moveServos(T2/2,shake_leg0);\n    bPED_moveServos(T2/2,shake_leg01);\n    bPED_moveServos(T2/2,shake_leg1);\n    bPED_moveServos(T2/2,shake_leg2);\n    for (int i=0;i<numberLegMoves;i++)\n    {\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg3);\n    bPED_moveServos(T/(2*numberLegMoves),shake_leg2);\n    }\n    bPED_home(300);\n  }\n  delay(T);\n}\n';
					code+='bPED_shakeLeg('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				return code;
			}

			Blockly.Blocks['HIPPIE_adv_movement'] = {
				category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WALK'),
				tags: [],
				helpUrl: Facilino.getHelpUrl('HIPPIE_adv_movement'),
				examples: [],
				category_colour: Facilino.LANG_COLOUR_MOVEMENT,
				colour: Facilino.LANG_COLOUR_MOVEMENT_WALK,
				keys: ['LANG_HIPPIE_MOVEMENT_WALK','LANG_HIPPIE_MOVEMENT_TURN','LANG_HIPPIE_MOVEMENT_BEND','LANG_HIPPIE_MOVEMENT_SHAKE_LEG','LANG_HIPPIE_MOVEMENT','LANG_HIPPIE_MOVEMENT_MOVEMENT','LANG_HIPPIE_ADV_MOVEMENT_TOOLTIP','LANG_HIPPIE_MOVEMENT_STEPS','LANG_HIPPIE_MOVEMENT_SPEED','LANG_HIPPIE_MOVEMENT_FORWARD','LANG_HIPPIE_MOVEMENT_BACKWARD','LANG_HIPPIE_MOVEMENT_LEFT','LANG_HIPPIE_MOVEMENT_RIGHT'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_MOVEMENT_WALK);
					var movement = new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_WALK')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FORWARD'),'2'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_WALK')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BACKWARD'),'3'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TURN')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'4'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TURN')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'5'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BEND')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'6'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BEND')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'7'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SHAKE_LEG')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'8'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SHAKE_LEG')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'9']
					]);
				this.appendDummyInput().appendField(new Blockly.FieldImage('img/blocks/hippie.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT'));
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOVEMENT')).appendField(movement,'MOVEMENT').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_STEPS'),'TEXT1').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SPEED')+ ' [0~100%]','TEXT2').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setTooltip(Facilino.locales.getKey('LANG_HIPPIE_ADV_MOVEMENT_TOOLTIP'));
				}
			};
			
			Blockly.Arduino['HIPPIE_adv_movement2'] = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code='';
				var movement = this.getFieldValue('MOVEMENT');
				Blockly.Arduino.definitions_['bPED_moveServos']='void bPED_moveServos(int T, int  servo_target[]) {\n  unsigned long partial_time;\n  unsigned long final_time;\n  double increment[4];\n  double Ts=30.0;\n  double N=(T/Ts);\n  for (int i = 0; i < 4; i++){ \n    increment[i] = ((servo_target[i]) - _bPED_servo_positions[i])/N;\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  if(T>10){\n    for (int x=1;x<=(int)N;x++)\n    {\n      for (int i = 0; i < 4; i++) _bPED_servos[i]->write(_bPED_servo_positions[i] + (x*increment[i])+_bPED_servo_offsets[i]);\n      delay((int)Ts);\n    }\n  }\n  else\n  {\n     for (int i = 0; i < 4; i++) _bPED_servos[i]->write(servo_target[i]+_bPED_servo_offsets[i]);\n     delay((int)Ts);\n  }\n  for (int i = 0; i < 4; i++) _bPED_servo_positions[i] = servo_target[i];\n}\n';
				Blockly.Arduino.definitions_['bPED_oscillateServos']='void bPED_oscillateServos(int A[], int O[], int T, double P[], float cycle){\n  double pos;\n  double Ts=30.0;\n  double N=(T*cycle/Ts);\n  double inc = 6.283185307179586476925286766559/N;\n  double phase=0;\nfor (int i = 0; i < 4; i++){\n    if (!_bPED_servos[i]->attached())\n      _bPED_servos[i]->attach(_bPED_servo_pins[i]);\n  }\n  for (int x=0;x<=(int)N;x++){\n    for (int i=0; i<4; i++) {\n      pos = round(A[i]*sin(phase + P[i]) + O[i]);\n      _bPED_servo_positions[i]=(int)(pos+90);\n      _bPED_servos[i]->write(_bPED_servo_positions[i]+_bPED_servo_offsets[i]);\n    }\n    phase=phase+inc;\n    delay((int)Ts);\n  }\n}\n';
				Blockly.Arduino.definitions_['bPED_execute']='void bPED_execute(int A[], int O[], int T, double P[], int steps)\n{\n  float cycles=steps;\n  if (cycles >= 1)\n    for(int i = 0; i < cycles; i++)\n      bPED_oscillateServos(A,O,T/steps,P,cycles+0.5);\n  bPED_home(T);\n}\n';
				Blockly.Arduino.definitions_['bPED_home']='void bPED_home(int T)\n{\n  int home[4]={90,90,90,90};\n  bPED_moveServos(T,home);\n  for (int i = 0; i < 4; i++){if (_bPED_servos[i]->attached()) {_bPED_servos[i]->detach();}}\n}\n';
				if (movement==='10')
				{
					Blockly.Arduino.definitions_['bPED_up_down']='void bPED_up_down(int steps, int T, int height)\n{\n  T=1600-map(T,0,100,600,1000);\n  int angle=map(height,0,100,25,65);\n  int up_down[4]= {90, 90, 90-angle, 90+angle};\n  if (T>=400){\n    int T2=T-300;\n    for (int i=0;i<steps;i++)\n    {\n      bPED_moveServos(T2/2,up_down);\n      delay(T2/2);\n      bPED_home(300);\n    }\n  }\n}\n';
					code+='bPED_up_down('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+');\n';
				}
				else if (movement==='11')
				{
					Blockly.Arduino.definitions_['bPED_swing']='void bPED_swing(int steps, int T, int angle)\n{\n  T=1600-map(T,0,100,600,1000);\n  angle=map(angle,0,100,15,45);\n  int swing_A[4]= {0, 0, angle, angle};\n  int swing_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  double swing_P[4] = {0, 0, DEG2RAD(0), DEG2RAD(0)};\n  bPED_execute(swing_A,swing_O,T,swing_P,steps);\n}\n';
					code+='bPED_swing('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+');\n';
				}
				else if (movement==='12')
				{
					Blockly.Arduino.definitions_['bPED_tiptoeSwing']='void bPED_tiptoeSwing(int steps, int T, int angle)\n{\n  T=1500-map(T,0,100,300,1200);\n  angle=map(angle,0,100,10,30);\n  int tiptoeSwing_A[4]= {angle, angle, 0, 0};\n  int tiptoeSwing_O[4] = {0, 0,0,0};\n  double tiptoeSwing_P[4] = {0, 0, 0, 0};\n  bPED_execute(tiptoeSwing_A,tiptoeSwing_O,T,tiptoeSwing_P,steps);\n}\n';
					code+='bPED_tiptoeSwing('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+');\n';
				}
				else if (movement==='13')
				{
					Blockly.Arduino.definitions_['bPED_jitter']='void bPED_jitter(int steps, int T, int angle)\n{\n  T=400-map(T,0,100,100,300);\n  angle=map(angle,0,100,10,30);\n  int jitter_A[4]= {angle, angle, 0, 0};\n  int jitter_O[4] = {0, 0, 0, 0};\n  double jitter_P[4] = {DEG2RAD(-90), DEG2RAD(90), 0, 0};\n  bPED_execute(jitter_A,jitter_O,T,jitter_P,steps);\n  delay(T);\n}\n';
					code+='bPED_jitter('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+');\n';
				}
				else if (movement==='14')
				{
					Blockly.Arduino.definitions_['bPED_excited']='void bPED_excited(int steps, int T, int angle)\n{\n  T=1600-map(T,0,100,400,1200);\n  angle=map(angle,0,100,5,20);\n  int excited_A[4]= {angle, angle, angle, angle};\n  int excited_O[4] = {0, 0, angle-40, -angle+40};\n  double excited_P[4] = {DEG2RAD(-90), DEG2RAD(90), DEG2RAD(-90), DEG2RAD(90)};\n  bPED_execute(excited_A,excited_O,T,excited_P,steps);\n}\n';
					code+='bPED_excited('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+');\n';
				}
				else if (movement==='15')
				{
					Blockly.Arduino.definitions_['bPED_moonwalker']='void bPED_moonwalker(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,15,30);\n  int moonwalker_A[4]= {0, 0, angle, angle};\n  int moonwalker_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  int phi = -dir * 90;\n  double moonwalker_P[4] = {0, 0, DEG2RAD(phi), DEG2RAD(-60 * dir + phi)};\n  bPED_execute(moonwalker_A,moonwalker_O,T,moonwalker_P,steps);\n}\n';
					code+='bPED_moonwalker('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='16')
				{
					Blockly.Arduino.definitions_['bPED_moonwalker']='void bPED_moonwalker(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,15,30);\n  int moonwalker_A[4]= {0, 0, angle, angle};\n  int moonwalker_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  int phi = -dir * 90;\n  double moonwalker_P[4] = {0, 0, DEG2RAD(phi), DEG2RAD(-60 * dir + phi)};\n  bPED_execute(moonwalker_A,moonwalker_O,T,moonwalker_P,steps);\n}\n';
					code+='bPED_moonwalker('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				else if (movement==='17')
				{
					Blockly.Arduino.definitions_['bPED_crusaito']='void bPED_crusaito(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,5,30);\n  int crusaito_A[4]= {25, 25, angle+10, angle+10};\n  int crusaito_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  double crusaito_P[4] = {90, 90, DEG2RAD(0), DEG2RAD(-60 * dir)};\n  bPED_execute(crusaito_A,crusaito_O,T,crusaito_P,steps);\n}\n';
					code+='bPED_crusaito('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='18')
				{
					Blockly.Arduino.definitions_['bPED_crusaito']='void bPED_crusaito(int steps, int T, int angle, int dir)\n{\n  T=1800-map(T,0,100,600,1200);\n  angle=map(angle,0,100,5,30);\n  int crusaito_A[4]= {25, 25, angle+10, angle+10};\n  int crusaito_O[4] = {0, 0, angle/2-20, -angle/2+20};\n  double crusaito_P[4] = {90, 90, DEG2RAD(0), DEG2RAD(-60 * dir)};\n  bPED_execute(crusaito_A,crusaito_O,T,crusaito_P,steps);\n}\n';
					code+='bPED_crusaito('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				else if (movement==='19')
				{
					Blockly.Arduino.definitions_['bPED_flapping']='void bPED_flapping(int steps, int T, int angle, int dir)\n{\n  T=2000-map(T,0,100,500,1500);\n  angle=map(angle,0,100,10,20);\n  int flapping_A[4]= {20, 20, angle,angle};\n  int flapping_O[4] = {0, 0,angle - 40, -angle + 40};\n  double flapping_P[4] = {DEG2RAD(0), DEG2RAD(180), DEG2RAD(-90 * dir), DEG2RAD(90 * dir)};\n  bPED_execute(flapping_A,flapping_O,T,flapping_P,steps);\n}\n';
					code+='bPED_flapping('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+',1);\n';
				}
				else if (movement==='20')
				{
					Blockly.Arduino.definitions_['bPED_flapping']='void bPED_flapping(int steps, int T, int angle, int dir)\n{\n  T=2000-map(T,0,100,500,1500);\n  angle=map(angle,0,100,10,20);\n  int flapping_A[4]= {20, 20, angle,angle};\n  int flapping_O[4] = {0, 0,angle - 40, -angle + 40};\n  double flapping_P[4] = {DEG2RAD(0), DEG2RAD(180), DEG2RAD(-90 * dir), DEG2RAD(90 * dir)};\n  bPED_execute(flapping_A,flapping_O,T,flapping_P,steps);\n}\n';
					code+='bPED_flapping('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '50')+','+(Blockly.Arduino.valueToCode(this, 'INP3', Blockly.Arduino.ORDER_ATOMIC) || '50')+',-1);\n';
				}
				return code;
			}

			Blockly.Blocks['HIPPIE_adv_movement2'] = {
				category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WALK'),
				tags: [],
				helpUrl: Facilino.getHelpUrl('HIPPIE_adv_movement2'),
				examples: [],
				category_colour: Facilino.LANG_COLOUR_MOVEMENT,
				colour: Facilino.LANG_COLOUR_MOVEMENT_WALK,
				keys: ['LANG_HIPPIE_MOVEMENT_UPDOWN','LANG_HIPPIE_MOVEMENT_SWING','LANG_HIPPIE_MOVEMENT_TIPTOE_SWING','LANG_HIPPIE_MOVEMENT_JITTER','LANG_HIPPIE_MOVEMENT_EXCITED','LANG_HIPPIE_MOVEMENT_MOONWALKER','LANG_HIPPIE_MOVEMENT_CRUSAITO','LANG_HIPPIE_MOVEMENT_FLAPPING','LANG_HIPPIE_MOVEMENT','LANG_HIPPIE_MOVEMENT_MOVEMENT','LANG_HIPPIE_ADV_MOVEMENT_TOOLTIP','LANG_HIPPIE_MOVEMENT_STEPS','LANG_HIPPIE_MOVEMENT_SPEED','LANG_HIPPIE_MOVEMENT_FORWARD','LANG_HIPPIE_MOVEMENT_BACKWARD','LANG_HIPPIE_MOVEMENT_LEFT','LANG_HIPPIE_MOVEMENT_RIGHT','LANG_HIPPIE_MOVEMENT_CONF'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_MOVEMENT_WALK);
					var movement = new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_UPDOWN'),'10'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SWING'),'11'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_TIPTOE_SWING'),'12'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_JITTER'),'13'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_EXCITED'),'14'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOONWALKER')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'15'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOONWALKER')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'16'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_CRUSAITO')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_LEFT'),'17'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_CRUSAITO')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_RIGHT'),'18'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FLAPPING')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FORWARD'),'19'],
					[Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_FLAPPING')+' '+Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_BACKWARD'),'20']
					]);
				this.appendDummyInput().appendField(new Blockly.FieldImage('img/blocks/hippie.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT'));
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_MOVEMENT')).appendField(movement,'MOVEMENT').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_STEPS'),'TEXT1').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_SPEED')+ ' [0~100%]','TEXT2').setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('INP3').setCheck(Number).appendField(Facilino.locales.getKey('LANG_HIPPIE_MOVEMENT_CONF')+ ' [0~100%]','TEXT2').setAlign(Blockly.ALIGN_RIGHT);
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setOutput(false);
				this.setTooltip(Facilino.locales.getKey('LANG_HIPPIE_ADV_MOVEMENT_TOOLTIP'));
				}
			};
						
			Blockly.Blocks['LARS_init'] = {
				category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WALK'),
				category_colour: Facilino.LANG_COLOUR_MOVEMENT,
				colour: Facilino.LANG_COLOUR_MOVEMENT_WALK,
				helpUrl: Facilino.getHelpUrl('LARS_init'),
				tags: [],
				examples: [],
				keys: ['LANG_MOVEMENT_LARS_ROBOT','LANG_MOVEMENT_LARS_FRH','LANG_MOVEMENT_LARS_BRH','LANG_MOVEMENT_LARS_BLH','LANG_MOVEMENT_LARS_FLH','LANG_MOVEMENT_LARS_FRL','LANG_MOVEMENT_LARS_BRL','LANG_MOVEMENT_LARS_BLL','LANG_MOVEMENT_LARS_FLL','LANG_LARS_INIT_TOOLTIP'],
				init: function () {
					this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/LARS.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_ROBOT'));
					this.appendValueInput('FRH').appendField(new Blockly.FieldImage('img/blocks/LARS_FRH.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_FRH')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('BRH').appendField(new Blockly.FieldImage('img/blocks/LARS_BRH.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_BRH')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('BLH').appendField(new Blockly.FieldImage('img/blocks/LARS_BLH.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_BLH')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('FLH').appendField(new Blockly.FieldImage('img/blocks/LARS_FLH.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_FLH')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('FRL').appendField(new Blockly.FieldImage('img/blocks/LARS_FRL.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_FRL')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('BRL').appendField(new Blockly.FieldImage('img/blocks/LARS_BRL.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_BRL')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('BLL').appendField(new Blockly.FieldImage('img/blocks/LARS_BLL.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_BLL')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.appendValueInput('FLL').appendField(new Blockly.FieldImage('img/blocks/LARS_FLL.svg', 20*options.zoom, 20*options.zoom)).appendField(Facilino.locales.getKey('LANG_MOVEMENT_LARS_FLL')).appendField(new Blockly.FieldImage('img/blocks/pwm_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
					this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
					this.setColour(Facilino.LANG_COLOUR_MOVEMENT_WALK);
					this.setTooltip(Facilino.locales.getKey('LANG_LARS_INIT_TOOLTIP'));
				}
			};
			
			Blockly.Arduino['LARS_init'] = function(block) {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			  var code='';
			  var input_FRH = Blockly.Arduino.valueToCode(this,'FRH',Blockly.Arduino.ORDER_ATOMIC) || '26';
			  var input_FLH = Blockly.Arduino.valueToCode(this,'FLH',Blockly.Arduino.ORDER_ATOMIC) || '25';
			  var input_BRH = Blockly.Arduino.valueToCode(this,'BRH',Blockly.Arduino.ORDER_ATOMIC) || '17';
			  var input_BLH = Blockly.Arduino.valueToCode(this,'BLH',Blockly.Arduino.ORDER_ATOMIC) || '16';
			  var input_FRL = Blockly.Arduino.valueToCode(this,'FRL',Blockly.Arduino.ORDER_ATOMIC) || '27';
			  var input_FLL = Blockly.Arduino.valueToCode(this,'FLL',Blockly.Arduino.ORDER_ATOMIC) || '5';
			  var input_BRL = Blockly.Arduino.valueToCode(this,'BRL',Blockly.Arduino.ORDER_ATOMIC) || '23';
			  var input_BLL = Blockly.Arduino.valueToCode(this,'BLL',Blockly.Arduino.ORDER_ATOMIC) || '13';
			  Blockly.Arduino.definitions_['define_lars_h'] = '#include <LARS.h>';
			  Blockly.Arduino.definitions_['declare_var_define_lars']='LARS lars;\n';
			  Blockly.Arduino.setups_['setup_lars_init'] = 'lars.init('+input_FRH+','+input_FLH+','+input_BRH+','+input_BLH+','+input_FRL+','+input_FLL+','+input_BRL+','+input_BLL+');\n';
			  return code;
			};
			
			Blockly.Arduino['LARS_movement'] = function() {
				if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
				var code='';
				var movement = this.getFieldValue('MOVEMENT');
				if (movement==='0')
					code+='lars.home();\n';
				else if (movement==='1')
					code+='lars.hello();\n';
				else if (movement==='2')
					code+='lars.wave('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+');\n';
				else if (movement==='3')
					code+='lars.turnL('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '600')+');\n';
				else if (movement==='4')
					code+='lars.turnR('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '600')+');\n';
				else if (movement==='5')
					code+='lars.moonwalk('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '5000')+');\n';
				else if (movement==='6')
					code+='lars.dance('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '600')+');\n';
				else if (movement==='7')
					code+='lars.upDown('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '5000')+');\n';
				else if (movement==='8')
					code+='lars.pushUp('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '600')+');\n';
				else if (movement==='9')
					code+='lars.walk('+this.getFieldValue('FIELD3')+','+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '800')+');\n';
				else if (movement==='10')
					code+='lars.omniWalk('+(Blockly.Arduino.valueToCode(this, 'INP1', Blockly.Arduino.ORDER_ATOMIC) || '1')+','+(Blockly.Arduino.valueToCode(this, 'INP2', Blockly.Arduino.ORDER_ATOMIC) || '800')+','+this.getFieldValue('FIELD3')+','+(Blockly.Arduino.valueToCode(this, 'INP4', Blockly.Arduino.ORDER_ATOMIC) || '0')+');\n';
				return code;
			}

			Blockly.Blocks['LARS_movement'] = {
				category: Facilino.locales.getKey('LANG_CATEGORY_MOVEMENT'),
				subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_WALK'),
				tags: [],
				helpUrl: Facilino.getHelpUrl('LARS_movement'),
				examples: [],
				category_colour: Facilino.LANG_COLOUR_MOVEMENT,
				colour: Facilino.LANG_COLOUR_MOVEMENT_WALK,
				keys: ['LANG_LARS_MOVEMENT_HOME','LANG_LARS_MOVEMENT_HELLO','LANG_LARS_MOVEMENT_WAVE','LANG_LARS_MOVEMENT_TURN_LEFT','LANG_LARS_MOVEMENT_TURN_RIGHT','LANG_LARS_MOVEMENT_MOONWALK','LANG_LARS_MOVEMENT_DANCE','LANG_LARS_MOVEMENT_UPDOWN','LANG_LARS_MOVEMENT_PUSHUP','LANG_LARS_MOVEMENT_WALK','LANG_LARS_MOVEMENT_OMNIWALK','LANG_LARS_MOVEMENT','LANG_LARS_MOVEMENT_MOVEMENT','LANG_LARS_MOVEMENT_TOOLTIP','LANG_LARS_MOVEMENT_LEG_NUMBER','LANG_LARS_MOVEMENT_STEPS','LANG_LARS_MOVEMENT_PERIOD','LANG_LARS_MOVEMENT_DIR','LANG_LARS_MOVEMENT_FORWARD','LANG_LARS_MOVEMENT_BACKWARD','LANG_LARS_MOVEMENT_YES','LANG_LARS_MOVEMENT_NO','LANG_LARS_MOVEMENT_SIDE','LANG_LARS_MOVEMENT_TURN_FACTOR'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_MOVEMENT_WALK);
					var movement = new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_HOME'),'0'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_HELLO'),'1'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_WAVE'),'2'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_TURN_LEFT'),'3'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_TURN_RIGHT'),'4'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_MOONWALK'),'5'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_DANCE'),'6'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_UPDOWN'),'7'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_PUSHUP'),'8'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_WALK'),'9'],
					[Facilino.locales.getKey('LANG_LARS_MOVEMENT_OMNIWALK'),'10']
					]);
				this.appendDummyInput().appendField(new Blockly.FieldImage('img/blocks/LARS.svg', 32*options.zoom, 32*options.zoom)).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT'));
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_MOVEMENT')).appendField(movement,'MOVEMENT').setAlign(Blockly.ALIGN_RIGHT);
				this.last_movement = -1;
				this._inp1_removed = true;
				this._inp2_removed = true;
				this._inp3_removed = true;
				this._inp4_removed = true;
				this.checkMovement();
				this.last_movement = this.getFieldValue('MOVEMENT');
				this.setInputsInline(false);
				this.setPreviousStatement(true,'code');
					this.setNextStatement(true,'code');
				this.setOutput(false);
					this.setTooltip(Facilino.locales.getKey('LANG_LARS_MOVEMENT_TOOLTIP'));
				},
				checkMovement: function() {
				var _movement = this.getFieldValue('MOVEMENT');
					try {
							if (_movement<10)
							{
								this._inp4_removed=true;
								this.removeInput('INP4');
							}
					} catch (e) {}
					try {
							if (_movement<9)
							{
								this._inp3_removed=true;
								this.removeInput('INP3');
							}
					} catch (e) {}
					try {
							if (_movement<3)
							{
								this._inp2_removed=true;
								this.removeInput('INP2');
							}
					} catch (e) {}
					try {
						if (_movement<2)
							{
								this._inp1_removed=true;
								this.removeInput('INP1');
							}
					} catch (e) {}	
					if ( _movement === '2') {
						if (this._inp1_removed)
						{
							this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_LEG_NUMBER'),'TEXT1').setAlign(Blockly.ALIGN_RIGHT);
							this._inp1_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_LEG_NUMBER'),'TEXT1');}catch (e) {}	
					} else if (( _movement >= '3')&&( _movement <= '8')) {
						if (this._inp1_removed)
						{
							this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_STEPS'),'TEXT1').setAlign(Blockly.ALIGN_RIGHT);
							this._inp1_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_STEPS'),'TEXT1');}catch (e) {}	
						if (this._inp2_removed)
						{
							this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_PERIOD','TEXT2')).setAlign(Blockly.ALIGN_RIGHT);
							this._inp2_removed=false;
						}
						else 
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_PERIOD'),'TEXT2');}catch (e) {}	
					} else if ( _movement === '9') {
						if (this._inp1_removed)
						{
							this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_STEPS'),'TEXT1').setAlign(Blockly.ALIGN_RIGHT);
							this._inp1_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_STEPS'),'TEXT1');}catch (e) {}
						if (this._inp2_removed)
						{
							this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_PERIOD'),'TEXT2').setAlign(Blockly.ALIGN_RIGHT);
							this._inp2_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_PERIOD'),'TEXT2');}catch (e) {}	
						if (this._inp3_removed)
						{
							this.appendDummyInput('INP3').appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_DIR'),'TEXT3').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_LARS_MOVEMENT_FORWARD'),'0'],[Facilino.locales.getKey('LANG_LARS_MOVEMENT_BACKWARD'),'1']]),'FIELD3').setAlign(Blockly.ALIGN_RIGHT);
							this._inp3_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_DIR'),'TEXT3'); this.getInput('INP3').removeField('FIELD3'); this.getInput('INP3').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_LARS_MOVEMENT_FORWARD'),'0'],[Facilino.locales.getKey('LANG_LARS_MOVEMENT_BACKWARD'),'1']]),'FIELD3');}catch (e) {}	
					}
					else if ( _movement === '10') {
						if (this._inp1_removed)
						{
							this.appendValueInput('INP1').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_STEPS'),'TEXT1').setAlign(Blockly.ALIGN_RIGHT);
							this._inp1_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_STEPS'),'TEXT1');}catch (e) {}
						if (this._inp2_removed)
						{
							this.appendValueInput('INP2').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_PERIOD'),'TEXT2').setAlign(Blockly.ALIGN_RIGHT);
							this._inp2_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_PERIOD'),'TEXT2');}catch (e) {}
						if (this._inp3_removed)
						{
							this.appendDummyInput('INP3').appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_DIR'),'TEXT3').appendField(new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_LARS_MOVEMENT_YES'),'true'],[Facilino.locales.getKey('LANG_LARS_MOVEMENT_NO'),'false']]),'FIELD3').setAlign(Blockly.ALIGN_RIGHT);
							this._inp3_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_SIDE'),'TEXT3'); this.getInput('INP3').removeField('FIELD3'); this.getInput('INP3').appendField(new Blockly.FieldDropdown([['Yes','true'],['No','false']]),'FIELD3');}catch (e) {}
						if (this._inp4_removed)
						{
							this.appendValueInput('INP4').setCheck(Number).appendField(Facilino.locales.getKey('LANG_LARS_MOVEMENT_TURN_FACTOR'),'TEXT4').setAlign(Blockly.ALIGN_RIGHT);
							this._inp4_removed=false;
						}
						else
							try{this.setFieldValue(Facilino.locales.getKey('LANG_LARS_MOVEMENT_TURN_FACTOR'),'TEXT4');}catch (e) {}
						
					}
				},
				onchange: function() {
					if (this.getFieldValue('MOVEMENT') !== this.last_movement) {
						this.checkMovement();
						this.last_movement = this.getFieldValue('MOVEMENT');
					}
				}
			};
			
			
			/*DEPRECATED*/
			Blockly.Arduino.dyor_predef_expression = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
            var cs_pin = Blockly.Arduino.valueToCode(this, 'CS_PIN', Blockly.Arduino.ORDER_ATOMIC);
            var din_pin = Blockly.Arduino.valueToCode(this, 'DIN_PIN', Blockly.Arduino.ORDER_ATOMIC);
			var clk_pin = Blockly.Arduino.valueToCode(this, 'CLK_PIN', Blockly.Arduino.ORDER_ATOMIC);
			var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
			var dropdown_expr = this.getFieldValue('EXPRESSION');
            var code = '';
            var a = Facilino.findPinMode(cs_pin);
            code += a['code'];
            cs_pin = a['pin'];

            a = Facilino.findPinMode(din_pin);
            code += a['code'];
            din_pin = a['pin'];

			a = Facilino.findPinMode(clk_pin);
            code += a['code'];
            clk_pin = a['pin'];

            Blockly.Arduino.definitions_['define_LEDMatrix_init'] = JST['dyor_definitions_LEDMatrix_init']({});
			Blockly.Arduino.definitions_['define_writeRow'] = JST['dyor_definitions_writeRow']({});
			Blockly.Arduino.definitions_['define_maxAll'] = JST['dyor_definitions_maxAll']({});
			Blockly.Arduino.definitions_['define_putByte'] = JST['dyor_definitions_putByte']({});
			Blockly.Arduino.definitions_['define_expression'] = JST['dyor_definitions_expression']({});
            if (Facilino.isVariable(cs_pin)) {
                code += JST['LED_matrix_setups_cs']({
                    'cs_pin': cs_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_cs_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_cs']({
                    'cs_pin': cs_pin
                });
            }
			if (Facilino.isVariable(din_pin)) {
                code += JST['LED_matrix_setups_din']({
                    'din_pin': din_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_din_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_din']({
                    'din_pin': din_pin
                });
            }
			if (Facilino.isVariable(clk_pin)) {
                code += JST['LED_matrix_setups_clk']({
                    'clk_pin': clk_pin
                });
            } else {
                Blockly.Arduino.setups_['setup_clk_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_clk']({
                    'clk_pin': clk_pin
                });
            }
			if (Facilino.isVariable(cs_pin)||Facilino.isVariable(din_pin)||Facilino.isVariable(clk_pin)){
				code += JST['LED_matrix_setups_LEDMatrix']({
                    'cs_pin' : cs_pin,
                    'din_pin' : din_pin,
                    'clk_pin': clk_pin
                });
			}
			else
			{
				Blockly.Arduino.setups_['setup_LEDMatrix_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_LEDMatrix']({
                    'cs_pin' : cs_pin,
                    'din_pin' : din_pin,
                    'clk_pin': clk_pin
                });
			}	

        if (dropdown_configuration=='V')
        {
         if (dropdown_expr==1)
			  code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '2,68,36,16,16,36,68,2' + ');\n';
            else if (dropdown_expr==2)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '12,24,48,48,48,48,24,12' + ');\n';
			else if (dropdown_expr==3)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '48,24,12,12,12,12,24,48' + ');\n';
			else if (dropdown_expr==4)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '12,30,62,124,124,62,30,12' + ');\n';
            else if (dropdown_expr==5)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,0,24,24,0,0,0' + ');\n';
        }
		else if (dropdown_configuration=='H')
        {
          if (dropdown_expr==1)
              code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,129,102,0,24,36,66,0' + ');\n';
            else if (dropdown_expr==2)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,129,195,126,60,0,0' + ');\n';
			else if (dropdown_expr==3)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,60,126,195,129,0,0' + ');\n';
            else if (dropdown_expr==4)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,102,255,255,126,60,24,0' + ');\n';
            else if (dropdown_expr==5)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,0,24,24,0,0,0' + ');\n';
		}
		else if (dropdown_configuration=='V1')
		{
			if (dropdown_expr==1)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '64,34,36,8,8,36,34,64' + ');\n';
            else if (dropdown_expr==2)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '48,24,12,12,12,12,24,48' + ');\n';
            else if (dropdown_expr==3)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '12,24,48,48,48,48,24,12' + ');\n';
            else if (dropdown_expr==4)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '48,120,124,62,62,124,120,48' + ');\n';
            else if (dropdown_expr==5)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,0,24,24,0,0,0' + ');\n';
		}
		else if (dropdown_configuration=='H1')
        {
          if (dropdown_expr==1)
              code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,66,36,24,0,102,129,0' + ');\n';
            else if (dropdown_expr==2)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,60,126,195,129,0,0' + ');\n';
			else if (dropdown_expr==3)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,129,195,126,60,0,0' + ');\n';
            else if (dropdown_expr==4)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,24,60,126,255,255,102,0' + ');\n';
            else if (dropdown_expr==5)
				code += 'expression('+
            ((__t = (cs_pin)) == null ? '' : __t) +
                    ',' +
                    ((__t = (din_pin)) == null ? '' : __t) +
            ',' +
            ((__t = (clk_pin)) == null ? '' : __t) +
            ',' + '0,0,0,24,24,0,0,0' + ');\n';
		}
            return code;
        };
    
        Blockly.Blocks.dyor_predef_expression = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_predef_expression'),
			examples: ['dyor_predef_expression_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_ANGRY','LANG_LED_MATRIX','LANG_LED_MATRIX_CS_PIN','LANG_LED_MATRIX_DIN_PIN','LANG_LED_MATRIX_CLK_PIN','LANG_LED_MATRIX_VERTICAL','LANG_LED_MATRIX_HORIZONTAL','LANG_LED_MATRIX_VERTICAL_180','LANG_LED_MATRIX_HORIZONTAL_180','LANG_LED_MATRIX_PREDEF_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
        var expr = new Blockly.FieldDropdown([[Facilino.locales.getKey('LANG_LED_MATRIX_ANGRY') || 'ANGRY', '1'],[Facilino.locales.getKey('LANG_LED_MATRIX_HAPPY') || 'HAPPY', '2'],[Facilino.locales.getKey('LANG_LED_MATRIX_SAD') || 'SAD', '3'],[Facilino.locales.getKey('LANG_LED_MATRIX_HEART') || 'HEART', '4'],[Facilino.locales.getKey('LANG_LED_MATRIX_STUNNED') || 'STUNNED', '5']]);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LED_MATRIX')).appendField(new Blockly.FieldImage('img/blocks/LED_matrix.svg', 57*options.zoom, 33*options.zoom));
        this.appendValueInput('CS_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('DIN_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_DIN_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('CLK_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CLK_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
        this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL'), 'V'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL'), 'H'],
			[Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL_180'), 'V1'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL_180'), 'H1'],
                ]), "CONFIGURATION").setAlign(Blockly.ALIGN_RIGHT);
	this.appendDummyInput('').appendField(expr, 'EXPRESSION').setAlign(Blockly.ALIGN_RIGHT);
        this.checkExpr();
        this.last_expr = this.getFieldValue('EXPRESSION');
        //this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/angry.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/happy.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/dissapointment.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/love.png', 20*options.zoom, 20*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/shocked.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);        
                this.setInputsInline(false);
	
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_PREDEF_TOOLTIP'));
            },
        checkExpr: function() {
        var _expr = this.getFieldValue('EXPRESSION');
                if ( _expr === '1') {
                    try {
                        this.removeInput('EXPR');
                    } catch (e) {}
                    this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/angry.png', 20*options.zoom, 20*options.zoom) ).setAlign(Blockly.ALIGN_RIGHT);
                } else if ( _expr === '2') {
                    try {
                        this.removeInput('EXPR');
                    } catch (e) {}
            this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/happy.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                } else if ( _expr === '3') {
                    try {
                        this.removeInput('EXPR');
                    } catch (e) {}
            this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/dissapointment.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                }
        else if ( _expr === '4') {
                    try {
                        this.removeInput('EXPR');
                    } catch (e) {}
            this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/love.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                }
        else if ( _expr === '5') {
                    try {
                        this.removeInput('EXPR');
                    } catch (e) {}
            this.appendDummyInput('EXPR').appendField(new Blockly.FieldImage('img/blocks/shocked.png', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                }
            },
            onchange: function() {
                if (this.getFieldValue('EXPRESSION') !== this.last_expr) {
                    this.checkExpr();
                    this.last_expr = this.getFieldValue('EXPRESSION');
                }
            }
        };
		
		Blockly.Arduino.dyor_generic_expression = function() {
		if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
		var cs_pin = Blockly.Arduino.valueToCode(this, 'CS_PIN', Blockly.Arduino.ORDER_ATOMIC);
		var din_pin = Blockly.Arduino.valueToCode(this, 'DIN_PIN', Blockly.Arduino.ORDER_ATOMIC);
		var clk_pin = Blockly.Arduino.valueToCode(this, 'CLK_PIN', Blockly.Arduino.ORDER_ATOMIC);
		var expr = Blockly.Arduino.valueToCode(this, 'EXPRESSION', Blockly.Arduino.ORDER_NONE);
	
		var code = '';
		var a = Facilino.findPinMode(cs_pin);
		code += a['code'];
		cs_pin = a['pin'];

		a = Facilino.findPinMode(din_pin);
		code += a['code'];
		din_pin = a['pin'];

		a = Facilino.findPinMode(clk_pin);
		code += a['code'];
		clk_pin = a['pin'];

		Blockly.Arduino.definitions_['define_LEDMatrix_init'] = JST['dyor_definitions_LEDMatrix_init']({});
		Blockly.Arduino.definitions_['define_writeRow'] = JST['dyor_definitions_writeRow']({});
		Blockly.Arduino.definitions_['define_maxAll'] = JST['dyor_definitions_maxAll']({});
		Blockly.Arduino.definitions_['define_putByte'] = JST['dyor_definitions_putByte']({});
		Blockly.Arduino.definitions_['define_expression'] = JST['dyor_definitions_expression']({});
		if (Facilino.isVariable(cs_pin)) {
			code += JST['LED_matrix_setups_cs']({
				'cs_pin': cs_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_cs_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_cs']({
				'cs_pin': cs_pin
			});
		}
		if (Facilino.isVariable(din_pin)) {
			code += JST['LED_matrix_setups_din']({
				'din_pin': din_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_din_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_din']({
				'din_pin': din_pin
			});
		}
		if (Facilino.isVariable(clk_pin)) {
			code += JST['LED_matrix_setups_clk']({
				'clk_pin': clk_pin
			});
		} else {
			Blockly.Arduino.setups_['setup_clk_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_clk']({
				'clk_pin': clk_pin
			});
		}
		if (Facilino.isVariable(cs_pin)||Facilino.isVariable(din_pin)||Facilino.isVariable(clk_pin)){
		code += JST['LED_matrix_setups_LEDMatrix']({
				'cs_pin' : cs_pin,
				'din_pin' : din_pin,
				'clk_pin': clk_pin
			});
		}
		else
		{
			Blockly.Arduino.setups_['setup_LEDMatrix_' + cs_pin + din_pin + clk_pin] = JST['dyor_setups_LEDMatrix']({
					'cs_pin' : cs_pin,
					'din_pin' : din_pin,
					'clk_pin': clk_pin
				});
		}

		code += 'expression('+
			((__t = (cs_pin)) == null ? '' : __t) +
					',' +
					((__t = (din_pin)) == null ? '' : __t) +
			',' +
			((__t = (clk_pin)) == null ? '' : __t) +
			',' + expr + ');\n';
		return code;
		};

    Blockly.Blocks.dyor_generic_expression = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_generic_expression'),
			examples: ['dyor_generic_expression_example.bly','dyor_generic_expression_icons_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX','LANG_LED_MATRIX_CS_PIN','LANG_LED_MATRIX_DIN_PIN','LANG_LED_MATRIX_CLK_PIN','LANG_LED_MATRIX_GENERIC_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_LED_MATRIX')).appendField(new Blockly.FieldImage('img/blocks/LED_matrix.svg', 57*options.zoom, 33*options.zoom));
                this.appendValueInput('CS_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CS_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('DIN_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_DIN_PIN')).appendField(new Blockly.FieldImage("img/blocks/digital_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('CLK_PIN').appendField(Facilino.locales.getKey('LANG_LED_MATRIX_CLK_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
				this.appendValueInput('EXPRESSION').appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 20*options.zoom, 20*options.zoom, "*")).setCheck('Expression').setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
        this.setPreviousStatement(true,'code');
            this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_GENERIC_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_drawing = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var code = '';
		var row1,row2,row3,row4,row5,row6,row7,row8;
		var col1,col2,col3,col4,col5,col6,col7,col8;
		var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
		
		row1 = parseInt(Blockly.Arduino.valueToCode(this,'ROW1', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row2 = parseInt(Blockly.Arduino.valueToCode(this,'ROW2', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row3 = parseInt(Blockly.Arduino.valueToCode(this,'ROW3', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row4 = parseInt(Blockly.Arduino.valueToCode(this,'ROW4', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row5 = parseInt(Blockly.Arduino.valueToCode(this,'ROW5', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row6 = parseInt(Blockly.Arduino.valueToCode(this,'ROW6', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row7 = parseInt(Blockly.Arduino.valueToCode(this,'ROW7', Blockly.Arduino.ORDER_ATOMIC) || '0' );
		row8 = parseInt(Blockly.Arduino.valueToCode(this,'ROW8', Blockly.Arduino.ORDER_ATOMIC) || '0' );        
		if (dropdown_configuration=='V') {
		  col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
		  col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
		  col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
		  col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
		  col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
		  col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
		  col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
		  col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
		  code += col1 + ',' + col2 + ','+ col3 + ','+ col4 + ','+ col5 + ','+ col6 + ','+ col7 + ','+ col8;
		}
		else if (dropdown_configuration=='H')
		{
		  code += row1 + ',' + row2 + ','+ row3 + ','+ row4 + ','+ row5 + ','+ row6 + ','+ row7 + ','+ row8;
		}
		else if (dropdown_configuration=='V1') {
		  col1 = ((row8%2)<1? 0 : 1) + ((row7%2)<1? 0 : 2) + ((row6%2)<1? 0 : 4) + ((row5%2)<1? 0 : 8) + ((row4%2)<1? 0 : 16) + ((row3%2)<1? 0 : 32) + ((row2%2)<1? 0 : 64) + ((row1%2)<1? 0 : 128);
		  col2 = ((row8%4)<2? 0 : 1) + ((row7%4)<2? 0 : 2) + ((row6%4)<2? 0 : 4) + ((row5%4)<2? 0 : 8) + ((row4%4)<2? 0 : 16) + ((row3%4)<2? 0 : 32) + ((row2%4)<2? 0 : 64) + ((row1%4)<2? 0 : 128);
		  col3 = ((row8%8)<4? 0 : 1) + ((row7%8)<4? 0 : 2) + ((row6%8)<4? 0 : 4) + ((row5%8)<4? 0 : 8) + ((row4%8)<4? 0 : 16) + ((row3%8)<4? 0 : 32) + ((row2%8)<4? 0 : 64) + ((row1%8)<4? 0 : 128);
		  col4 = ((row8%16)<8? 0 : 1) + ((row7%16)<8? 0 : 2) + ((row6%16)<8? 0 : 4) + ((row5%16)<8? 0 : 8) + ((row4%16)<8? 0 : 16) + ((row3%16)<8? 0 : 32) + ((row2%16)<8? 0 : 64) + ((row1%16)<8? 0 : 128);
		  col5 = ((row8%32)<16? 0 : 1) + ((row7%32)<16? 0 : 2) + ((row6%32)<16? 0 : 4) + ((row5%32)<16? 0 : 8) + ((row4%32)<16? 0 : 16) + ((row3%32)<16? 0 : 32) + ((row2%32)<16? 0 : 64) + ((row1%32)<16? 0 : 128);
		  col6 = ((row8%64)<32? 0 : 1) + ((row7%64)<32? 0 : 2) + ((row6%64)<32? 0 : 4) + ((row5%64)<32? 0 : 8) + ((row4%64)<32? 0 : 16) + ((row3%64)<32? 0 : 32) + ((row2%64)<32? 0 : 64) + ((row1%64)<32? 0 : 128);
		  col7 = ((row8%128)<64? 0 : 1) + ((row7%128)<64? 0 : 2) + ((row6%128)<64? 0 : 4) + ((row5%128)<64? 0 : 8) + ((row4%128)<64? 0 : 16) + ((row3%128)<64? 0 : 32) + ((row2%128)<64? 0 : 64) + ((row1%128)<64? 0 : 128);
		  col8 = (row8<128? 0 : 1) + (row7<128? 0 : 2) + (row6<128? 0 : 4) + (row5<128? 0 : 8) + (row4<128? 0 : 16) + (row3<128? 0 : 32) + (row2<128? 0 : 64) + (row1<128? 0 : 128);
		  code += col1 + ',' + col2 + ','+ col3 + ','+ col4 + ','+ col5 + ','+ col6 + ','+ col7 + ','+ col8;
		}
		else if (dropdown_configuration=='H1')
		{
		  code += row8 + ',' + row7 + ','+ row6 + ','+ row5 + ','+ row4 + ','+ row3 + ','+ row2 + ','+ row1;
		}
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    };

    Blockly.Blocks.dyor_drawing = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_drawing'),
			examples: ['dyor_generic_expression_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_VERTICAL','LANG_LED_MATRIX_HORIZONTAL','LANG_LED_MATRIX_VERTICAL_180','LANG_LED_MATRIX_HORIZONTAL_180','LANG_LED_MATRIX_DRAWING_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
        this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 20*options.zoom, 20*options.zoom, "*")).appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL'), 'V'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL'), 'H'] ,
			[Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL_180'), 'V1'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL_180'), 'H1'] 
                ]), "CONFIGURATION").setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('ROW1').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW2').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW3').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW4').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW5').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW6').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW7').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
        this.appendValueInput('ROW8').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom)).setCheck('Row').setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
        this.setOutput(true,'Expression');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TOOLTIP'));
            }
        };
		
		Blockly.Arduino.dyor_row = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var col1 = this.getFieldValue('COL1') || '#000000';
        var col2 = this.getFieldValue('COL2') || '#000000';
        var col3 = this.getFieldValue('COL3') || '#000000';
        var col4 = this.getFieldValue('COL4') || '#000000';
        var col5 = this.getFieldValue('COL5') || '#000000';
        var col6 = this.getFieldValue('COL6') || '#000000';
        var col7 = this.getFieldValue('COL7') || '#000000';
        var col8 = this.getFieldValue('COL8') || '#000000';
        var value = (col1 == '#000000' ? 0 : 1) + (col2 == '#000000' ? 0 : 2) + (col3 == '#000000' ? 0 : 4) + (col4 == '#000000' ? 0 : 8) +(col5 == '#000000' ? 0 : 16) + (col6 == '#000000' ? 0 : 32) + (col7 == '#000000' ? 0 : 64) + (col8 == '#000000' ? 0 : 128);
        return [value.toString(), Blockly.Arduino.ORDER_ATOMIC];
    };
	
	Blockly.Arduino.dyor_drawing_icons = function() {
    if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version';
        var str = this.getFieldValue('ICON');
		var dropdown_configuration = this.getFieldValue('CONFIGURATION') || '';
		var row1,row2,row3,row4,row5,row6,row7,row8;
		var col1,col2,col3,col4,col5,col6,col7,col8;
		var code='';
		row1=parseInt(str.substr(0,2) || '00',16);
		row2=parseInt(str.substr(2,2) || '00',16);
		row3=parseInt(str.substr(4,2) || '00',16);
		row4=parseInt(str.substr(6,2) || '00',16);
		row5=parseInt(str.substr(8,2) || '00',16);
		row6=parseInt(str.substr(10,2) || '00',16);
		row7=parseInt(str.substr(12,2) || '00',16);
		row8=parseInt(str.substr(14,2) || '00',16);
		col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
		col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
		col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
		col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
		col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
		col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
		col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
		col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
		col1 = Facilino.pad(col1.toString(16),0,2);
		col2 = Facilino.pad(col2.toString(16),0,2);
		col3 = Facilino.pad(col3.toString(16),0,2);
		col4 = Facilino.pad(col4.toString(16),0,2);
		col5 = Facilino.pad(col5.toString(16),0,2);
		col6 = Facilino.pad(col6.toString(16),0,2);
		col7 = Facilino.pad(col7.toString(16),0,2);
		col8 = Facilino.pad(col8.toString(16),0,2);
		str = col1+col2+col3+col4+col5+col6+col7+col8;
		row1=parseInt(str.substr(0,2) || '00',16);
		row2=parseInt(str.substr(2,2) || '00',16);
		row3=parseInt(str.substr(4,2) || '00',16);
		row4=parseInt(str.substr(6,2) || '00',16);
		row5=parseInt(str.substr(8,2) || '00',16);
		row6=parseInt(str.substr(10,2) || '00',16);
		row7=parseInt(str.substr(12,2) || '00',16);
		row8=parseInt(str.substr(14,2) || '00',16);
		if (dropdown_configuration=='V1')
		{
			expr = row8 + ',' + row7 + ','+ row6 + ','+ row5 + ','+ row4 + ','+ row3 + ','+ row2 + ','+ row1;
		}
		else if (dropdown_configuration=='H')
		{
			col1 = ((row1%2)<1? 0 : 128) + ((row2%2)<1? 0 : 64) + ((row3%2)<1? 0 : 32) + ((row4%2)<1? 0 : 16) + ((row5%2)<1? 0 : 8) + ((row6%2)<1? 0 : 4) + ((row7%2)<1? 0 : 2) + ((row8%2)<1? 0 : 1);
			col2 = ((row1%4)<2? 0 : 128) + ((row2%4)<2? 0 : 64) + ((row3%4)<2? 0 : 32) + ((row4%4)<2? 0 : 16) + ((row5%4)<2? 0 : 8) + ((row6%4)<2? 0 : 4) + ((row7%4)<2? 0 : 2) + ((row8%4)<2? 0 : 1);
			col3 = ((row1%8)<4? 0 : 128) + ((row2%8)<4? 0 : 64) + ((row3%8)<4? 0 : 32) + ((row4%8)<4? 0 : 16) + ((row5%8)<4? 0 : 8) + ((row6%8)<4? 0 : 4) + ((row7%8)<4? 0 : 2) + ((row8%8)<4? 0 : 1);
			col4 = ((row1%16)<8? 0 : 128) + ((row2%16)<8? 0 : 64) + ((row3%16)<8? 0 : 32) + ((row4%16)<8? 0 : 16) + ((row5%16)<8? 0 : 8) + ((row6%16)<8? 0 : 4) + ((row7%16)<8? 0 : 2) + ((row8%16)<8? 0 : 1);
			col5 = ((row1%32)<16? 0 : 128) + ((row2%32)<16? 0 : 64) + ((row3%32)<16? 0 : 32) + ((row4%32)<16? 0 : 16) + ((row5%32)<16? 0 : 8) + ((row6%32)<16? 0 : 4) + ((row7%32)<16? 0 : 2) + ((row8%32)<16? 0 : 1);
			col6 = ((row1%64)<32? 0 : 128) + ((row2%64)<32? 0 : 64) + ((row3%64)<32? 0 : 32) + ((row4%64)<32? 0 : 16) + ((row5%64)<32? 0 : 8) + ((row6%64)<32? 0 : 4) + ((row7%64)<32? 0 : 2) + ((row8%64)<32? 0 : 1);
			col7 = ((row1%128)<64? 0 : 128) + ((row2%128)<64? 0 : 64) + ((row3%128)<64? 0 : 32) + ((row4%128)<64? 0 : 16) + ((row5%128)<64? 0 : 8) + ((row6%128)<64? 0 : 4) + ((row7%128)<64? 0 : 2) + ((row8%128)<64? 0 : 1);
			col8 = (row1<128? 0 : 128) + (row2<128? 0 : 64) + (row3<128? 0 : 32) + (row4<128? 0 : 16) + (row5<128? 0 : 8) + (row6<128? 0 : 4) + (row7<128? 0 : 2) + (row8<128? 0 : 1);
			expr = col8 + ',' + col7 + ','+ col6 + ','+ col5 + ','+ col4 + ','+ col3 + ','+ col2 + ','+ col1;
		}
		else if (dropdown_configuration=='V') {
			row1 = ((row1%2)<1? 0 : 128) + ((row1%4)<2? 0 : 64) + ((row1%8)<4? 0 : 32) + ((row1%16)<8? 0 : 16) + ((row1%32)<16? 0 : 8) + ((row1%64)<32? 0 : 4) + ((row1%128)<64? 0 : 2) + (row1<128? 0 : 1);
			row2 = ((row2%2)<1? 0 : 128) + ((row2%4)<2? 0 : 64) + ((row2%8)<4? 0 : 32) + ((row2%16)<8? 0 : 16) + ((row2%32)<16? 0 : 8) + ((row2%64)<32? 0 : 4) + ((row2%128)<64? 0 : 2) + (row2<128? 0 : 1);
			row3 = ((row3%2)<1? 0 : 128) + ((row3%4)<2? 0 : 64) + ((row3%8)<4? 0 : 32) + ((row3%16)<8? 0 : 16) + ((row3%32)<16? 0 : 8) + ((row3%64)<32? 0 : 4) + ((row3%128)<64? 0 : 2) + (row3<128? 0 : 1);
			row4 = ((row4%2)<1? 0 : 128) + ((row4%4)<2? 0 : 64) + ((row4%8)<4? 0 : 32) + ((row4%16)<8? 0 : 16) + ((row4%32)<16? 0 : 8) + ((row4%64)<32? 0 : 4) + ((row4%128)<64? 0 : 2) + (row4<128? 0 : 1);
			row5 = ((row5%2)<1? 0 : 128) + ((row5%4)<2? 0 : 64) + ((row5%8)<4? 0 : 32) + ((row5%16)<8? 0 : 16) + ((row5%32)<16? 0 : 8) + ((row5%64)<32? 0 : 4) + ((row5%128)<64? 0 : 2) + (row5<128? 0 : 1);
			row6 = ((row6%2)<1? 0 : 128) + ((row6%4)<2? 0 : 64) + ((row6%8)<4? 0 : 32) + ((row6%16)<8? 0 : 16) + ((row6%32)<16? 0 : 8) + ((row6%64)<32? 0 : 4) + ((row6%128)<64? 0 : 2) + (row6<128? 0 : 1);
			row7 = ((row7%2)<1? 0 : 128) + ((row7%4)<2? 0 : 64) + ((row7%8)<4? 0 : 32) + ((row7%16)<8? 0 : 16) + ((row7%32)<16? 0 : 8) + ((row7%64)<32? 0 : 4) + ((row7%128)<64? 0 : 2) + (row7<128? 0 : 1);
			row8 = ((row8%2)<1? 0 : 128) + ((row8%4)<2? 0 : 64) + ((row8%8)<4? 0 : 32) + ((row8%16)<8? 0 : 16) + ((row8%32)<16? 0 : 8) + ((row8%64)<32? 0 : 4) + ((row8%128)<64? 0 : 2) + (row8<128? 0 : 1);
			expr = row1 + ',' + row2 + ','+ row3 + ','+ row4 + ','+ row5 + ','+ row6 + ','+ row7 + ','+ row8;
		}
		else if (dropdown_configuration=='H1')
		{
			col1 = ((row1%2)<1? 0 : 1) + ((row2%2)<1? 0 : 2) + ((row3%2)<1? 0 : 4) + ((row4%2)<1? 0 : 8) + ((row5%2)<1? 0 : 16) + ((row6%2)<1? 0 : 32) + ((row7%2)<1? 0 : 64) + ((row8%2)<1? 0 : 128);
			col2 = ((row1%4)<2? 0 : 1) + ((row2%4)<2? 0 : 2) + ((row3%4)<2? 0 : 4) + ((row4%4)<2? 0 : 8) + ((row5%4)<2? 0 : 16) + ((row6%4)<2? 0 : 32) + ((row7%4)<2? 0 : 64) + ((row8%4)<2? 0 : 128);
			col3 = ((row1%8)<4? 0 : 1) + ((row2%8)<4? 0 : 2) + ((row3%8)<4? 0 : 4) + ((row4%8)<4? 0 : 8) + ((row5%8)<4? 0 : 16) + ((row6%8)<4? 0 : 32) + ((row7%8)<4? 0 : 64) + ((row8%8)<4? 0 : 128);
			col4 = ((row1%16)<8? 0 : 1) + ((row2%16)<8? 0 : 2) + ((row3%16)<8? 0 : 4) + ((row4%16)<8? 0 : 8) + ((row5%16)<8? 0 : 16) + ((row6%16)<8? 0 : 32) + ((row7%16)<8? 0 : 64) + ((row8%16)<8? 0 : 128);
			col5 = ((row1%32)<16? 0 : 1) + ((row2%32)<16? 0 : 2) + ((row3%32)<16? 0 : 4) + ((row4%32)<16? 0 : 8) + ((row5%32)<16? 0 : 16) + ((row6%32)<16? 0 : 32) + ((row7%32)<16? 0 : 64) + ((row8%32)<16? 0 : 128);
			col6 = ((row1%64)<32? 0 : 1) + ((row2%64)<32? 0 : 2) + ((row3%64)<32? 0 : 4) + ((row4%64)<32? 0 : 8) + ((row5%64)<32? 0 : 16) + ((row6%64)<32? 0 : 32) + ((row7%64)<32? 0 : 64) + ((row8%64)<32? 0 : 128);
			col7 = ((row1%128)<64? 0 : 1) + ((row2%128)<64? 0 : 2) + ((row3%128)<64? 0 : 4) + ((row4%128)<64? 0 : 8) + ((row5%128)<64? 0 : 16) + ((row6%128)<64? 0 : 32) + ((row7%128)<64? 0 : 64) + ((row8%128)<64? 0 : 128);
			col8 = (row1<128? 0 : 1) + (row2<128? 0 : 2) + (row3<128? 0 : 4) + (row4<128? 0 : 8) + (row5<128? 0 : 16) + (row6<128? 0 : 32) + (row7<128? 0 : 64) + (row8<128? 0 : 128);
			expr = col1 + ',' + col2 + ','+ col3 + ','+ col4 + ','+ col5 + ','+ col6 + ','+ col7 + ','+ col8;
		}
		
		code=expr;
		
        return [code, Blockly.Arduino.ORDER_NONE];
    };
	
	Blockly.Blocks.dyor_drawing_icons = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_drawing_icons'),
			examples: ['dyor_generic_expression_icons_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_DRAWING_NO_CONNECTION','LANG_LED_MATRIX_DRAWING_POOR_CONNECTION','LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION','LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION','LANG_LED_MATRIX_DRAWING_NO_BATTERY','LANG_LED_MATRIX_DRAWING_LOW_BATTERY','LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY','LANG_LED_MATRIX_DRAWING_FULL_BATTERY','LANG_LED_MATRIX_DRAWING_CORRECT','LANG_LED_MATRIX_DRAWING_WRONG','LANG_LED_MATRIX_DRAWING_ARROW_UP','LANG_LED_MATRIX_DRAWING_ARROW_DOWN','LANG_LED_MATRIX_DRAWING_ARROW_RIGHT','LANG_LED_MATRIX_DRAWING_ARROW_LEFT','LANG_LED_MATRIX_DRAWING_TRIANGLE_UP','LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN','LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT','LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT','LANG_LED_MATRIX_DRAWING_SMILE','LANG_LED_MATRIX_DRAWING_DIAMOND','LANG_LED_MATRIX_DRAWING_CROSS','LANG_LED_MATRIX_DRAWING_SPADE','LANG_LED_MATRIX_DRAWING_CIRCLE_FULL','LANG_LED_MATRIX_DRAWING_CIRCLE','LANG_LED_MATRIX_DRAWING_MALE','LANG_LED_MATRIX_DRAWING_FEMALE','LANG_LED_MATRIX_DRAWING_NOTE','LANG_LED_MATRIX_DRAWING_NOTES','LANG_LED_MATRIX_DRAWING_SNOW','LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN','LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT','LANG_LED_MATRIX_DRAWING_ICONS_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
				this.appendDummyInput('').appendField(new Blockly.FieldImage("img/blocks/dot-matrix.png", 20*options.zoom, 20*options.zoom, "*")).appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL'), 'V'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL'), 'H'] ,
			[Facilino.locales.getKey('LANG_LED_MATRIX_VERTICAL_180'), 'V1'],
		    [Facilino.locales.getKey('LANG_LED_MATRIX_HORIZONTAL_180'), 'H1'] 
                ]), "CONFIGURATION").setAlign(Blockly.ALIGN_RIGHT);
			this.appendDummyInput('').appendField(new Blockly.FieldDropdown([
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NO_CONNECTION'),'0100000000000000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_POOR_CONNECTION'),'0504040000000000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION'),'1514141010000000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION'),'5554545050404000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NO_BATTERY'),'3f21212121212121'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_LOW_BATTERY'),'3f212d2121212121'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY'),'3f212d212d212121'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_FULL_BATTERY'),'3f212d212d212d21'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CORRECT'),'00040a1120408000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_WRONG'),'0042241818244200'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_UP'),'383838fe7c381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_DOWN'),'10387cfe38383800'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_RIGHT'),'10307efe7e301000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_LEFT'),'1018fcfefc181000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_UP'),'fefe7c7c38381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN'),'1038387c7cfefe00'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT'),'061e7efe7e1e0600'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT'),'c0f0fcfefcf0c000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SMILE'),'7c92aa82aa827c00'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_DIAMOND'),'183c7effff7e3c18'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CROSS'),'3c185aff5a183c18'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SPADE'),'38107cfe7c381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CIRCLE_FULL'),'3c7effffffff7e3c'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_CIRCLE'),'3c4281818181423c'], 
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_MALE'),'0c12129ca0c0f000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_FEMALE'),'081c08081c22221c'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NOTE'),'060e0c0808281800'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_NOTES'),'066eecc88898f000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_SNOW'),'105438ee38541000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN'),'1038541054381000'],
					[Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT'),'002844fe44280000']
                ]), 'ICON').setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('NEXT').setCheck('Expression').setAlign(Blockly.ALIGN_RIGHT);
                this.setInputsInline(false);
        this.setOutput(true,'Expression');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_DRAWING_ICONS_TOOLTIP'));
            }
        };

    Blockly.Blocks.dyor_row = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
            tags: ['led_matrix','screen'],
            helpUrl: Facilino.getHelpUrl('dyor_row'),
			examples: ['dyor_generic_expression_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_SCREEN_LEDMATRIX,
			keys: ['LANG_LED_MATRIX_ROW_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDMATRIX);
        //Blockly.FieldColour.COLOURS=['#000000','#FF0000'];
	//Blockly.FieldColour.COLUMNS=2;
        var colour1 = new Blockly.FieldColour('#000000');
        colour1.setColours(['#000000','#FF0000']).setColumns(2);
        var colour2 = new Blockly.FieldColour('#000000');
	colour2.setColours(['#ff0000','#000000']).setColumns(2);
        var colour3 = new Blockly.FieldColour('#000000');
	colour3.setColours(['#ff0000','#000000']).setColumns(2);
        var colour4 = new Blockly.FieldColour('#000000');
	colour4.setColours(['#ff0000','#000000']).setColumns(2);
        var colour5 = new Blockly.FieldColour('#000000');
	colour5.setColours(['#ff0000','#000000']).setColumns(2);
        var colour6 = new Blockly.FieldColour('#000000');
	colour6.setColours(['#ff0000','#000000']).setColumns(2);
        var colour7 = new Blockly.FieldColour('#000000');
	colour7.setColours(['#ff0000','#000000']).setColumns(2);
        var colour8 = new Blockly.FieldColour('#000000');
	colour8.setColours(['#ff0000','#000000']).setColumns(2);
        //colour1.COLOURS=['#ff00000','#000000'];  //Porque la versión de bq no está actualizada
        //colour1.COLUMNS=2; //Idem.
        this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/ellipsis.png',24*options.zoom,24*options.zoom));
                this.appendDummyInput('COL1').appendField(colour1,'COL1');
        this.appendDummyInput('COL2').appendField(colour2,'COL2');
        this.appendDummyInput('COL3').appendField(colour3,'COL3');
        this.appendDummyInput('COL4').appendField(colour4,'COL4');
        this.appendDummyInput('COL5').appendField(colour5,'COL5');
        this.appendDummyInput('COL6').appendField(colour6,'COL6');
        this.appendDummyInput('COL7').appendField(colour7,'COL7');
        this.appendDummyInput('COL8').appendField(colour8,'COL8');
                this.setInputsInline(true);
        this.setOutput(true,'Row');
            this.setTooltip(Facilino.locales.getKey('LANG_LED_MATRIX_ROW_TOOLTIP'));
           },
	onfocus: function(){
		Blockly.FieldColour.COLOURS=['#000000','#FF0000'];
	Blockly.FieldColour.COLUMNS=2;
	}
    };
		
		Blockly.Blocks['show_mouth'] = {
			  category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
			  category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			  colour: Facilino.LANG_COLOUR_SCREEN_LEDSTRIP,
			  helpUrl: Facilino.getHelpUrl('show_mouth'),
			  tags: [],
			  examples: [],
			  keys: ['LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH','LANG_SIMPLEEXPRESSIONS_PIN','LANG_SIMPLEEXPRESSIONS_EXPRESSION','LANG_SIMPLEEXPRESSIONS_SHOWMOUTH_TOOLTIP'],
			  init: function() {
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH')).appendField(new Blockly.FieldImage('img/blocks/round_led_strip.svg', 40*options.zoom, 40*options.zoom));
				this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_PIN')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.svg', 20*options.zoom, 20*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck(Number);
				this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_EXPRESSION')).appendField(new Blockly.FieldDropdown([['Zeros','0'],['Happy Small','12'],['Happy Full','30'],['Sad Small','96'],['Sad Full','114'],['Neutral','19'],['Circle','126'],['Center','1'],['Hook','89'],['Upsidedown Hook','53'],['Kooh','39'],['Upsidedown Kooh','75'],['Cross','109'],['Rect','108'],['Left Arrow','59'],['Right Arrow','87'],['Left Half','56'],['Right Half','70']]),'EXPRESSION').setAlign(Blockly.ALIGN_RIGHT);
				var colour = new Blockly.FieldColour('#000000');
				colour.setColours(['#000000','#808080','#C0C0C0','#FFFFFF','#800000','#FF0000','#808000','#FFFF00','#008000','#00FF00','#008080','#00FFFF','#000080','#0000FF','#800080','#FF00FF']).setColumns(4);
				this.appendDummyInput('').appendField('Color').appendField(colour,'COLOR').setAlign(Blockly.ALIGN_RIGHT);
				this.setPreviousStatement(true,'code');
				this.setNextStatement(true,'code');
				this.setColour(Facilino.LANG_COLOUR_SCREEN_LEDSTRIP);
				this.setTooltip(Facilino.locales.getKey('LANG_SIMPLEEXPRESSIONS_SHOWMOUTH_TOOLTIP'));
			  }
			};
		


			Blockly.Arduino['show_mouth'] = function(block) {
			  if (window.license===undefined || /^\s*$/.test(window.license)) return '//demo version\n';
			  var input_expression = this.getFieldValue('EXPRESSION');
			  var input_color = this.getFieldValue('COLOR');
			  var input_pin = Blockly.Arduino.valueToCode(this,'PIN',Blockly.Arduino.ORDER_NONE) || '';
			  //Blockly.Arduino.definitions_['define_simpleexpressions_h'] = '#include <SimpleExpressions.h>';
			  Blockly.Arduino.definitions_['define_neopixel_h'] = '#include <Adafruit_NeoPixel.h>';
			  Blockly.Arduino.definitions_['define_avr_power_h'] = '#ifdef __AVR__\n  #include <avr/power.h>\n#endif';
			  Blockly.Arduino.definitions_['declare_var_led_strip_'+input_pin]='Adafruit_NeoPixel _led_strip_'+input_pin+'(7,'+input_pin+', NEO_GRB + NEO_KHZ800);\n';

			  Blockly.Arduino.setups_['setup_simpleexpressions_led_strip'+input_pin] = '_led_strip_'+input_pin+'.begin();\n  clearpixels_'+input_pin+'();\n  _led_strip_'+input_pin+'.setBrightness(map(10,0,100,0,255));\n';
			  
			  Blockly.Arduino.definitions_['define_clearpixels'+input_pin]='void clearpixels_'+input_pin+'()\n{\n  uint16_t n=_led_strip_'+input_pin+'.numPixels();\n  for(uint16_t i = 0; i < n; i++) {\n    _led_strip_'+input_pin+'.setPixelColor(i, 0);\n  }\n  delay(1);\n}\n';
			  Blockly.Arduino.definitions_['define_writepixels'+input_pin]='void writepixels_'+input_pin+'(uint32_t data, int r, int g, int b)\n{\n  uint16_t n=_led_strip_'+input_pin+'.numPixels();\n  for(uint16_t i = 0; i<n; i++) {\n    if((data>>i)&0x01) _led_strip_'+input_pin+'.setPixelColor(i, _led_strip_'+input_pin+'.Color(r, g, b));\n    else _led_strip_'+input_pin+'.setPixelColor(i,_led_strip_'+input_pin+'.Color(0,0,0));\n  _led_strip_'+input_pin+'.show();\n}\n  }\n';
			  
			  var color_rgb=Facilino.hexToRgb(input_color);
			  var code='writepixels_'+input_pin+'('+input_expression+','+color_rgb.r +','+color_rgb.g+','+color_rgb.b+');\n' ;
			  return code;
			};
			
			Blockly.Arduino.dyor_servo_cont = function() {
            var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN', Blockly.Arduino.ORDER_NONE) || '';
            var value_degree = this.getFieldValue('ROT');
            var value_speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
			
			var code = '';
            var a = Facilino.findPinMode(dropdown_pin);
            code += a['code'];
            dropdown_pin = a['pin'];
			
			if ((Facilino.locales.processor==='ArduinoUno')||(Facilino.locales.processor==='ArduinoNano')||(Facilino.locales.processor==='NodeMCU'))
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['servo_definitions_variables']({pin: dropdown_pin});
			}
			else if (Facilino.locales.processor==='ESP32')
			{
				Blockly.Arduino.definitions_['include_servo'] = '#include <ESP_Servo.h>';
				Blockly.Arduino.definitions_['declare_var_servo_'+dropdown_pin]=JST['ESP_servo_definitions_variables']({pin: dropdown_pin});
			}

            if (Facilino.isVariable(dropdown_pin)) {
                code += JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin
                });
            } else {
                Blockly.Arduino.setups_['dyor_servo_move_' + dropdown_pin] = JST['dyor_servo_setups']({
                    'dropdown_pin': dropdown_pin
                });
            }

            code += JST['dyor_servo_cont']({
                'dropdown_pin': dropdown_pin,
                'value_degree': value_degree,
                'value_speed': value_speed
            });
            return code;
        };

        Blockly.Blocks.dyor_servo_cont = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
			tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_servo_cont'),
			examples: ['dyor_servo_cont_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
			keys: ['LANG_SERVO_CONT','LANG_SERVO_CONT_PIN','LANG_SERVO_CONT_ROT','LANG_SERVO_CONT_TURN_CLOCKWISE','LANG_SERVO_CONT_TURN_COUNTERCLOCKWISE','LANG_SERVO_CONT_STOPPED','LANG_SERVO_CONT_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
		this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_SERVO_CONT')).appendField(new Blockly.FieldImage('img/blocks/servo_cont.svg', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        	this.appendValueInput('PIN').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')).appendField(new Blockly.FieldImage("img/blocks/servo_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SERVO_CONT')).appendField(new Blockly.FieldImage('img/blocks/servo_cont.svg', 63*options.zoom, 63*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_SERVO_CONT_ROT')).setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_SERVO_CONT_TURN_CLOCKWISE') || 'CLOCKWISE', '25'],
                    [Facilino.locales.getKey('LANG_SERVO_CONT_TURN_COUNTERCLOCKWISE') || 'ANTICLOCKWISE', '155'],
                    [Facilino.locales.getKey('LANG_SERVO_CONT_STOPPED') || 'STOPPED', '90']
                ]), 'ROT');
                this.appendValueInput('SPEED').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SPEED')).appendField(new Blockly.FieldImage('img/blocks/speedometer.svg', 20*options.zoom, 20*options.zoom));
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_CONT_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };
		
		Blockly.Arduino.dyor_dc_motor = function() {
            var dropdown_pin1 = Blockly.Arduino.valueToCode(this, 'PIN1', Blockly.Arduino.ORDER_ATOMIC) || '';
			var dropdown_pin2 = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC) || '';
            var value_dir = this.getFieldValue('ROT');
            var value_speed = Blockly.Arduino.valueToCode(this, 'SPEED', Blockly.Arduino.ORDER_ATOMIC);
            var code = '';
            var a1 = Facilino.findPinMode(dropdown_pin1);
			var a2 = Facilino.findPinMode(dropdown_pin2);
            code += a1['code'];
            dropdown_pin1 = a1['pin'];
			code += a2['code'];
            dropdown_pin2 = a2['pin'];
			if (Facilino.isVariable(dropdown_pin1)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
            } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin1] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin1
                });
            }
			if (Facilino.isVariable(dropdown_pin2)) {
                code += JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
            } else {
                Blockly.Arduino.setups_['setup_digital_write_' + dropdown_pin2] = JST['inout_digital_write_setups']({
                    'dropdown_pin': dropdown_pin2
                });
            }
			value_speed='((((int)('+value_speed+'))*255)/100)';
			if (value_dir==2)
			{
				code+='digitalWrite('+dropdown_pin1+',0);\n';
				code+='digitalWrite('+dropdown_pin2+',0);\n';
			}
			else if (value_dir==1)
			{
				code+='analogWrite('+dropdown_pin1+','+value_speed+');\n';
				code+='digitalWrite('+dropdown_pin2+',0);\n';
			}
			else if (value_dir==-1)
			{
				code+='digitalWrite('+dropdown_pin1+',0);\n';
				code+='analogWrite('+dropdown_pin2+','+value_speed+');\n';
			}
			else
			{
				code+='digitalWrite('+dropdown_pin1+',1);\n';
				code+='digitalWrite('+dropdown_pin2+',1);\n';
			}
            return code;
        };

        Blockly.Blocks.dyor_dc_motor = {
            category: Facilino.locales.getKey('LANG_CATEGORY_DEPRECATED'),
			tags: ['servo','movement'],
            helpUrl: Facilino.getHelpUrl('dyor_dc_motor'),
			examples: ['dyor_dc_motor_example.bly'],
			category_colour: Facilino.LANG_COLOUR_DEPRECATED,
			colour: Facilino.LANG_COLOUR_MOVEMENT_MOTORS,
			keys: ['LANG_DC_MOTOR','LANG_SERVO_CONT_PIN','LANG_SERVO_CONT_PIN','LANG_SERVO_CONT_ROT','LANG_SERVO_CONT_TURN_CLOCKWISE','LANG_SERVO_CONT_TURN_COUNTERCLOCKWISE','LANG_SERVO_CONT_STOPPED','LANG_SERVO_CONT_COAST','LANG_SERVO_DC_MOTOR_TOOLTIP'],
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_MOVEMENT_MOTORS);
		this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_DC_MOTOR')).appendField(new Blockly.FieldImage('img/blocks/engine.svg', 36*options.zoom, 36*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
		//this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/drv8833.png', 63*options.zoom, 63*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/add-icon.png',63*options.zoom, 63*options.zoom)).appendField(new Blockly.FieldImage('img/blocks/micro_gear_motor.png', 63*options.zoom, 63*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
        	this.appendValueInput('PIN1').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')+'1').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('PIN2').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')+'2').appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number).setAlign(Blockly.ALIGN_RIGHT);
                //this.appendValueInput('PIN').appendField(Facilino.locales.getKey('LANG_SERVO_CONT')).appendField(new Blockly.FieldImage('img/blocks/servo_cont.svg', 63*options.zoom, 63*options.zoom)).appendField(Facilino.locales.getKey('LANG_SERVO_CONT_PIN')).appendField(new Blockly.FieldImage("img/blocks/pwm_signal.svg",24*options.zoom,24*options.zoom)).setCheck(Number);
                this.appendDummyInput().appendField(Facilino.locales.getKey('LANG_SERVO_CONT_ROT')).setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldDropdown([
                    [Facilino.locales.getKey('LANG_SERVO_CONT_TURN_CLOCKWISE') || 'CLOCKWISE', '1'],
                    [Facilino.locales.getKey('LANG_SERVO_CONT_TURN_COUNTERCLOCKWISE') || 'ANTICLOCKWISE', '-1'],
                    [Facilino.locales.getKey('LANG_SERVO_CONT_STOPPED') || 'STOPPED', '0'],
					[Facilino.locales.getKey('LANG_SERVO_CONT_COAST') || 'COAST', '2']
                ]), 'ROT');
                this.appendValueInput('SPEED').setAlign(Blockly.ALIGN_RIGHT).appendField(Facilino.locales.getKey('LANG_SPEED')).appendField(new Blockly.FieldImage('img/blocks/speedometer.svg', 20*options.zoom, 20*options.zoom));
                this.setPreviousStatement(true,'code');
                this.setNextStatement(true,'code');
				this.setInputsInline(false);
                this.setTooltip(Facilino.locales.getKey('LANG_SERVO_DC_MOTOR_TOOLTIP'));
            },
            isVariable: function(varValue) {
                for (var i in Blockly.Variables.allUsedVariables) {
                    if (Blockly.Variables.allUsedVariables[i] === varValue) {
                        return true;
                    }
                }
                return false;
            }
        };
		
		Blockly.Arduino.two_buttons_ui = function() {
            var select_pin = Blockly.Arduino.valueToCode(this, 'PIN_SELECT', Blockly.Arduino.ORDER_NONE);
			var cancel_pin = Blockly.Arduino.valueToCode(this, 'PIN_CANCEL', Blockly.Arduino.ORDER_NONE);
            var code = '';
            var a = Facilino.findPinMode(select_pin);
            code += a['code'];
            select_pin = a['pin'];
			
			var a = Facilino.findPinMode(cancel_pin);
            code += a['code'];
            cancel_pin = a['pin'];

			if (Facilino.isVariable(select_pin)) {
					code += 'pinMode(' +select_pin+',INPUT);\n';
			} else {
					Blockly.Arduino.setups_['setup_button_' + select_pin] = 'pinMode(' +select_pin+',INPUT);\n';
			}
			if (Facilino.isVariable(cancel_pin)) {
					code += 'pinMode(' +cancel_pin+',INPUT);\n';
			} else {
					Blockly.Arduino.setups_['setup_button_' + cancel_pin] = 'pinMode(' +cancel_pin+',INPUT);\n';
			}
			
			Blockly.Arduino.definitions_['declare_var_button_active_'+select_pin]='boolean _buttonActive_'+select_pin+'=false;\n';
			Blockly.Arduino.definitions_['declare_var_long_press_active_'+select_pin]='boolean _longPressActive_'+select_pin+'=false;\n';
			Blockly.Arduino.definitions_['declare_var_button_timer_'+select_pin]='long _buttonTimer_'+select_pin+'=0;\n';	
			
			Blockly.Arduino.definitions_['declare_var_button_active_'+cancel_pin]='boolean _buttonActive_'+cancel_pin+'=false;\n';
			Blockly.Arduino.definitions_['declare_var_button_timer_'+cancel_pin]='long _buttonTimer_'+cancel_pin+'=0;\n';

			Blockly.Arduino.definitions_['declare_var_button_updateUI_'+select_pin+'_'+cancel_pin]='boolean _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n';			
			Blockly.Arduino.definitions_['declare_var_button_acceptUI_'+select_pin+'_'+cancel_pin]='boolean _acceptUI_'+select_pin+'_'+cancel_pin+'=false;\n';
			Blockly.Arduino.definitions_['declare_var_button_menu_level_'+select_pin+'_'+cancel_pin]='int _menu_level_'+select_pin+'_'+cancel_pin+'=0;\n';
			Blockly.Arduino.definitions_['declare_var_button_menu_'+select_pin+'_'+cancel_pin]='int _menu_'+select_pin+'_'+cancel_pin+'=-1;\n';
			Blockly.Arduino.definitions_['declare_var_button_option_'+select_pin+'_'+cancel_pin]='int _option_'+select_pin+'_'+cancel_pin+'=-1;\n';
			Blockly.Arduino.definitions_['declare_var_button_max_menus_'+select_pin+'_'+cancel_pin]='int _max_menus_'+select_pin+'_'+cancel_pin+'='+this.menuCount_+';\n';
			Blockly.Arduino.definitions_['declare_var_current_time_'+select_pin+'_'+cancel_pin]='long _currentTime_'+select_pin+'_'+cancel_pin+'=0;\n';
						Blockly.Arduino.definitions_['declare_var_refresh_time_'+select_pin+'_'+cancel_pin]='int _refreshTime_'+select_pin+'_'+cancel_pin+'='+this.getFieldValue('TIME')+';\n';
			//Compute max options array
			var opt_array='';
			var i=0;
			for (i=0;i<this.menuCount_;i++)
			{
				var option=this.getInputTargetBlock('MENU'+i);
				if (option)
					opt_array+=option.optionCount_+',';
				else
					opt_array+=',';
			}
			opt_array=opt_array.substr(0,opt_array.length-1);
			Blockly.Arduino.definitions_['declare_var_button_max_options_'+select_pin+'_'+cancel_pin]='int _max_options_'+select_pin+'_'+cancel_pin+'['+this.menuCount_+']={'+opt_array+'};\n';
			/*var code_long_pressed = '';
			var code_short_pressed = '';
			code_long_pressed += Blockly.Arduino.statementToCode(this, 'LONG_PRESSED');
			code_short_pressed += Blockly.Arduino.statementToCode(this, 'SHORT_PRESSED');

			
			code_long_pressed = code_long_pressed.replace(/&quot;/g, '"');
			code_short_pressed = code_short_pressed.replace(/&quot;/g, '"');

			*/
			code+='_currentTime_'+select_pin+'_'+cancel_pin+'=millis();\n';
			code+='if (digitalRead('+select_pin+')==LOW) {\n      if (_buttonActive_'+select_pin+'==false) {\n        _buttonActive_'+select_pin+'=true;\n        _buttonTimer_'+select_pin+'=_currentTime_'+select_pin+'_'+cancel_pin+';\n      }\n      if ((_currentTime_'+select_pin+'_'+cancel_pin+'-_buttonTimer_'+select_pin+'>1000)&&(_longPressActive_'+select_pin+'==false)){\n        _longPressActive_'+select_pin+'=true;\n        if (_menu_level_'+select_pin+'_'+cancel_pin+'==1)\n        {\n          _menu_level_'+select_pin+'_'+cancel_pin+'=2;\n          _option_'+select_pin+'_'+cancel_pin+'=0;\n          _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n        }\n        else if (_menu_level_'+select_pin+'_'+cancel_pin+'==2)\n        {\n          _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          _acceptUI_'+select_pin+'_'+cancel_pin+'=true;\n        }\n      }\n   }\n   else {\n      if (_buttonActive_'+select_pin+'== true){\n        if (_longPressActive_'+select_pin+'==true){\n          _longPressActive_'+select_pin+'=false;\n        }\n        else  if (_currentTime_'+select_pin+'_'+cancel_pin+'-_buttonTimer_'+select_pin+'>100){\n          if (_menu_level_'+select_pin+'_'+cancel_pin+'==0)\n          {\n            _menu_'+select_pin+'_'+cancel_pin+'=0;\n            _option_'+select_pin+'_'+cancel_pin+'=-1;\n            _menu_level_'+select_pin+'_'+cancel_pin+'++;\n            _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          }\n          else if (_menu_level_'+select_pin+'_'+cancel_pin+'==1)\n          {\n            _menu_'+select_pin+'_'+cancel_pin+'++;\n            if (_menu_'+select_pin+'_'+cancel_pin+'==_max_menus_'+select_pin+'_'+cancel_pin+')\n              _menu_'+select_pin+'_'+cancel_pin+'=0;\n            _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          }\n          else if (_menu_level_'+select_pin+'_'+cancel_pin+'==2)\n          {\n            _option_'+select_pin+'_'+cancel_pin+'++;\n            if (_option_'+select_pin+'_'+cancel_pin+'==_max_options_'+select_pin+'_'+cancel_pin+'[_menu_'+select_pin+'_'+cancel_pin+'])\n              _option_'+select_pin+'_'+cancel_pin+'=0;\n            _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          }\n        }\n        _buttonActive_'+select_pin+'=false;\n      }\n   }\n';
			code+='   if (digitalRead('+cancel_pin+')==LOW) {\n      if (_buttonActive_'+cancel_pin+'==false) {\n        _buttonActive_'+cancel_pin+'=true;\n        _buttonTimer_'+cancel_pin+'=_currentTime_'+select_pin+'_'+cancel_pin+';\n      }\n   }\n   else {\n      \n    if ((_menu_level_2_3==0)&&(_refreshTime_2_3>0)&&(_currentTime_2_3-_buttonTimer_3>_refreshTime_2_3))\n      {\n        _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n        _buttonTimer_3=_currentTime_2_3;\n      }\n      if (_buttonActive_'+cancel_pin+'== true){\n        if (_currentTime_'+select_pin+'_'+cancel_pin+'-_buttonTimer_'+cancel_pin+'>100){\n          if (_menu_level_'+select_pin+'_'+cancel_pin+'==1)\n          {\n            _menu_level_'+select_pin+'_'+cancel_pin+'=0;\n            _menu_'+select_pin+'_'+cancel_pin+'=-1;\n            _option_'+select_pin+'_'+cancel_pin+'=-1;\n            _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          }\n          else if (_menu_level_'+select_pin+'_'+cancel_pin+'==2)\n          {\n            _menu_level_'+select_pin+'_'+cancel_pin+'=1;\n            _option_'+select_pin+'_'+cancel_pin+'=-1;\n            _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          }\n          else\n          {\n            _menu_'+select_pin+'_'+cancel_pin+'=-1;\n            _option_'+select_pin+'_'+cancel_pin+'=-1;\n            _updateUI_'+select_pin+'_'+cancel_pin+'=true;\n          }\n        }\n        _buttonActive_'+cancel_pin+'=false;\n      }\n    }\n';
			code+='if (_updateUI_'+select_pin+'_'+cancel_pin+'==true)\n			{\n			  _updateUI_'+select_pin+'_'+cancel_pin+'=false;\n			  if ((_menu_'+select_pin+'_'+cancel_pin+'==-1)&&(_option_'+select_pin+'_'+cancel_pin+'==-1))\n			  {'+Blockly.Arduino.statementToCode(this, 'GENERAL')+'\n			  }\n';
			var i=0;
			for (i=0;i<this.menuCount_;i++)
			{
				code+='        else if ((_menu_'+select_pin+'_'+cancel_pin+'=='+i+')&&(_option_'+select_pin+'_'+cancel_pin+'==-1))\n        {\n        '+Blockly.Arduino.statementToCode(this,'MENU_HIGHLIGHTED'+i)+'\n        }\n';
				var optionInput = this.getInputTargetBlock('MENU'+i);
				if (optionInput)
				{
					var j=0;
					for (j=0;j<optionInput.optionCount_;j++)
					{
						code+='        else if ((_menu_'+select_pin+'_'+cancel_pin+'=='+i+')&&(_option_'+select_pin+'_'+cancel_pin+'=='+j+'))\n        {\n          if (_acceptUI_'+select_pin+'_'+cancel_pin+'==true)\n          {\n          '+Blockly.Arduino.statementToCode(optionInput,'OPTION_SELECTED'+j)+'\n          }\n          else\n          {\n          '+Blockly.Arduino.statementToCode(optionInput,'OPTION_HIGHLIGHTED'+j)+'\n          }\n        }\n';
					}
				}
			}
			code+='        _acceptUI_2_3=false;\n			}\n';
			
			return code;
        };
        Blockly.Blocks.two_buttons_ui = {
            category: Facilino.locales.getKey('LANG_CATEGORY_ADVANCED'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_DIGITAL'),
            tags: ['input','output','button'],
            helpUrl: Facilino.getHelpUrl('two_buttons_ui'),
			examples: ['button_case_example.bly'],
			category_colour: Facilino.LANG_COLOUR_ADVANCED,
			colour: Facilino.LANG_COLOUR_ADVANCED_DIGITAL,
			keys: ['LANG_TWO_BUTTONS_UI','LANG_TWO_BUTTONS_UI_SELECT','LANG_TWO_BUTTONS_UI_CANCEL','LANG_BQ_BUTTON_TIME','LANG_TWO_BUTTONS_UI_TOOLTIP'],
            //bq_button initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_ADVANCED_DIGITAL);
                this.appendValueInput('PIN_SELECT').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI')).appendField(new Blockly.FieldImage('img/blocks/list.svg', 24*options.zoom, 24*options.zoom)).setCheck(Number).appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_SELECT')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.png', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendValueInput('PIN_CANCEL').setCheck(Number).appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_CANCEL')).appendField(new Blockly.FieldImage('img/blocks/digital_signal.png', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                this.appendDummyInput('').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_TIME')).appendField(new Blockly.FieldNumber('0','0','5000'),'TIME').setAlign(Blockly.ALIGN_RIGHT);
				this.appendStatementInput('GENERAL').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_GENERAL'));
				this.setOutput(false, null);
				this.setMutator(new Blockly.Mutator(['two_buttons_ui_item']));
                this.setPreviousStatement(true,'code');
				this.setInputsInline(false);
                this.setNextStatement(true,'code');
                this.setTooltip(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_TOOLTIP'));
				this.menuCount_ = 0;
            },
            mutationToDom: function() {
                if (!this.menuCount_) {
                    return null;
                }
				var container = document.createElement('mutation');
				if (this.menuCount_) {
					container.setAttribute('item', this.menuCount_);
				}
                return container;
            },
            domToMutation: function(xmlElement) {
                this.menuCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 0; x < this.menuCount_; x++) {
					this.appendStatementInput('MENU_HIGHLIGHTED'+x).setCheck('code').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_MENU')+x+' '+Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_HIGHLIGHTED')).appendField(new Blockly.FieldImage('img/blocks/list_selected.svg', 24*options.zoom, 24*options.zoom));
                    this.appendValueInput('MENU' + x).setCheck('menu_options').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTIONS')).appendField(new Blockly.FieldImage('img/blocks/option_list.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                    //this.appendStatementInput('DO' + x).appendField(Facilino.locales.getKey('LANG_CONTROLS_DO')).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('two_buttons_ui_stack');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 0; x < this.menuCount_; x++) {
                    var taskBlock = workspace.newBlock('two_buttons_ui_item');
                    taskBlock.initSvg();
                    connection.connect(taskBlock.previousConnection);
                    connection = taskBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the task input blocks and remove the inputs.
                for (var x = this.menuCount_-1; x >= 0; x--) {
					this.removeInput('MENU_HIGHLIGHTED'+x);
                    this.removeInput('MENU' + x);
                    //this.removeInput('DO' + x);
                }
                this.menuCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'two_buttons_ui_item':
							var menuStack = this.appendStatementInput('MENU_HIGHLIGHTED'+this.menuCount_).setCheck('code').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_MENU')+this.menuCount_+' '+Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_HIGHLIGHTED')).appendField(new Blockly.FieldImage('img/blocks/list_selected.svg', 24*options.zoom, 24*options.zoom));
                            var menuInput = this.appendValueInput('MENU'+this.menuCount_).setCheck('menu_options').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTIONS')).appendField(new Blockly.FieldImage('img/blocks/option_list.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                            this.menuCount_++;
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                menuInput.connection.connect(clauseBlock.valueConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection &&
                        clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 0;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'two_buttons_ui_item':
                            var inputMenu = this.getInput('MENU' + x);
                            clauseBlock.valueConnection_ = inputMenu && inputMenu.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            }
        };

        Blockly.Blocks.two_buttons_ui_stack = {
			colour: Facilino.LANG_COLOUR_ADVANCED_DIGITAL,
			keys: ['LANG_TWO_BUTTONS_UI','LANG_TWO_BUTTONS_UI_TOOLTIP'],
            // Task.
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_ADVANCED_DIGITAL);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI'))
                    .setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('menu');
                this.setTooltip(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_TOOLTIP'));
                this.contextMenu = false;
            }
        };

		Blockly.Blocks.two_buttons_ui_item = {
				colour: Facilino.LANG_COLOUR_ADVANCED_DIGITAL,
				// Task item.
				keys: ['LANG_TWO_BUTTONS_UI_MENU','LANG_TWO_BUTTONS_UI_MENU_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_ADVANCED_DIGITAL);
					this.appendDummyInput()
						.appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_MENU'))
						.setAlign(Blockly.ALIGN_RIGHT);
					this.setPreviousStatement(true,'menu');
					this.setNextStatement(true,'menu');
					this.setTooltip(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_MENU_TOOLTIP'));
					this.contextMenu = false;
				}
		};
		
		Blockly.Arduino.two_buttons_ui_option = function() {
            var code = '';
            return code;
        };
        Blockly.Blocks.two_buttons_ui_option = {
            category: Facilino.locales.getKey('LANG_CATEGORY_ADVANCED'),
			subcategory: Facilino.locales.getKey('LANG_SUBCATEGORY_DIGITAL'),
            tags: ['input','output','button'],
            helpUrl: Facilino.getHelpUrl('two_buttons_ui_option'),
			examples: ['button_case_example.bly'],
			category_colour: Facilino.LANG_COLOUR_ADVANCED,
			colour: Facilino.LANG_COLOUR_ADVANCED_DIGITAL,
			keys: ['LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP'],
            //bq_button initialization
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_ADVANCED_DIGITAL);
				this.appendDummyInput('').appendField(new Blockly.FieldImage('img/blocks/option_list.svg', 24*options.zoom, 24*options.zoom)).appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTIONS')).setAlign(Blockly.ALIGN_RIGHT);
				this.setMutator(new Blockly.Mutator(['two_buttons_ui_option_item']));
                this.setPreviousStatement(false,null);
				this.setInputsInline(false);
                this.setNextStatement(false,null);
                this.setTooltip(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP'));
				this.setOutput(true,'menu_options');
				this.optionCount_ = 0;
            },
            mutationToDom: function() {
                if (!this.optionCount_) {
                    return null;
                }
				var container = document.createElement('mutation');
				if (this.optionCount_) {
					container.setAttribute('item', this.optionCount_);
				}
                return container;
            },
            domToMutation: function(xmlElement) {
                this.optionCount_ = window.parseInt(xmlElement.getAttribute('item'), 10);
                for (var x = 0; x < this.optionCount_; x++) {
                    this.appendStatementInput('OPTION_HIGHLIGHTED' + x).appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION')+x+' '+Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_HIGHLIGHTED')).appendField(new Blockly.FieldImage('img/blocks/option_list_highlighted.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT).setCheck('code');
					this.appendStatementInput('OPTION_SELECTED'+x).setCheck('code').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION')+x+' '+Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_SELECTED')).appendField(new Blockly.FieldImage('img/blocks/option_list_selected.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                }
            },
            decompose: function(workspace) {
                var containerBlock = workspace.newBlock('two_buttons_ui_option_stack');
                containerBlock.initSvg();
                var connection = containerBlock.getInput('STACK').connection;
                for (var x = 0; x < this.optionCount_; x++) {
                    var taskBlock = workspace.newBlock('two_buttons_ui_option_item');
                    taskBlock.initSvg();
                    connection.connect(taskBlock.previousConnection);
                    connection = taskBlock.nextConnection;
                }
                return containerBlock;
            },
            compose: function(containerBlock) {
                // Disconnect all the task input blocks and remove the inputs.
                for (var x = this.optionCount_-1; x >= 0; x--) {
                    this.removeInput('OPTION' + x);
					this.removeInput('OPTION_SELECTED'+x);
                }
                this.optionCount_ = 0;
                // Rebuild the block's optional inputs.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'two_buttons_ui_option_item':
                            var option = this.appendStatementInput('OPTION_HIGHLIGHTED'+this.optionCount_).setCheck('code').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION')+this.optionCount_+' '+Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_HIGHLIGHTED')).appendField(new Blockly.FieldImage('img/blocks/option_list_highlighted.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                            var optionSelected = this.appendStatementInput('OPTION_SELECTED'+this.optionCount_).setCheck('code').appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION')+this.optionCount_+' '+Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_SELECTED')).appendField(new Blockly.FieldImage('img/blocks/option_list_selected.svg', 24*options.zoom, 24*options.zoom)).setAlign(Blockly.ALIGN_RIGHT);
                            this.optionCount_++;
                            // Reconnect any child blocks.
                            if (clauseBlock.valueConnection_) {
                                optionSelected.connection.connect(clauseBlock.valueConnection_);
								option.connection.connect(clauseBlock.valueConnection_);
                            }
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection &&
                        clauseBlock.nextConnection.targetBlock();
                }
            },
            saveConnections: function(containerBlock) {
                // Store a pointer to any connected child blocks.
                var clauseBlock = containerBlock.getInputTargetBlock('STACK');
                var x = 0;
                while (clauseBlock) {
                    switch (clauseBlock.type) {
                        case 'two_buttons_ui_option_item':
                            var inputOption = this.getInput('OPTION' + x);
                            clauseBlock.valueConnection_ = inputOption && inputOption.connection.targetConnection;
                            x++;
                            break;
                        default:
                            throw 'Unknown block type.';
                    }
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                }
            }
        };

        Blockly.Blocks.two_buttons_ui_option_stack = {
			colour: Facilino.LANG_COLOUR_ADVANCED_DIGITAL,
			keys: ['LANG_TWO_BUTTONS_UI_MENU','LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP'],
            // Task.
            init: function() {
                this.setColour(Facilino.LANG_COLOUR_ADVANCED_DIGITAL);
                this.appendDummyInput()
                    .appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_MENU'))
                    .setAlign(Blockly.ALIGN_RIGHT);
                this.appendStatementInput('STACK').setCheck('option');
                this.setTooltip(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP'));
                this.contextMenu = false;
            }
        };

		Blockly.Blocks.two_buttons_ui_option_item = {
				colour: Facilino.LANG_COLOUR_ADVANCED_DIGITAL,
				// Task item.
				keys: ['LANG_TWO_BUTTONS_UI_OPTION','LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP'],
				init: function() {
					this.setColour(Facilino.LANG_COLOUR_ADVANCED_DIGITAL);
					this.appendDummyInput()
						.appendField(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION'))
						.setAlign(Blockly.ALIGN_RIGHT);
					this.setPreviousStatement(true,'option');
					this.setNextStatement(true,'option');
					this.setTooltip(Facilino.locales.getKey('LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP'));
					this.contextMenu = false;
				}
		};

        return Blockly.Blocks;
    }

var Facilino = {
        load: load
    };
    if (typeof define === 'function' && define.amd) {
        return Facilino;
    } else {
        window.Facilino = Facilino;
    }
}));